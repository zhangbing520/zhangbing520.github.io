<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>TS继承</title>
      <link href="/2022/05/19/ts-ji-cheng/"/>
      <url>/2022/05/19/ts-ji-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="TS-继承"><a href="#TS-继承" class="headerlink" title="TS 继承"></a>TS 继承</h2><h3 id="第二章-深度掌握-TypeScript-OOP-相关的一系列核心技能"><a href="#第二章-深度掌握-TypeScript-OOP-相关的一系列核心技能" class="headerlink" title="第二章 深度掌握 TypeScript OOP 相关的一系列核心技能"></a>第二章 深度掌握 TypeScript OOP 相关的一系列核心技能</h3><p><strong>TS 继承相关技能大纲</strong></p><h5 id="2-20-前端深度掌握-TS-继承的重要-长远意义【共1节】"><a href="#2-20-前端深度掌握-TS-继承的重要-长远意义【共1节】" class="headerlink" title="2-20 前端深度掌握 TS 继承的重要+长远意义【共1节】"></a>2-20 前端深度掌握 TS 继承的重要+长远意义【共1节】</h5><h5 id="2-21-1-TS-继承】深度掌握-TS-继承准备：原型链继承-常见疑问"><a href="#2-21-1-TS-继承】深度掌握-TS-继承准备：原型链继承-常见疑问" class="headerlink" title="2-21-1 TS 继承】深度掌握 TS 继承准备：原型链继承+常见疑问"></a>2-21-1 TS 继承】深度掌握 TS 继承准备：原型链继承+常见疑问</h5><p><strong>2-21-2【TS继承】深度掌握 TS 继承准备：原型链继承好处深度剖析</strong></p><p><strong>2-21-3【 TS 继承】  深度掌握 TS 继承准备：原型链继承</strong>+<strong>容易被遗忘的重要一步</strong></p><p><strong>2-21-4【 TS 继承】  深度掌握 TS 继承准备：原型链继承</strong>+<strong>容易被遗忘的重要一步</strong></p><p><strong>2-22【 TS 继承】  深度掌握 TS 继承准备：借用构造函数</strong>【共2节】</p><p><strong>2-23【 TS 继承】  深度掌握 TS 继承准备：借用构造函数+原型链继承组合模式</strong></p><h5 id="2-24【-TS-继承】深度掌握-TS-继承准备-多维授课助深度透彻掌握寄生组合继承【实现方法1-最佳继承模式】【共3节】"><a href="#2-24【-TS-继承】深度掌握-TS-继承准备-多维授课助深度透彻掌握寄生组合继承【实现方法1-最佳继承模式】【共3节】" class="headerlink" title="2-24【 TS 继承】深度掌握 TS 继承准备  多维授课助深度透彻掌握寄生组合继承【实现方法1 最佳继承模式】【共3节】"></a>2-24【 TS 继承】深度掌握 TS 继承准备  多维授课助深度透彻掌握寄生组合继承【实现方法1 最佳继承模式】【共3节】</h5><h5 id="2-25-【-TS-继承】用全栈眼光深度掌握-TS-继承-TS-继承好处-【企业真项目应用场景】【共2节】"><a href="#2-25-【-TS-继承】用全栈眼光深度掌握-TS-继承-TS-继承好处-【企业真项目应用场景】【共2节】" class="headerlink" title="2-25 【 TS 继承】用全栈眼光深度掌握 TS 继承+TS 继承好处  【企业真项目应用场景】【共2节】"></a>2-25 【 TS 继承】用全栈眼光深度掌握 TS 继承+TS 继承好处  【企业真项目应用场景】【共2节】</h5><p><strong>2-26【 TS 继承】  深入 super+方法重写+方法重写的3中实现规则+真实应用场景【共4节】</strong></p><h5 id="2-27【-TS继承编译后的-JS-源码】-逐行深度剖析-手写-TS-继承编译的-JS-源码-【练就更深厚-JS-原型-原型继承功底的绝佳场景-【共6节】"><a href="#2-27【-TS继承编译后的-JS-源码】-逐行深度剖析-手写-TS-继承编译的-JS-源码-【练就更深厚-JS-原型-原型继承功底的绝佳场景-【共6节】" class="headerlink" title="2-27【 TS继承编译后的 JS 源码】   逐行深度剖析 +手写 TS 继承编译的 JS 源码 【练就更深厚 JS 原型+原型继承功底的绝佳场景 ]【共6节】"></a>2-27【 TS继承编译后的 JS 源码】   逐行深度剖析 +手写 TS 继承编译的 JS 源码 【练就更深厚 JS 原型+原型继承功底的绝佳场景 ]【共6节】</h5><p><strong>TS 访问修饰符【已集成到2-25节】</strong></p><hr><p><strong>A-1  TS继承开发JQuery工具库【升级课程用 共5节】</strong></p><hr><h4 id="2-20-前端深度掌握TS继承的重要丶长远意义"><a href="#2-20-前端深度掌握TS继承的重要丶长远意义" class="headerlink" title="2-20    前端深度掌握TS继承的重要丶长远意义"></a>2-20    前端深度掌握TS继承的重要丶长远意义</h4><h5 id="练就-更深厚的-JS-原型，原型链功底"><a href="#练就-更深厚的-JS-原型，原型链功底" class="headerlink" title="练就 更深厚的 JS 原型，原型链功底"></a>练就 更深厚的 JS 原型，原型链功底</h5><p>TS编译后的JS中有经典的JS原型和原型链的源码实现，虽然稍显复杂，但源码并不长，这将是 练就 更深厚的 JS 原型，原型链功底的绝佳场景。通过这几次课的认真磨练，大家将拥有更深厚的 JS 原型，原型链功底【当然你必须认真看完，多练方可】。这不仅让你日后面试大受益，而且也为你能阅读Vue3,React 源码或其他流行框架源码铺路，因为不管是那种源码，JS原型链继承一定会用到，再加上你的TS功底，那么这些都成让你日后前端之路走的更远，走的更高！</p><p><strong>提升前端项目架构的根基技术</strong></p><p>如果要你现在用开发一个工具库，组件库，你打算怎么开发 ? 可以写出n多个版本的代码，都可以实现，但版本和版本之间的价值却差别巨大，你可以用 JS 原型写出1年左右工作经验的前端水准的代码，当然，上乘之选肯定是用 TS 来开发，你也可以灵活运用TS继承，多态等多种技术写出高水准的代码。但如果你不具备后端思维能力，就算你工作了5年，你也不一定能有这样的思维，甚至随时有可能被一个拥有了后端思维的只有1到2年工作经验水准的前端工程师超越。</p><p><strong>突破前端技术瓶颈之一的技能</strong>，<strong>晋级中丶高级前端工程师必会技能</strong></p><p>如果你只掌握了单个类的使用，而不知道如何运用继承，那这也是技能缺失，将会限制你日后技术发展的高度，限制你的技术视野，让你的前端变得过于前端化。</p><p>说深度掌握了 TS 继承就能突破所有的前端技术瓶颈，那很显然是夸大其词，但要想突破前端技术瓶颈，深度掌握继承必然是其中一项技能，而且是根基技术之一，可见继承的重要性不言而喻。</p><p>比如一个简单的汽车租赁项目，让你来实现，你把前端功能实现了，展示在页面上了，但是打开你用 TS 写的 Vuex 代码，用 TS 写的 Nodejs 代码，过于前端化的思维让你编写的代码可能让人不堪入目。这里不单单是说用到封装继承，多态，解耦这些技术，更多的是你过于前端化的思维编写的项目可扩展性将非常差，可读性也差，可重用性【复用性】也低，而这些是评判一个项目是否值钱的关键因素。</p><p>如果你希望未来职业生涯拥有更广阔的技术视野；更远的未来你甚至希望自己能胜任技术总监，那么你就一定从一个更广阔的技术视野来提升自己的技术能力，不能让自己被框在过于前端化的路上。</p><p>虽然老师不能三言两语给同学们描述出什么才叫完全突破前端瓶颈，但有一点是可以肯定的，就是要有一定的后端思维能力，这里当然不是要拥有 Java 后端能力，而是起码具备 Nodejs 后端的项目架构能力，Nodejs 可以前端工程师提升晋级一定要掌握的技能。而深度掌握了 TS 继承已经为突破前端技术瓶颈开了一个好头。</p><h4 id="2-21-深度掌握TS继承准备：原型链继承-常见疑问-容易被遗忘的重要一步"><a href="#2-21-深度掌握TS继承准备：原型链继承-常见疑问-容易被遗忘的重要一步" class="headerlink" title="2-21   深度掌握TS继承准备：原型链继承+常见疑问+容易被遗忘的重要一步"></a>2-21   深度掌握TS继承准备：原型链继承+常见疑问+<strong>容易被遗忘的重要一步</strong></h4><h5 id="（1）原型链继承实现原理："><a href="#（1）原型链继承实现原理：" class="headerlink" title="（1）原型链继承实现原理："></a>（1）原型链继承实现原理：</h5><p><strong>说明：Parent 类是【父构造函数】 Son 类是【子构造函数】</strong></p><p>原型链继承基本思想就是Son 类的原型对象属性【 Son.prototype 】指向 new  Parent( )。即 </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name       <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age   <span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Son</span><span class="token punctuation">(</span><span class="token parameter">favor<span class="token punctuation">,</span>sex</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>favor<span class="token operator">=</span>favor <span class="token comment">// 兴趣爱好</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token operator">=</span>sex   <span class="token punctuation">}</span><span class="token class-name">Son</span><span class="token punctuation">.</span>prototype<span class="token operator">=</span><span class="token keyword">new</span>  <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token string">"好好的"</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span> <span class="token comment">// 98</span><span class="token class-name">Son</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Son <span class="token comment">// 让 Son 类的对象或函数原型 .prototype 指向的原型对象指向Son构造函数对象空间</span><span class="token keyword">let</span> sonObj<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token string">"篮球"</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原型链继承实现的本质是改变Son构造函数的原型对象变量的指向【 就是Son.prototype的指向 】，Son.prototype= new  Parent ( )。那么 Son.prototype 可以访问  Parent 对象空间的属性和方法。所以顺着 [<strong>proto</strong> ]属性 ，Son类也可以访问 Parent 类 的原型对象空间中的所有属性和方法。</p><p><code>原型链继承查找属性和方法的完整路线描述</code>: 子对象首先在自己的对象空间中查找要访问的属性或方法，如果找到，就输出，如果没有找到，就沿着子对象中的__proto__属性指向的原型对象空间中去查找有没有这个属性或方法，如果找到，就输出，如果没有找到，继续沿着原型对象空间中的__proto__查找上一级原型对象空间中的属性或方法，直到找到Object.prototype原型对象属性指向的原型对象空间为止，如果再找不到，就输出null</p><p> <strong>（2）原型链继承实现容易被遗忘的重要一步</strong></p><p>​Son.prototype.constructor = Son</p><p> <strong>（3） 原型链继承常见疑问</strong></p><p>Son.prototype= Parent.prototype 这样作为原型链继承的模式和 <strong>Son.prototype=new  Parent (…)</strong> 又有什么区别呢？</p><blockquote><p>注：这样的方式会使得访问不到parent实例上的属性或方法，只能访问原型上的属性或方法。</p></blockquote><p> <strong>（4）原型链继承的不足</strong></p><p>​<strong>局限性：不能通过子类构造函数向父类构造函数传递参数</strong> </p><h4 id="2-22-深度掌握-TS-继承准备：借用构造函数（冒充对象继承）"><a href="#2-22-深度掌握-TS-继承准备：借用构造函数（冒充对象继承）" class="headerlink" title="2-22  深度掌握 TS 继承准备：借用构造函数（冒充对象继承）"></a><strong>2-22  深度掌握 TS 继承准备：借用构造函数</strong>（冒充对象继承）</h4><h5 id="（1）借用构造函数继承如何解决原型链继承的局限性"><a href="#（1）借用构造函数继承如何解决原型链继承的局限性" class="headerlink" title="（1）借用构造函数继承如何解决原型链继承的局限性"></a>（1）借用构造函数继承如何解决原型链继承的局限性</h5><p>借用构造函数继承思想就是在子类【  ChinesePeople 构造函数】的内部借助 apply ( ) 和 call ( ) 方法调用并传递参数给父类【  People 构造函数】，在父类构造函数中为当前的子类对象变量【ChinesePeopl对象变量】增加属性【本例中增加了name,</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Parent</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"this:"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"this.name:"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>friends <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"xiaozhang"</span><span class="token punctuation">,</span> <span class="token string">"xiaoli"</span><span class="token punctuation">]</span><span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">eat</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" 吃饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Son</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> favor<span class="token punctuation">,</span> sex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>favor <span class="token operator">=</span> favor <span class="token comment">// 兴趣爱好</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex  <span class="token function">Parent</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token comment">// TS继承中使用super</span><span class="token punctuation">}</span><span class="token keyword">let</span> sonobj2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token string">"lisi"</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token string">"打篮球"</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"sonobj2:"</span><span class="token punctuation">,</span> sonobj2<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"sonobj2.friends:"</span><span class="token punctuation">,</span> sonobj2<span class="token punctuation">.</span>friends<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <strong>（2）借用构造函数继承的不足</strong></p><p>借用构造函数实现了子类构造函数向父类构造函数传递参数，但没有继承父类原型的属性和方法，无法访问父类原型上的属性和方法。</p><h4 id="2-23-深度掌握-TS-继承准备：借用构造函数-原型链继承组合模式"><a href="#2-23-深度掌握-TS-继承准备：借用构造函数-原型链继承组合模式" class="headerlink" title="2-23   深度掌握 TS 继承准备：借用构造函数+原型链继承组合模式"></a><strong>2-23   深度掌握 TS 继承准备：借用构造函数+原型链继承组合模式</strong></h4><h5 id="（1）借用构造函数-原型链继承组合模式的优势"><a href="#（1）借用构造函数-原型链继承组合模式的优势" class="headerlink" title="（1）借用构造函数+原型链继承组合模式的优势"></a>（1）借用构造函数+原型链继承组合模式的优势</h5><p><strong>优势1：</strong>具备借用构造函数的优点：子类【 ChinesePeople 构造函数】的内部可以向父类【  People 构造函数】 传递参数</p><p><strong>优势2：</strong>具备原型链继承的优点：ChinesePeople.prototype 和 new ChinesePeople( ) 出来的实例对象变量和实例都可以访问父类【  People 构造函数】 原型对象上的属性和方法。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">People</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>sex<span class="token punctuation">,</span>phone</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">// People父构造函数【看成是一个父类】//=Parent</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span> <span class="token comment">// 实例属性</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token operator">=</span>sex<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>phone<span class="token operator">=</span>phone<span class="token punctuation">}</span><span class="token class-name">People</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">doEat</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"吃饭..."</span><span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">ChinesePeople</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>sex<span class="token punctuation">,</span>phone<span class="token punctuation">,</span>national</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//=SON</span><span class="token function">People</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token punctuation">[</span>name<span class="token punctuation">,</span>sex<span class="token punctuation">,</span>phone<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 借用父构造函数继承</span><span class="token keyword">this</span><span class="token punctuation">.</span>national<span class="token operator">=</span>national<span class="token punctuation">;</span><span class="token comment">// 民族</span><span class="token punctuation">}</span><span class="token class-name">ChinesePeople</span><span class="token punctuation">.</span>prototype<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token string">"wangwu"</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token string">"1111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="（2）借用构造函数-原型链继承组合模式的不足："><a href="#（2）借用构造函数-原型链继承组合模式的不足：" class="headerlink" title="（2）借用构造函数+原型链继承组合模式的不足："></a>（2）借用构造函数+原型链继承组合模式的不足：</h5><p>​  缺点：调用了两次父类构造函数 【 People 构造函数】 new People 调用构造函数带来问题： </p><ol><li><p>进入 People 构造函数为属性赋值，分配内存空间，浪费内存；</p></li><li><p><code>赋值导致效率下降一些，关键是new People 赋的值无意义</code>，出现代码冗余，new ChinesePeople出来的对象和这些值毫不相干，是通过子类 ChinesePeople 构造函数中的 apply 来向父类People构造函数赋值。</p></li></ol><h4 id="2-24-深度掌握-TS-继承准备-多维授课助深度透彻掌握寄生组合继承【实现方法1-优化-】【最佳继承模式】"><a href="#2-24-深度掌握-TS-继承准备-多维授课助深度透彻掌握寄生组合继承【实现方法1-优化-】【最佳继承模式】" class="headerlink" title="2-24    深度掌握 TS 继承准备:  多维授课助深度透彻掌握寄生组合继承【实现方法1+优化 】【最佳继承模式】"></a>2-24    深度掌握 TS 继承准备:  多维授课助深度透彻掌握寄生组合继承【实现方法1+优化 】【最佳继承模式】</h4><p>寄生组合继承模式=借用构造函数继承+寄生继承。</p><p>寄生组合继承既沿袭了借用构造函数+原型链继承两个优势，而且解决了借用构造函数+原型链继承调用了两次父类构造函数为属性赋值的不足。寄生组合继承模式保留了借用构造函数继承，寄生组合继承模式使用寄生继承代替了原型链继承。</p><p><code>什么是寄生继承呢？就是 ChinesePeople.prototype 不再指向 new  People( ) 出来的对象空间，而用 People 类 【父构造函数】的原型对象属性“克隆”了一个对象。再让ChinesePeople.prototype指向这个新对象，很好的避免了借用构造函数+原型链继承调用了两次父类构造函数为属性赋值的不足。</code></p><ul><li>寄生组合继承实现步骤：</li></ul><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 1. 创建一个寄生构造函数</span><span class="token keyword">function</span> <span class="token function">Middle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">}</span>Middle<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Peopel<span class="token punctuation">.</span>prototype<span class="token comment">// 2. 创建一个寄生新创建的构造函数的对象</span><span class="token keyword">let</span> middle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Middle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 3. ChinesePeople 子类的原型对象属性指向第二步创建的构造函数的对象</span>ChinesePeople<span class="token punctuation">.</span>prototype <span class="token operator">=</span> middleChinesePeople<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> ChinesePeople<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>上述代码可以实现继承，但是不具有通用性，可以封装在一个函数中。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token operator">&gt;</span><span class="token keyword">function</span> <span class="token function">createNewPrototypeObj</span><span class="token punctuation">(</span>rootprototype<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">function</span> <span class="token function">Middle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">3</span><span class="token keyword">this</span><span class="token punctuation">.</span>construtor <span class="token operator">=</span> ChinesePeople <span class="token punctuation">}</span> Middle<span class="token punctuation">.</span>prototype <span class="token operator">=</span> rootprototype <span class="token keyword">let</span> middle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Middle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">return</span> middle<span class="token operator">&gt;</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>ChinesePeople<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token function">createNewPrototypeObj</span><span class="token punctuation">(</span>People<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>上述封装的函数是存在一定问题的，出现了具体的 ChinesePeople，可以进一步封装：</li></ul><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token operator">&gt;</span><span class="token keyword">function</span> <span class="token function">createNewPrototypeObj</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> son<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">function</span> <span class="token function">Middle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">3</span><span class="token keyword">this</span><span class="token punctuation">.</span>construtor <span class="token operator">=</span> son <span class="token punctuation">}</span> Middle<span class="token punctuation">.</span>prototype <span class="token operator">=</span> parent<span class="token punctuation">.</span>prototype <span class="token keyword">let</span> middle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Middle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">return</span> middle<span class="token operator">&gt;</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>ChinesePeople<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token function">createNewPrototypeObj</span><span class="token punctuation">(</span>People<span class="token punctuation">,</span> ChinesePeople<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>这里还可以使用 Object.create()，该方法会创建一个新的对象并将传入的参数作为新对象的原型属性</li></ul> <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>    <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// count:3 在obj上，a:1 在 obj 的原型上</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 所以借助 Object.create() 方法：</p> <pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">__extends</span> <span class="token punctuation">(</span>parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> middle <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token punctuation">{</span>    count<span class="token operator">:</span> <span class="token punctuation">{</span>      writeable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      value<span class="token operator">:</span> <span class="token number">23</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> middle<span class="token punctuation">}</span><span class="token keyword">const</span> middle <span class="token operator">=</span> <span class="token function">__extends</span><span class="token punctuation">(</span>People<span class="token punctuation">)</span>ChinesePeople<span class="token punctuation">.</span>prototype <span class="token operator">=</span> middleChinesePeople<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> ChinesePeople<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 但相比而言，通用性和灵活性还是之前的好。</p></blockquote><p>具体执行步骤见下面代码。</p><p>解释 S99 行代码：表示创建了一个新对象，相当用  People  类 【父构造函数】的原型对象属性“克隆”了一个对象。</p><p>解释 S100 行代码：让ChinesePeople 原型对象变量指向S99</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">"克隆"</span>对象实现方式代码优化 <span class="token punctuation">[</span> <span class="token constant">TS</span> 继承和装饰器底层继承实现模式<span class="token punctuation">]</span><span class="token keyword">function</span> <span class="token function">createProtoTypeClone</span><span class="token punctuation">(</span><span class="token parameter">prototypeObject</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">Middle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment">// 第四步在新创建的ChinesePeople原型对象空间的Middle实例对象中添加constructor属性</span>  <span class="token comment">// 使其指向子类ChinesePeople构造函数对象空间</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>constructor<span class="token operator">=</span>ChinesePeople<span class="token punctuation">;</span>  <span class="token comment">// clone.constructor=ChinesePeople;</span>     <span class="token punctuation">}</span>         <span class="token comment">// 第一步.创建Person父类原型的副本</span>  <span class="token class-name">Middle</span><span class="token punctuation">.</span>prototype<span class="token operator">=</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>  <span class="token comment">// 第二步2.1:创建父类原型副本的实例对象</span>     <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Middle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 第二步2.2 clone指向父类原型副本实例对象的变量</span>   vSonr clone<span class="token operator">=</span><span class="token function">createProtoTypeClone</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 第三步:设置子类原型为该副本的实例对象</span><span class="token class-name">ChinesePeople</span><span class="token punctuation">.</span>prototype<span class="token operator">=</span>clone<span class="token punctuation">;</span> <span class="token string">"克隆"</span>对象实现方式<span class="token number">2</span><span class="token comment">// 第S99行效果 = S102+S103。相当用 People 类【父构造函数】的原型对象属性“克隆”了一个对象。</span><span class="token keyword">let</span> cloneOneParentObj<span class="token operator">=</span>Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">People</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>  <span class="token comment">// S99</span>   <span class="token class-name">ChinesePeople</span><span class="token punctuation">.</span>prototype<span class="token operator">=</span>cloneOneParentObj <span class="token comment">// S100</span><span class="token class-name">ChinesePeople</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> ChinesePeople<span class="token punctuation">;</span><span class="token comment">// S101</span><span class="token string">"克隆"</span>对象实现方式<span class="token number">3</span> <span class="token punctuation">[</span>课后思考题<span class="token punctuation">]</span>   <span class="token keyword">let</span> cloneOneParentObj2<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// S102</span>   cloneOneParentObj2<span class="token punctuation">.</span>__proto__<span class="token operator">=</span><span class="token class-name">People</span><span class="token punctuation">.</span>prototype <span class="token comment">// S103</span><span class="token class-name">ChinesePeople</span><span class="token punctuation">.</span>prototype<span class="token operator">=</span>cloneOneParentObj <span class="token comment">// S104</span><span class="token class-name">ChinesePeople</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> ChinesePeople<span class="token punctuation">;</span><span class="token comment">// S105</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-25-用全栈眼光深度掌握TS继承-TS继承好处-【企业真项目应用场景】"><a href="#2-25-用全栈眼光深度掌握TS继承-TS继承好处-【企业真项目应用场景】" class="headerlink" title="2-25 用全栈眼光深度掌握TS继承+TS继承好处  【企业真项目应用场景】"></a><strong>2-25 用全栈眼光深度掌握TS继承+TS继承好处  【企业真项目应用场景】</strong></h4><h5 id="1-理解子类"><a href="#1-理解子类" class="headerlink" title="1. 理解子类"></a>1. 理解子类</h5><p>（1）什么是子类？   </p><p>有两个类，比如 A 类和 B 类，如果满足 A 类  is a kind of  B类，那么 A 类就是 B 类的子类<br>比如：A 类是顾客类，B 类是人类，因为顾客类 a kind of 人类成立【顾客类是人类的一种】，所以顾客类是人类的子类。</p><p>（2） 子类如何继承父类的属性和方法？</p><p>以顾客类为例子：顾客类继承了父类【人类】的非私有的属性和方法，也具备子类独有的属性和方法 。</p><p>顾客类继承父类【人类】的全部非私有的属性和方法外，还有哪些独有的属性和方法呢？<br>顾客类独有属性：顾客等级，顾客编号<br>顾客类独有方法：购买</p><p>  (3)  初步理解为什么要用继承？</p><p> 举例：宠物管理项目中的狗狗类，兔子类，小猫类都是宠物，尽管每个宠物都有独有属性和方法，比如狗狗类的品种，看家方法；兔子类的肤色属性等。但这些类都包含了 name, buymoney[购买价格]，healthstatus[健康状况]，friendshipstar [和主人的友谊星级数]这些属性，如果每一个类都写这些属性，那么就非常臃肿，可以把这些属性提取出来放到一个宠物类中，其他类都继承这个宠物类。当然继承还有更多好处，下面借助汽车租赁功能的实现来更深度的掌握继承。</p><p> (4)  汽车租赁管理功能【深度掌握继承】</p><p>需求1:汽车租赁功能实现: 有小轿车,大巴,卡车三种类型的车,顾客可以租任意一种或多种不同类型的车,按照租用的天计算租金， 同时为了响应国家对各类车安全的管理, 对在租赁期内有过各种超载，超乘客数，酒后驾车等违规的车需额外支付一定的费用。</p><p>需求2:计算退回费用：最终退回顾客的费用为押金扣除使用天数，如押金不足需额外支付不足部分。</p><p>思考小轿车,大巴,卡车共同属性:  品牌 ( brand )  VechileNo ( 车牌号 )  days ( 租赁天数 ) total ( 支付的租赁总费用 )  deposit ( 押金 )</p><p>思考小轿车,大巴,卡车共同方法: 计算租赁车的价格 ( calculateRent)   支付押金的方法( payDesposit)</p><p>​安全规则方法（safeShow)</p><p>父类：Vechile   交通工具。</p><p>// 子类 小轿车 【型号】type属性</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Vechile</span> <span class="token punctuation">{</span> <span class="token comment">// 父类</span>  <span class="token keyword">public</span> brand<span class="token operator">!</span><span class="token operator">:</span> <span class="token builtin">string</span>  <span class="token keyword">public</span> vechileNo<span class="token operator">!</span><span class="token operator">:</span> <span class="token builtin">string</span>  <span class="token keyword">public</span> days<span class="token operator">!</span><span class="token operator">:</span> <span class="token builtin">number</span>  <span class="token keyword">public</span> deposit<span class="token operator">!</span><span class="token operator">:</span> <span class="token builtin">number</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>brand<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> vechileNo<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> days<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> deposit<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand    <span class="token keyword">this</span><span class="token punctuation">.</span>vechileNo <span class="token operator">=</span> vechileNo    <span class="token keyword">this</span><span class="token punctuation">.</span>days <span class="token operator">=</span> days    <span class="token keyword">this</span><span class="token punctuation">.</span>deposit <span class="token operator">=</span> deposit  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">calculateRent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">0</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">payDeposit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">+</span> <span class="token string">"车牌号为："</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vechileNo <span class="token operator">+</span> <span class="token string">"支付了："</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">safeCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'车规则。。。。'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">+</span> <span class="token string">"车牌号为："</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vechileNo <span class="token operator">+</span> <span class="token string">"违规了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 子类</span><span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token keyword">extends</span> <span class="token class-name">Vechile</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> type<span class="token operator">!</span><span class="token operator">:</span> <span class="token builtin">string</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>brand<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> vechileNo<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> days<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> deposit<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> type<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>brand<span class="token punctuation">,</span> vechileNo<span class="token punctuation">,</span> days<span class="token punctuation">,</span> deposit<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">getPriceByType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> rentMoneyByDay<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'普拉多巡洋舰'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      rentMoneyByDay <span class="token operator">=</span> <span class="token number">800</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'凯美瑞旗舰版'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      rentMoneyByDay <span class="token operator">=</span> <span class="token number">400</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'威驰智行版'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      rentMoneyByDay <span class="token operator">=</span> <span class="token number">200</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> rentMoneyByDay  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">calculateRent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span> <span class="token comment">// 方法重写 override</span>    <span class="token comment">// super.calculateRent() // Vechile.prototype.calculateRent.call(this)</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>days <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPriceByType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string">'普拉多'</span><span class="token punctuation">,</span> <span class="token string">'京A12345'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">100000</span><span class="token punctuation">,</span> <span class="token string">'普拉多巡洋舰'</span><span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>car<span class="token punctuation">.</span><span class="token function">calculateRent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2400</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-26-【-TS-继承】-super-方法重写的真应用"><a href="#2-26-【-TS-继承】-super-方法重写的真应用" class="headerlink" title="2-26 【 TS 继承】 super+方法重写的真应用"></a>2-26 【 TS 继承】 super+方法重写的真应用</h4><p><strong>方法重写：</strong>（override)</p><p><strong>条件</strong>：一定发生在继承的子类中</p><p><strong>位置</strong>： 子类中重写父类的方法</p><p><strong>应用场景</strong>：当父类中方法的实现不能满足子类功能需要或不能完全满足子类功能需要时，就需要在子类中进行重写</p><p><strong>方法重写给继承带来的好处</strong>: 让所有的子类共用父类中方法已经实现了一部分功能的代码【父类方法代码在各个子类中得到了复用】 </p><p><strong>定义规则</strong>：1. 和父类方法同名  2. 参数和父类相同，如果是引用类型的参数，需要依据具体类型来定义。</p><ol start="3"><li><p>父类方法的访问范围【访问修饰符】必须小于子类中方法重写的访问范围【访问修饰符】</p><p>同时父类方法不能是private</p></li></ol><p><strong>super的两种用法</strong>【super只能出现在子类【派生类】中】</p><p><strong>用法1</strong>：在子类的构造函数中使用 super (子类传递给父类构造函数的参数) 就表示用来调用父类构造函数  (传递给父类构造函数的参数)</p><p>还记得吗？super 编译成 JS 源码后 可以看到：就是采用 JS 原型中的借用构造函数来实现的</p><p><strong>用法2</strong>：在子类重写的方法中调用父类同名方法，super.重写的方法</p><p><strong>错误用法</strong>：当子类和父类有同名属性时，可以在子类中用 super 来获取父类同名属性吗？【不能】【一般要避免在子类，父类属性名同名】</p><h4 id="2-27【-TS-继承】-逐行深度剖析-手写TS-继承编译的-JS-源码-【练就更深厚JS-原型-原型继承功底的绝佳场景"><a href="#2-27【-TS-继承】-逐行深度剖析-手写TS-继承编译的-JS-源码-【练就更深厚JS-原型-原型继承功底的绝佳场景" class="headerlink" title="2-27【 TS 继承】 逐行深度剖析 +手写TS 继承编译的 JS 源码 【练就更深厚JS 原型+原型继承功底的绝佳场景 ]"></a>2-27【 TS 继承】 逐行深度剖析 +手写TS 继承编译的 JS 源码 【练就更深厚JS 原型+原型继承功底的绝佳场景 ]</h4><p><strong>（1）相关技术</strong>：setPrototypeOf 使用+ 和 Object.create 的区别；</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>count<span class="token operator">:</span><span class="token punctuation">{</span>value<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    writeable<span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">let</span> newObj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token punctuation">{</span>a<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// obj.__proto__ = {a:1}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">{</span><span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span>count<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">[</span><span class="token punctuation">[</span>Prototype<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> Objecta<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">[</span><span class="token punctuation">[</span>Prototype<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> Object<span class="token punctuation">{</span><span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span>count<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">[</span><span class="token punctuation">[</span>Prototype<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> Objecta<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">[</span><span class="token punctuation">[</span>Prototype<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> Object<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>可以看到以上两种方法达到的结果是一样的。都是在设置对象的原型</p><p>(2)  <strong>父类静态方法和属性在子类中的继承</strong>：setPrototypeOf 和  Object.create 分别实现；</p></li></ul><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">People</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex   <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">}</span>People<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">1</span>People<span class="token punctuation">.</span><span class="token function-variable function">methods1</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span>People<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span><span class="token function-variable function">methods3</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> People<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 对象的自有属性 还会找 __proto__上的</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token comment">// count methods1 methods3</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注：for(let key in People) 会遍历对象上的自有属性，以及<code> __proto</code>__上的可遍历属性</p></blockquote><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">People</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex   <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">}</span>People<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">1</span>People<span class="token punctuation">.</span><span class="token function-variable function">methods1</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span>People<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span><span class="token function-variable function">methods3</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> People<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 对象的自有属性 还会找 __proto__上的</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>People<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 只遍历对象上的自有属性和方法，忽略原型上的</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token comment">// count methods1</span>  ChinesePeople<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> People<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token comment">// 继承父类上的静态属性和方法</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>（2） 深度掌握 +手写+优化底层 extendsStatics  方法的实现；</strong></p><p>​extendsStatics 方法的作用：  完成父类静态方法和属性在子类中的继承</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>People<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// Object.keys 只会遍历对象本身的属性</span>  ChinesePeople<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> People<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token comment">// 继承父类的静态属性和方法</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">ChinesePeople<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> People<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>实现静态属性方法继承的逻辑：在进行静态方法 ChinesePeople.count 的查找时，会先在 ChinesePeople 对象本身进行查找，没有发现后去<code>ChinesePeople.__proto</code>__进行查找。</li></ul><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>ChinesePeople<span class="token punctuation">,</span> People<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>与上面的方法的思想是一样的。</li></ul><p>（3）<strong>深度掌握_extends 方法</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">  <span class="token comment">// 手写优化后源码：</span>   <span class="token keyword">var</span> _extends <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>extends_<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">getExendsStatics2</span> <span class="token punctuation">(</span><span class="token parameter">son<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    son<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> parent  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">getExendsStatics3</span> <span class="token punctuation">(</span><span class="token parameter">son<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        son<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> parent<span class="token punctuation">[</span>key<span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 等价</span>    <span class="token comment">//继承父类的静态属性和方法</span>    <span class="token comment">// Object.keys(parent).forEach(function (son) {</span>    <span class="token comment">//   Child[key] = Father[key];</span>    <span class="token comment">// });</span>    <span class="token comment">//return Object.setPrototypeOf(son, parent)</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> <span class="token function-variable function">extendsStatics</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">son<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    extendsStatics <span class="token operator">=</span> Object<span class="token punctuation">.</span>setPrototypeOf <span class="token operator">||</span> getExendsStatics2 <span class="token operator">||</span> getExendsStatics3    <span class="token keyword">return</span> <span class="token function">extendsStatics</span><span class="token punctuation">(</span>son<span class="token punctuation">,</span> parent<span class="token punctuation">)</span>   <span class="token punctuation">}</span>  <span class="token keyword">var</span> <span class="token function-variable function">_extends</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">son<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">extendsStatics</span><span class="token punctuation">(</span>son<span class="token punctuation">,</span> parent<span class="token punctuation">)</span>    <span class="token keyword">function</span> <span class="token function">middle</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>constructor <span class="token operator">=</span> son    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>      middle<span class="token punctuation">.</span>prototype <span class="token operator">=</span> parent<span class="token punctuation">.</span>prototype      <span class="token comment">//son.prototype = parent === null ? Object.create(null) : new middle()</span>      son<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Middle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      son<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// 空对象</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> _extends<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> Vechile <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">Vechile</span> <span class="token punctuation">(</span><span class="token parameter">brand_<span class="token punctuation">,</span> vechileNo_<span class="token punctuation">,</span> days_<span class="token punctuation">,</span> deposit_</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand_<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>vechileNo <span class="token operator">=</span> vechileNo_<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>days <span class="token operator">=</span> days_<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>deposit <span class="token operator">=</span> deposit_<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// 计算租赁车的价格 ( calculateRent)</span>  <span class="token class-name">Vechile</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">calculateRent</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"calculateRent来自Vechile=&gt;this.brand:"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">+</span> <span class="token string">" 车牌号为:"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vechileNo <span class="token operator">+</span> <span class="token string">"开始被租"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token class-name">Vechile</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">safeShow</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"车规则...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">+</span> <span class="token string">" 车牌号为:"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vechileNo <span class="token operator">+</span> <span class="token string">" 违规了:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  Vechile<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> Vechile<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">var</span> Car <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">_super</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">_extends</span><span class="token punctuation">(</span>Car<span class="token punctuation">,</span> _super<span class="token punctuation">)</span>  <span class="token keyword">function</span> <span class="token function">Car</span> <span class="token punctuation">(</span><span class="token parameter">brand_<span class="token punctuation">,</span> vechileNo_<span class="token punctuation">,</span> days_<span class="token punctuation">,</span> deposit_<span class="token punctuation">,</span> type_</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">_super</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> brand_<span class="token punctuation">,</span> vechileNo_<span class="token punctuation">,</span> days_<span class="token punctuation">,</span> deposit_<span class="token punctuation">)</span>    <span class="token comment">// var _this = _super.call(this, brand_, vechileNo_, days_, deposit_) || this</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type_<span class="token punctuation">;</span>    <span class="token comment">//console.log("_this:", _this)</span>    <span class="token comment">//_this.type = type_;</span>    <span class="token comment">//return _this;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token class-name">Car</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getPriceByType</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> rentMoneyByDay <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//每天的租金</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">"普拉多巡洋舰"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      rentMoneyByDay <span class="token operator">=</span> <span class="token number">800</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">"凯美瑞旗舰版"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      rentMoneyByDay <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">"威驰智行版"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      rentMoneyByDay <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> rentMoneyByDay<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token class-name">Car</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">calculateRent</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">safeShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">_super</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">calculateRent</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//=Vechile.prototype.calculateRent.call(this)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Car:"</span><span class="token punctuation">,</span> Car<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"型号:"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>days <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPriceByType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> Car<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">(</span>Vechile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">var</span> car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string">"普拉多"</span><span class="token punctuation">,</span> <span class="token string">"京3A556"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">100000</span><span class="token punctuation">,</span> <span class="token string">"凯美瑞旗舰版"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"car:"</span><span class="token punctuation">,</span> car<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>car<span class="token punctuation">.</span><span class="token function">calculateRent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 继承 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单件设计模式、静态属性、静态方法</title>
      <link href="/2022/05/18/dan-jian-she-ji-mo-shi-jing-tai-shu-xing-jing-tai-fang-fa/"/>
      <url>/2022/05/18/dan-jian-she-ji-mo-shi-jing-tai-shu-xing-jing-tai-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="单件设计模式、静态属性、静态方法"><a href="#单件设计模式、静态属性、静态方法" class="headerlink" title="单件设计模式、静态属性、静态方法"></a>单件设计模式、静态属性、静态方法</h2><h3 id="第二章-深度掌握-TypeScript-OOP-相关的一系列核心技能"><a href="#第二章-深度掌握-TypeScript-OOP-相关的一系列核心技能" class="headerlink" title="第二章 深度掌握 TypeScript OOP 相关的一系列核心技能"></a>第二章 深度掌握 TypeScript OOP 相关的一系列核心技能</h3><h5 id="2-16-1【单件设计模式】-单件设计模式中你没注意到的定义陷阱【坑】-真实应用场景"><a href="#2-16-1【单件设计模式】-单件设计模式中你没注意到的定义陷阱【坑】-真实应用场景" class="headerlink" title="2-16-1【单件设计模式】 单件设计模式中你没注意到的定义陷阱【坑】 +真实应用场景"></a>2-16-1【单件设计模式】 单件设计模式中你没注意到的定义陷阱【坑】 +真实应用场景</h5><h5 id="2-16-2【单件设计模式】-单件设计模式中你没注意到的定义陷阱【坑】-真实应用场景"><a href="#2-16-2【单件设计模式】-单件设计模式中你没注意到的定义陷阱【坑】-真实应用场景" class="headerlink" title="2-16-2【单件设计模式】 单件设计模式中你没注意到的定义陷阱【坑】 +真实应用场景"></a>2-16-2【单件设计模式】 单件设计模式中你没注意到的定义陷阱【坑】 +真实应用场景</h5><h5 id="2-17【单件设计模式】-单件设计模式实现方式1-实战【真实应用场景】"><a href="#2-17【单件设计模式】-单件设计模式实现方式1-实战【真实应用场景】" class="headerlink" title="2-17【单件设计模式】 单件设计模式实现方式1+实战【真实应用场景】"></a>2-17【单件设计模式】 单件设计模式实现方式1+实战【真实应用场景】</h5><h5 id="2-18-1【单件设计模式】-融合单件设计模式深入掌握静态属性，静态方法【全，深，实用】"><a href="#2-18-1【单件设计模式】-融合单件设计模式深入掌握静态属性，静态方法【全，深，实用】" class="headerlink" title="2-18-1【单件设计模式】 融合单件设计模式深入掌握静态属性，静态方法【全，深，实用】"></a><strong>2-18-1【单件设计模式】 融合单件设计模式深入掌握静态属性，静态方法【全，深，实用】</strong></h5><h5 id="2-18-2【单件设计模式】-融合单件设计模式深入掌握静态属性，静态方法【全，深，实用】"><a href="#2-18-2【单件设计模式】-融合单件设计模式深入掌握静态属性，静态方法【全，深，实用】" class="headerlink" title="2-18-2【单件设计模式】 融合单件设计模式深入掌握静态属性，静态方法【全，深，实用】"></a>2-18-2【单件设计模式】 融合单件设计模式深入掌握静态属性，静态方法【全，深，实用】</h5><h5 id="2-18-3【单件设计模式】融合单件设计模式深入掌握静态属性，静态方法【全，深，实用】"><a href="#2-18-3【单件设计模式】融合单件设计模式深入掌握静态属性，静态方法【全，深，实用】" class="headerlink" title="2-18-3【单件设计模式】融合单件设计模式深入掌握静态属性，静态方法【全，深，实用】"></a>2-18-3【单件设计模式】融合单件设计模式深入掌握静态属性，静态方法【全，深，实用】</h5><h5 id="2-19【单件设计模式】单件设计模式实现方式2"><a href="#2-19【单件设计模式】单件设计模式实现方式2" class="headerlink" title="2-19【单件设计模式】单件设计模式实现方式2"></a>2-19【单件设计模式】单件设计模式实现方式2</h5><h4 id="2-16-【单件设计模式】-单件设计模式中你没注意到的定义陷阱【坑】-真实应用场景"><a href="#2-16-【单件设计模式】-单件设计模式中你没注意到的定义陷阱【坑】-真实应用场景" class="headerlink" title="2-16   【单件设计模式】 单件设计模式中你没注意到的定义陷阱【坑】 + 真实应用场景"></a>2-16   【单件设计模式】 单件设计模式中你没注意到的定义陷阱【坑】 + 真实应用场景</h4><h5 id="（1）-了解设计模式"><a href="#（1）-了解设计模式" class="headerlink" title="（1） 了解设计模式"></a>（1） 了解设计模式</h5><p>设计模式通俗的讲，就是一种更好的编写代码方案，打个比喻：从上海到武汉，你可以选择做飞机，做轮船，开车，骑摩托车多种方式，把出行看成是编码，那么选择飞机相对就是一个更好选择的优化方案。</p><p><strong>（2） 常见设计模式概述</strong></p><p>常见的设计模式有单件设计模式，简单工厂设计模式，工厂方法，抽象工厂设计模式，观察者设计模式，装饰设计模式，代理设计模式，MVC，MVP, MVVM 架构设计模式。本课程讲解单件设计模式，原因有两个： 1. 设计模式并非 TypeScript 课程的重点，我们要把更多时间留给TS核心技能。 2. 单件设计模式虽短小精悍，但能更好的帮助掌握 TS 类，类的静态方法，类构造器，类对象的联合运用。 </p><p> <strong>（3）单件设计模式的两种定义和定义中的存在的陷阱</strong> </p><p><strong>简明定义1</strong>：一个类对外有且仅有一个实例【只提供一个实例】，这种编码方案就是单件设计模式。</p><p><strong>完整定义1：</strong>如果某个类对外始终只提供一个对象【实例】，并且在该类的内部提供了一个外部访问该对象的方法或该对象属性，那么这种编写代码方案【就是设计模式】就是单件设计模式。</p><p><strong>完整定义2：</strong>如果一个类的任何外部通过访问类提供的某个方法或某个属性始终只能获取该类一个对象【实例】，但如果该类提供了多个外部可以访问的方法或属性，那么外部就能访问到该类的多个不同的对象，但从实际开发来看，绝大多数情况的应用场景，我们对外都只提供一个唯一的可以访问的方法或属性，这样就保证了实例为单个，类的这种编写代码的方案【就是设计模式】就是单件设计模式。</p><p>哪一种定义对？</p><h5 id="（4）-何时需要使用单件设计模式？"><a href="#（4）-何时需要使用单件设计模式？" class="headerlink" title="（4） 何时需要使用单件设计模式？"></a>（4） 何时需要使用单件设计模式？</h5><p>实际开发中，外部访问某个类的对象【实例】时，确保只能访问该类的唯一对象时才能保证逻辑的正确性时，这时就应该使用单件设计模式了。</p><p><strong>（5）前端领域单件设计模式的真实应用场景</strong></p><p><strong>应用场景1：</strong>比如 Vuex，React-Redux 中的全局状态管理容器 store 对象在整个项目被设计成唯一的对象【实例】，把 store 对象所在 的类设计成单件设计模式将是最好的设计方案 【当然也可以有其他替代写法】</p><p><strong>应用场景2：</strong>一般前端项目需要进行客户端本地数据存储时，都会考虑使用 localStorage，localStorage只要在相同的协议、相同的主机名、相同的端口下，就能读取/修改到同一份 localStorage 数据。那封装 localStorage设计成一个单件设计模式类就再合适过了。【尽管也可以其他写法，但依然存在问题，编码时我们会给同学们说明】。</p><p><strong>应用场景3：</strong>我们知道项目日志记录是一个项目中必不可少的环节，当我们为一个项目编写一个日志文件类，用来保存日志和阅读日志信息时，这个日志文件类可以有多种设计方案，但把类写成单件模式是最好的方案，因为每次存储日志信息到日志文件上时都创建一个日志对象，这既没有必要，也很浪费内存空间。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">MyLocalStorage1</span> <span class="token punctuation">{</span>  <span class="token comment">// 静态属性和对象属性是类中两大成员</span>  <span class="token keyword">static</span> storage<span class="token operator">:</span> MyLocalStorage1  <span class="token comment">// 构造器设为私有，不允许外部 new 创建对象</span>  <span class="token keyword">private</span> <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'------------------------'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment">// 1. 带 static 关键字的方法是一个静态方法</span>  <span class="token comment">// 2. 静态方法和对象无关，外部对象变量不能调用静态方法和静态属性</span>  <span class="token comment">// 3. 外部可以通过类名来调用</span>  <span class="token comment">// 静态方法不可以访问实例属性或实例方法【对象属性或对象方法】</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>storage<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 静态方法可以使用 this 调用 其他静态方法和静态属性</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>storage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyLocalStorage1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>storage  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">setItem</span><span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> value <span class="token operator">=</span> window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">return</span> value <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>MyLocalStorage1<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>MyLocalStorage1<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>调用了两次但是只打印了一次 ‘—————-‘</li></ul><h3 id="慕课TS高级课程"><a href="#慕课TS高级课程" class="headerlink" title="慕课TS高级课程"></a><strong>慕课TS高级课程</strong></h3><h4 id="2-17-【单件设计模式】-单件设计模式实战【真实应用场景】编码实现"><a href="#2-17-【单件设计模式】-单件设计模式实战【真实应用场景】编码实现" class="headerlink" title="2-17   【单件设计模式】 单件设计模式实战【真实应用场景】编码实现"></a>2-17   【单件设计模式】 单件设计模式实战【真实应用场景】编码实现</h4><h4 id="2-18-【单件设计模式】-融合单件设计模式深入掌握静态属性，静态方法"><a href="#2-18-【单件设计模式】-融合单件设计模式深入掌握静态属性，静态方法" class="headerlink" title="2-18   【单件设计模式】 融合单件设计模式深入掌握静态属性，静态方法"></a><strong>2-18   【单件设计模式】 融合单件设计模式深入掌握静态属性，静态方法</strong></h4><p><strong>（1）懒汉式单件设计模式：</strong>懒汉式单件设计模式是在你真正用到类的实例时才创建这个唯一的对象。</p><p><strong>（2）逐点掌握静态属性，静态方法 【静态成员=静态属性+静态方法】的特点</strong></p><p><strong>1. 外部如何调用 TS 类的静态成员？</strong>答：类名直接调用静态成员，格式：类名.静态属性  类名.静态方法。</p><p><strong>2. TS类的一个静态方法如何调用其他的静态成员？</strong> 答：使用 this 来获取静态成员。</p><p><strong>3.  静态方法是否可以访问类中原型对象上的方法或对象属性【对象基本类型数据+对象引用属性】，反过来呢?</strong>  答：都不能。</p><p><strong>4.  对象变量是否可以访问静态成员？</strong>答：不能。</p><p><strong>5. 一个静态方法改变了某个静态属性，其他静态方法或类外部任何地方访问这个属性都会发生改变。</strong></p><p><strong>6.  静态成员保存在内存哪里？何时分配的内存空间呢？</strong></p><p>答：任何一个 TS 类中的静态成员存储在内存的静态区，运行一个 TS 类，TS首先会为静态成员开辟内存空间，静态成员的内存空间分配的时间要早于对象空间的分配，也就是任何一个对象创建之前 TS 就已经为静态成员分配好了空间。但一个静态方法或静态属性只会分配一个空间，只要当前服务器不重启或控制台程序还没有结束之前【如果是开发期间临时测试，一般用控制台】，那么静态方法或者是静态属性就一直存在内存空间，无论调用多少次这个静态方法或静态属性，都是调用的同一块空间。</p><p>总结静态方法，两点：</p><p><strong>总结1：</strong> 无论你是否创建对象，创建多少个对象，是否调用该静态方法或静态属性，TS都会为这个静态方法或静态属性分配内存空间，注意：静态成员和对象无关。</p><p><strong>总结2：</strong>一旦为静态方法或静态属性分配好空间，就一直保存到内存中，直到服务器重启或者控制台程序执行结束才被释放。</p><h5 id="彩蛋：new-一个-TS-类的方法可以吗？能在TS-类外部使用-prototype为TS类增加方法或属性吗"><a href="#彩蛋：new-一个-TS-类的方法可以吗？能在TS-类外部使用-prototype为TS类增加方法或属性吗" class="headerlink" title="彩蛋：new 一个 TS 类的方法可以吗？能在TS 类外部使用 prototype为TS类增加方法或属性吗?"></a><strong>彩蛋：</strong>new 一个 TS 类的方法可以吗？能在TS 类外部使用 prototype为TS类增加方法或属性吗?</h5><p>虽然在 JS 中可以 new 一个类【构造函数】内部定义的对象方法或静态方法，但TS已经屏蔽了去new 一个类中的方法【 JS 可以，会当成一个构造函数】，TS 类可以访问 prototype 原型对象属性，但无法在 prototype 原型对象属性增加新的方法或属性，这么做，就是让我们只能在类的内部定义方法，防止回到 ES5 从前非面向类和对象的而写法。【但是可以覆盖类上已经存在的方法】</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> myLs <span class="token operator">=</span> MyLocalStorage1<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">myLs</span><span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token comment">// 这行代码会报错，不允许 new</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">MyLocalStorage1<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">vv</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 这一行也会报错，TS无法在类的原型上增加新的方法属</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>在JS中上述操作是允许的</li></ul><p><strong>慕课TS高级课程</strong></p><p><strong>7.   静态方法或属性和原型对象空间上的方法或属性有何区别？</strong></p><p>答：原型对象空间上的方法和属性用来提供给该类的所有对象变量共用的方法或属性，没有对象和对象变量，原型上的属性和方法就没有了用武之地，而静态方法或静态属性属于类，可以通过类来直接访问。任何一个对象创建之前 TS 就已经为静态成员分配好了空间。但一个静态方法或静态属性只会分配一个空间，而每一个对象都有自己独立的空间。</p><p><strong>8.  静态方法是否可以接受一个对象变量来作为方法的参数？</strong></p><p>答：可以，静态方法内部不能通过this来访问对象属性和方法，但可以通过调用静态方法时把对象变量传递给静态方法来使用。比如：我们把 js 的 Object 构造函数想象成一个 TS 类【实际 TS 类编译后的 JS 文件中就变成了一个构造函数】。Object 类就拥有大量的静态方法，例如：apply，call，bind，keys等，现在我们来关注静态方法是否可以接受对象变量作为方法的参数，我们以Object.keys方法为例 【Object类的keys方法用来获取给定对象的自身可枚举属性组成的数组】。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 我们现在把 Object 构造函数看成一个 Object 类，创建 Object 类的对象。</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">"wangwu"</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">23</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//1</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">"wangwu"</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">23</span> <span class="token punctuation">}</span><span class="token comment">// 2是1的简写</span><span class="token comment">// 把 obj 对象变量传递给 keys静态方法，obj对象变量作为 keys 静态方法的参数</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="9-何时应该把一个方法定义成静态方法或属性定义为静态属性呢？【应用】"><a href="#9-何时应该把一个方法定义成静态方法或属性定义为静态属性呢？【应用】" class="headerlink" title="9.  何时应该把一个方法定义成静态方法或属性定义为静态属性呢？【应用】"></a><strong>9.  何时应该把一个方法定义成静态方法或属性定义为静态属性呢？【应用】</strong></h5><p>答:  <strong>应用1：单件设计模式就是静态方法和静态属性很好的应用场景之一。</strong>当外部不能创建对象，就只能借助类内部的静态方法来获取类的对象；这时肯定不能把这个方法定义成原型对象属性上的方法，只能定义为类的静态方法，因为如果定义成原型对象属性的方法，就会导致外部无法被访问，因为外部根本不能创建对象，也就无法访问原型对象属性上的方法。而静态方法要访问的属性就只能是静态属性了，这也是静态属性的应用时机。</p><p>​ <strong>应用2：</strong> <strong>当类中某个方法没有任何必要使用任何对象属性时，而且使用了对象属性反而让这个方法的逻辑不正确，那既如此，就应该禁止这个方法访问任何对象属性和其他的对象方法，这时就应该把这个方法定义为静态方法。</strong>例如：一个顾客类的购买方法【 buy 方法】中肯定要允许访问顾客姓名或其他顾客微信这些对象属性，这样的方法我们就<strong>需要定义在原型对象属性</strong>上，但如果顾客类中的 阅读顾客积分公告方法【 readNotice 方法] 是针对全体顾客的公告方法，就应该定义为静态方法，方法内部就应该禁止出现任何具体的对象属性。如果在这样的方法中使用了顾客的某个属性，比如用了顾客姓名，那么这个方法逻辑就不正确【<strong>这个方法就会说：你让我向全体顾客展示公告，你我要知道每个顾客姓名做什么？</strong>】。所以我们应该让这样的方法禁止访问对象属性和其他的对象方法，那就应该设置为静态方法。</p><h5 id="应用3：当一个类中某个方法只有一个或者-1-2个-对象属性，而且更重要的是，你创建这个类的对象毫无意义，我们只需要使用这个类的一个或者多方法就可以了，那么这个方法就应该定义为静态方法。常见的工具类中的方法通常都应该定义为静态方法。比如-StringUtil-FileUtil-等，我们以-FileUtil-为例进行讲解"><a href="#应用3：当一个类中某个方法只有一个或者-1-2个-对象属性，而且更重要的是，你创建这个类的对象毫无意义，我们只需要使用这个类的一个或者多方法就可以了，那么这个方法就应该定义为静态方法。常见的工具类中的方法通常都应该定义为静态方法。比如-StringUtil-FileUtil-等，我们以-FileUtil-为例进行讲解" class="headerlink" title="应用3：当一个类中某个方法只有一个或者 1-2个 对象属性，而且更重要的是，你创建这个类的对象毫无意义，我们只需要使用这个类的一个或者多方法就可以了，那么这个方法就应该定义为静态方法。常见的工具类中的方法通常都应该定义为静态方法。比如 StringUtil, FileUtil 等，我们以 FileUtil 为例进行讲解"></a>应用3：当一个类中某个方法只有一个或者 1-2个 对象属性，而且更重要的是，你创建这个类的对象毫无意义，我们只需要使用这个类的一个或者多方法就可以了，那么这个方法就应该定义为静态方法。常见的工具类中的方法通常都应该定义为静态方法。比如 StringUtil, FileUtil 等，我们以 FileUtil 为例进行讲解</h5><p><em><strong>思考题</strong></em>：定义一个文件工具类【 FileUtil 】，编写一个读取文件方法【readFile方法】方便外部调用，那这样的方法应该定义为静态方法吗？</p><p>答：定义在原型属性上和定义为静态方法似乎都可以，只要 readFile 方法获取到外部提供文件名就可以展开文件读写。请看下面两段代码，我们仔细比较后再来决定用哪一种方案？</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">FileUtil</span><span class="token punctuation">{</span><span class="token comment">// 从指定文件上把数据读出来打印在控制台或页面上的静态方法</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token parameter">readonly fileName<span class="token operator">:</span>string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">err</span><span class="token operator">:</span> any<span class="token punctuation">,</span> <span class="token literal-property property">data</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"fs.readFile:"</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>  <span class="token comment">// 把键盘输入的数据或页面上获取的数据写入到指定文件上的静态方法</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">fileName</span><span class="token operator">:</span>string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token string">'刘老根4'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'写文件失败'</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'写文件成功'</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token comment">// 实际应用中，读和写一般都不在一个时间段，可能读功能完成后，过了几分钟，用户才在客户端执行写的方法，</span> <span class="token comment">// 又过了一会，用户又在客户端执行了读的方法。 但我们知道静态方法实际上是一直保存到内存空间，这样反复操作其实节省了大量反复创建 和释放 FileUtil 对象的时间和对应的对象内存空间。</span> FileUtil<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./log.txt'</span><span class="token punctuation">)</span> FileUtil<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">'./log5.txt'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">FileUtil</span><span class="token punctuation">{</span>   <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">public</span> <span class="token literal-property property">fileName</span><span class="token operator">:</span>string</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>     <span class="token comment">// 从指定文件上把数据读出来打印在控制台或页面上的静态方法</span>   <span class="token keyword">public</span>  <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">err</span><span class="token operator">:</span> any<span class="token punctuation">,</span> <span class="token literal-property property">data</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"fs.readFile:"</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>       <span class="token comment">// 把键盘输入的数据或页面上获取的数据写入到指定文件上的静态方法</span>    <span class="token keyword">public</span> <span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">fileName</span><span class="token operator">:</span>string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token string">'刘老根4'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'写文件失败'</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'写文件成功'</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token comment">// 实际应用中，读和写一般都不在一个时间段，可能读功能完成后，过了几分钟，用户才在客户端执行写的方法，</span> <span class="token comment">// 又过了一会，用户又在客户端执行了读的方法。所以每次都要创建 FileUtil 对象，这样反复创建 和释放  FileUtil 对象，就浪费了大量反复创建 和释放 FileUtil 对象的时间和对应的对象内存空间</span> <span class="token keyword">new</span> <span class="token class-name">FileUtil</span><span class="token punctuation">(</span><span class="token string">'./log.txt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">FileUtil</span><span class="token punctuation">(</span><span class="token string">'./log5.txt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="10-对于第-9-项思考题中的关于使用静态属性或静态方法的解决方案绝对不能用在学生，顾客其他应用场景，那样会导致三个比较严重的问题，以学生对象为例："><a href="#10-对于第-9-项思考题中的关于使用静态属性或静态方法的解决方案绝对不能用在学生，顾客其他应用场景，那样会导致三个比较严重的问题，以学生对象为例：" class="headerlink" title="10.  对于第 9 项思考题中的关于使用静态属性或静态方法的解决方案绝对不能用在学生，顾客其他应用场景，那样会导致三个比较严重的问题，以学生对象为例："></a>10.  对于第 9 项思考题中的关于使用静态属性或静态方法的解决方案绝对不能用在学生，顾客其他应用场景，那样会导致三个比较严重的问题，以学生对象为例：</h5><ol><li>浪费了很多不必要的内存空间</li></ol><p>运行一开始就为大量的静态属性和大量的静态方法分配内存空间【但很可能某个静态方法一直没有使用，白白的一直占用着内存空间】</p><ol start="2"><li><p>无法展示一个学生一个对象的直观效果，完全失去了对象来描述实体的优势！</p></li><li><p>最严重的问题是：属性值一变则都变</p></li></ol><p>所有操作都在用一个静态方法空间来完成某种功能，一旦某个操作改变了静态方法中的某个值，比如改变了学生姓名，则其他操作访问到这个静态变量看到的结果全变了。</p><h5 id="2-19-【单件设计模式】单件设计模式实现方式2"><a href="#2-19-【单件设计模式】单件设计模式实现方式2" class="headerlink" title="2-19  【单件设计模式】单件设计模式实现方式2"></a>2-19  【<strong>单件设计模式</strong>】单件设计模式实现方式2</h5><h5 id="（1）饿汉式单件设计模式定义【实现步骤见第（3）步】"><a href="#（1）饿汉式单件设计模式定义【实现步骤见第（3）步】" class="headerlink" title="（1）饿汉式单件设计模式定义【实现步骤见第（3）步】"></a>（1）饿汉式单件设计模式定义【实现步骤见第（3）步】</h5><p>饿汉式单件设计模式是无论你是否用到了对象【实例】，一开始就建立这个唯一的对象。</p><p><strong>（2）懒汉式单件设计模式实现步骤</strong></p><p> 构建单件设计模式[懒汉式[等到需要使用对象时才创建对象,按需创建]单件设计模式 ]</p><p> 第一步：把构造器设置为私有的，不允许外部来创建类的实例【对象】</p><p> 第二步: 至少应该提供一个外部访问的方法或属性，外部可以通过这个方法或属性来得到一个对象</p><p> 所以应该把这个方法设置为静态方法</p><p> 第三步：外部调用第二步提供的静态方法来获取一个对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">MyLocalStorage</span> <span class="token punctuation">{</span>  <span class="token comment">// 静态属性和对象属性[实例属性】是类中两大成员</span>  <span class="token keyword">static</span> <span class="token literal-property property">localstorage</span><span class="token operator">:</span> MyLocalStorage<span class="token comment">//引用静态属性</span>  <span class="token keyword">private</span> <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"这是TS的单件设计模式的静态方法的构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// 提供一个外部访问的方法,</span>  <span class="token comment">// 通过这个方法用来提供外部得到一个对象的方法</span>  <span class="token comment">//   1. 带static关键字的方法就是一个静态方法</span>  <span class="token comment">//   2. 静态方法和对象无关，外部的对象变量不能调用静态方法和静态属性，</span>  <span class="token comment">//   3. 外部可以通过类名来调用</span>  <span class="token comment">//   静态方法不可以访问实例属性或实例方法【对象属性或对象方法】</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// let localstorage = new MyLocalStorage();</span>    <span class="token comment">// return localstorage</span>    <span class="token comment">// return new MyLocalStorage();</span>    <span class="token comment">// 使用局部变量来解决 失败了</span>    <span class="token comment">// let localstorage</span>    <span class="token comment">// if (!localstorage) {</span>    <span class="token comment">//   localstorage = new MyLocalStorage();</span>    <span class="token comment">// }</span>    <span class="token comment">// return localstorage</span>    <span class="token comment">//this.setItem</span>    <span class="token comment">// if(!false){ undefined null 0 false</span>    <span class="token comment">//}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>localstorage<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果静态对象属性指向创建对象</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我是一个undefined的静态属性，用来指向一个对象空间的静态属性"</span><span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>localstorage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyLocalStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>localstorage  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span>  <span class="token comment">// public static getInstanceNew(){</span>  <span class="token comment">//   this.</span>  <span class="token comment">// }</span>  <span class="token comment">// 保存key-value</span>  <span class="token keyword">public</span> <span class="token function">setItem</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">key</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">getItem</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">key</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> value <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">return</span> value <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <strong>（3）饿汉式单件设计模式实现步骤</strong></p><p>​构建单件设计模式[饿汉式单件设计模式 立即创建对象]</p><p>​     第一步：把构造器设置为私有的，不允许外部来创建类的实例【对象】</p><p>​ 第二步: 建立一个静态引用属性，同时把这个静态引用属性直接指向一个对象【 new MyLocalStorage()】</p><p>​ 第三步：外部调用第二步提供的静态方法来获取一个对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">MyLocalStorage</span> <span class="token punctuation">{</span>  <span class="token comment">// 对象属性【对象的基本类型属性和对象的引用属性】</span>  <span class="token comment">// 静态属性【静态的基本类型属性和静态的引用属性】</span>  <span class="token keyword">static</span> <span class="token literal-property property">localstorage</span><span class="token operator">:</span> MyLocalStorage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyLocalStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token literal-property property">count</span><span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">3</span> <span class="token comment">// 静态基本类型属性</span>  <span class="token keyword">private</span> <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"这是TS的单件设计模式的静态方法的构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">setItem</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">key</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">getItem</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">key</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> value <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">return</span> value <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 使用</span><span class="token keyword">let</span> my <span class="token operator">=</span> MyLocalStorage<span class="token punctuation">.</span>localstoragemy<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​         </p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数重载、方法重载、构造器重载</title>
      <link href="/2022/05/17/han-shu-chong-zai-fang-fa-chong-zai-gou-zao-qi-chong-zai/"/>
      <url>/2022/05/17/han-shu-chong-zai-fang-fa-chong-zai-gou-zao-qi-chong-zai/</url>
      
        <content type="html"><![CDATA[<h2 id="第二章-深度掌握-TypeScript-OOP-相关的一系列核心技能"><a href="#第二章-深度掌握-TypeScript-OOP-相关的一系列核心技能" class="headerlink" title="第二章 深度掌握 TypeScript OOP 相关的一系列核心技能"></a>第二章 深度掌握 TypeScript OOP 相关的一系列核心技能</h2><h2 id="函数重载、方法重载、构造器重载"><a href="#函数重载、方法重载、构造器重载" class="headerlink" title="函数重载、方法重载、构造器重载"></a>函数重载、方法重载、构造器重载</h2><h3 id="2-11-函数重载，方法重载的重要性丶优势"><a href="#2-11-函数重载，方法重载的重要性丶优势" class="headerlink" title="2-11  函数重载，方法重载的重要性丶优势"></a>2-11  函数重载，方法重载的重要性丶优势</h3><h4 id="1-函数重载，方法重载的重要性"><a href="#1-函数重载，方法重载的重要性" class="headerlink" title="1. 函数重载，方法重载的重要性"></a>1. 函数重载，方法重载的重要性</h4><p>著名前端流行框架底层都用到函数重载，例如：Vue3 底层源码就多处使用到带泛型的函数重载【对于泛型先知晓下即可，我们会在第4章我们会融合 Vue3 源码来深度讲解泛型函数重载，本章深度讲解的是非泛型的函数重载，掌握好了泛型函数重载，就具备了学习泛型函数重载的基础】。很多前端面试更是拿函数重载作为考核求职者 TS 技能是否扎实的标准之一，如果你不掌握函数重载，等于你的 TS 技能有缺失，技能不过关。</p><p><code>函数重载或方法重载适用于完成项目种某种相同功能但细节又不同的应用场景</code>【先了解即可，后面我们会结合真实应用场景讲解】 我们举一个生活中的例子让同学们先有个印象，比如：吃饭是一个函数，表示一个吃饭功能，但西方人用叉子，中国人用筷子，这就是细节不同，那如果我们可以用函数重载来解决。</p><p>不管现阶段你公司的项目中是否用到了函数重载和方法重载【如果没有用，多半是公司不少人用的并不熟练才不用的缘故】，如果学完后，你能适时给公司提建议，建议项目中合适的场景中使用函数重载并说明原因，你的建议应该很受欢迎！</p><p>函数重载或方法重载有以下几个优势：</p><p><strong>优势1： 结构分明</strong></p><p>让代码可读性，可维护性提升许多，而且代码更漂亮。</p><p><strong>优势2： 各司其职，自动提示方法和属性：</strong>每个重载签名函数完成各自功能，输出取值时不用强制转换就能出现自动提示，从而提高开发效率】</p><p><strong>优势3： 更利于功能扩展</strong></p><p>这三点优势大家先记住即可，学完方法重载后大家就会理解。</p><p>同时对于方法和函数分不清的同学，后面老师也会给出答案，同学们可以先把函数和方法等同起来。</p><h3 id="2-12-实现微信消息发送的函数-【真实应用场景-一站理解函数重载优势】"><a href="#2-12-实现微信消息发送的函数-【真实应用场景-一站理解函数重载优势】" class="headerlink" title="2-12  实现微信消息发送的函数 【真实应用场景, 一站理解函数重载优势】"></a>2-12  实现微信消息发送的函数 【真实应用场景, 一站理解函数重载优势】</h3><p><strong>真实应用需求：</strong>有一个获取微信消息发送接口消息查找函数，根据传入的参数从数组中查找数据，如果入参为数字， 就认为消息 id，然后从从后端数据源中找对应 id 的数据并返回，否则当成类型，返回这一类型的全部消息。</p><ol><li><p>不使用函数重载</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">MessageType</span> <span class="token operator">=</span> <span class="token string">'audio'</span> <span class="token operator">|</span> <span class="token string">'text'</span> <span class="token operator">|</span> <span class="token string">'video'</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token keyword">type</span> <span class="token class-name">Message</span> <span class="token operator">=</span> <span class="token punctuation">{</span>  id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>  type<span class="token operator">:</span> MessageType  content<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">let</span> messageArray<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>Message<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    type<span class="token operator">:</span> <span class="token string">'audio'</span><span class="token punctuation">,</span>    content<span class="token operator">:</span> <span class="token string">'xxx'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    type<span class="token operator">:</span> <span class="token string">'text'</span><span class="token punctuation">,</span>    content<span class="token operator">:</span> <span class="token string">'xxx'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    id<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>    type<span class="token operator">:</span> <span class="token string">'video'</span><span class="token punctuation">,</span>    content<span class="token operator">:</span> <span class="token string">'xxx'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    id<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>    type<span class="token operator">:</span> <span class="token string">'xixi'</span><span class="token punctuation">,</span>    content<span class="token operator">:</span> <span class="token string">'xxx'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    id<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>    type<span class="token operator">:</span> <span class="token string">'audio'</span><span class="token punctuation">,</span>    content<span class="token operator">:</span> <span class="token string">'xxx'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token keyword">function</span> <span class="token function">getMessage</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> MessageType<span class="token punctuation">)</span><span class="token operator">:</span> Message <span class="token operator">|</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>Message<span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">'number'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> messageArray<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> value <span class="token operator">===</span> item<span class="token punctuation">.</span>id<span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> messageArray<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> value <span class="token operator">===</span> item<span class="token punctuation">.</span>type<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// { id: 1, type: 'audio', content: 'xxx' }</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">'audio'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">/*  [    { id: 1, type: 'audio', content: 'xxx' },    { id: 5, type: 'audio', content: 'xxx' }  ]*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注：不使用函数重载是可以解决问题的，但同时存在一些可以优化的地方</p><p>例如函数结构不分明，可读性，可维护性变差</p><img src="https://gitee.com/zhangbing520/images/raw/master/img/202205171759105.png" alt="image-20220517175952068" style="zoom:50%;"><p>从上图可知，我们想要点出 msg 中的属性，但是是点不出来的，因为 msg 是一种联合类型，只能拿到其中的交叉部分的属性，所以点不出来，这是不使用函数重载的一大问题。</p><p>msg的属性点不出来的问题实际上也可以通过类型转换来解决</p><img src="https://gitee.com/zhangbing520/images/raw/master/img/202205171804193.png" alt="image-20220517180426159" style="zoom:50%;"><p>当然，也可以通过<code>类型断言</code>的方法来解决：</p><img src="https://gitee.com/zhangbing520/images/raw/master/img/202205171900096.png" alt="image-20220517190030057" style="zoom:50%;"></blockquote></li><li><p>使用函数重载</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">getMessage1</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> Message <span class="token comment">// 重载签名 可以有多个</span><span class="token keyword">function</span> <span class="token function">getMessage1</span><span class="token punctuation">(</span>megType<span class="token operator">:</span> MessageType<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>Message<span class="token operator">&gt;</span> <span class="token comment">// 重载签名</span><span class="token keyword">function</span> <span class="token function">getMessage1</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> Message <span class="token operator">|</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>Message<span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token punctuation">{</span> <span class="token comment">// 实现签名</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">'number'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> messageArray<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> value <span class="token operator">===</span> item<span class="token punctuation">.</span>id<span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> messageArray<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> value <span class="token operator">===</span> item<span class="token punctuation">.</span>type<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> msg1 <span class="token operator">=</span> <span class="token function">getMessage1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getMessage1</span><span class="token punctuation">(</span><span class="token string">'audio'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getMessage1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://gitee.com/zhangbing520/images/raw/master/img/202205171931314.png" alt="image-20220517193147269" style="zoom:50%;"><ul><li>使用函数重载后可以获得msg1的类型</li></ul></li></ol><h3 id="2-13-【-TS-函数重载】——-全面彻底掌握函数重载的-5大定义规则-诸多细则"><a href="#2-13-【-TS-函数重载】——-全面彻底掌握函数重载的-5大定义规则-诸多细则" class="headerlink" title="2-13 【 TS 函数重载】—— 全面彻底掌握函数重载的 5大定义规则+诸多细则"></a>2-13 【 TS 函数重载】—— 全面彻底掌握函数重载的 5大定义规则+诸多细则</h3><h4 id="1-TS-函数重载-function-signature-overload-定义"><a href="#1-TS-函数重载-function-signature-overload-定义" class="headerlink" title="1. TS 函数重载  (function signature overload )  定义"></a>1. TS 函数重载  (function signature overload )  定义</h4><p>TS 的函数重载比较特殊，和很多其他后端语言的方法重载相比，多了不少规则。学习函数重载，先要了解什么是函数签名，定义如下：</p><p><strong>函数签名</strong> [ function signature ]：函数签名=函数名称+函数参数+函数参数类型+返回值类型四者合成。在 TS 函数重载中，包含了实现签名和重载签名，实现签名是一种函数签名，重载签名也是一种函数签名。</p><p>关于函数重载的定义，我们先来看一个很多其他资料提供的不完整且模糊的TS函数重载定义：</p><p><strong>不完整模糊的 TS 函数重载定义</strong>：一组具有相同名字，不同参数列表的和返回值无关的函数 。</p><p><strong>完整的函数重载定义</strong>：包含了以下规则的一组函数就是TS函数重载 【规则内容多，大家要多记，多实践方可】</p><p><strong>规则1：</strong>由一个实现签名+ 一个或多个重载签名合成。</p><p><strong>规则2：</strong> 但外部调用函数重载定义的函数时，只能调用重载签名，不能调用实现签名，这看似矛盾的规则，其实 是TS 的规定：实现签名下的函数体是给重载签名编写的，实现签名只是在定义时起到了统领所有重载签名的作用，在执行调用时就看不到实现签名了。</p><p><strong>规则3：</strong>调用重载函数时，会根据传递的参数来判断你调用的是哪一个函数 </p><p><strong>规则4:</strong>  只有一个函数体，只有实现签名配备了函数体，所有的重载签名都只有签名，没有配备函数体。</p><p><strong>规则5:  关于参数类型规则完整总结如下：</strong></p><p>实现签名参数个数可以少于重载签名的参数个数，但实现签名如果准备包含重载签名的某个位置的参数 ，那实现签名就必须兼容所有重载签名该位置的参数类型【联合类型或 any 或 unknown 类型的一种】。</p><p><strong>规则6： 关于重载签名和实现签名的返回值类型规则完整总结如下：</strong></p><p>必须给重载签名提供返回值类型，TS 无法默认推导。</p><p>提供给重载签名的返回值类型不一定为其执行时的真实返回值类型，可以为重载签名提供真实返回值类型，也可以提供  void 或 unknown 或 any 类型，如果重载签名的返回值类型是 void 或 unknown 或 any 类型，那么将由实现签名来决定重载签名执行时的真实返回值类型。 当然为了调用时能有自动提示+可读性更好+避免可能出现了类型强制转换，强烈建议为重载签名提供真实返回值类型。</p><p>不管重载签名返回值类型是何种类型【包括后面讲的泛型类型】，实现签名都可以返回 any 类型 或 unknown类型，当然一般我们两者都不选择，让 TS 默认为实现签名自动推导返回值类型。</p><blockquote><p>修改上述需求，当传递的参数是消息的类型时，通过传递第二个参数 readRecordCount 来返回指定数量的消息。此时可以修改为：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token operator">&gt;</span><span class="token keyword">type</span> <span class="token class-name">MessageType</span> <span class="token operator">=</span> <span class="token string">'audio'</span> <span class="token operator">|</span> <span class="token string">'text'</span> <span class="token operator">|</span> <span class="token string">'video'</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token keyword">type</span> <span class="token class-name">Message</span> <span class="token operator">=</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> type<span class="token operator">:</span> MessageType content<span class="token operator">:</span> <span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token keyword">let</span> messageArray<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>Message<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token punctuation">{</span>   id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>   type<span class="token operator">:</span> <span class="token string">'audio'</span><span class="token punctuation">,</span>   content<span class="token operator">:</span> <span class="token string">'xxx'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>   id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>   type<span class="token operator">:</span> <span class="token string">'text'</span><span class="token punctuation">,</span>   content<span class="token operator">:</span> <span class="token string">'xxx'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>   id<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>   type<span class="token operator">:</span> <span class="token string">'video'</span><span class="token punctuation">,</span>   content<span class="token operator">:</span> <span class="token string">'xxx'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>   id<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>   type<span class="token operator">:</span> <span class="token string">'xixi'</span><span class="token punctuation">,</span>   content<span class="token operator">:</span> <span class="token string">'xxx'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>   id<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>   type<span class="token operator">:</span> <span class="token string">'audio'</span><span class="token punctuation">,</span>   content<span class="token operator">:</span> <span class="token string">'xxx'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token keyword">function</span> <span class="token function">getMessage1</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> Message <span class="token comment">// 重载签名 可以有多个</span><span class="token operator">&gt;</span><span class="token keyword">function</span> <span class="token function">getMessage1</span><span class="token punctuation">(</span>megType<span class="token operator">:</span> MessageType<span class="token punctuation">,</span> readRecordCount<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>Message<span class="token operator">&gt;</span> <span class="token comment">// 重载签名</span><span class="token operator">&gt;</span><span class="token keyword">function</span> <span class="token function">getMessage1</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> readRecordCount<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">:</span> Message <span class="token operator">|</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>Message<span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token punctuation">{</span> <span class="token comment">// 实现签名</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">'number'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> messageArray<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> value <span class="token operator">===</span> item<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> messageArray<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> value <span class="token operator">===</span> item<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> readRecordCount<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token keyword">let</span> msg1 <span class="token operator">=</span> <span class="token function">getMessage1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getMessage1</span><span class="token punctuation">(</span><span class="token string">'audio'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [ { id: 1, type: 'audio', content: 'xxx' } ]</span><span class="token operator">&gt;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getMessage1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// { id: 1, type: 'audio', content: 'xxx' }</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注：由于第一个重载函数是不需要第二个参数的，所以在实现签名的第二个参数指定了参数的默认值，这样当调用时第一个重载签名时没有传递参数也不会报错。</p></blockquote><ul><li><p>any 和 unknown 的区别</p><img src="https://gitee.com/zhangbing520/images/raw/master/img/202205171950778.png" alt="image-20220517195007743" style="zoom:50%;"><p>上面报错了，是因为 unknown 只能作为任何类型的父类，不能作为子类。将上面的 unknown 换成 any，就不会报错：</p><p>​<img src="https://gitee.com/zhangbing520/images/raw/master/img/202205171952816.png" alt="image-20220517195233773" style="zoom:100%;"></p></li></ul><h3 id="2-14-【-TS-方法重载】方法重载在-Java-简易版-ArrayList-中的经典应用实现【-ArrayList-可弥补-Set-取值不方便短板，比-Set-删除功能更方便】"><a href="#2-14-【-TS-方法重载】方法重载在-Java-简易版-ArrayList-中的经典应用实现【-ArrayList-可弥补-Set-取值不方便短板，比-Set-删除功能更方便】" class="headerlink" title="2-14 【 TS 方法重载】方法重载在  Java 简易版 ArrayList 中的经典应用实现【 ArrayList 可弥补 Set 取值不方便短板，比 Set 删除功能更方便】"></a>2-14 【 TS 方法重载】方法重载在  Java 简易版 ArrayList 中的经典应用实现【 ArrayList 可弥补 Set 取值不方便短板，比 Set 删除功能更方便】</h3><h4 id="1-方法和函数区别，理解方法签名"><a href="#1-方法和函数区别，理解方法签名" class="headerlink" title="1.  方法和函数区别，理解方法签名"></a>1.  方法和函数区别，理解方法签名</h4><p><strong>方法：</strong>方法是一种特定场景下的函数，由对象变量【实例变量】直接调用的函数都是方法。</p><p>比如：</p><ol><li><p>函数内部用 this 定义的函数是方法； </p></li><li><p>TS  类中定义的函数是方法【 TS  类中定义的方法就是编译后  JS 底层 prototype 的一个函数】； </p></li><li><p>接口内部定义的函数是方法【注意：不是接口函数】；</p></li><li><p>type  内部定义的函数是方法【注意：不是 type 函数】。</p></li></ol><p><strong>方法签名：</strong>和函数签名一样，方法签名 = 方法名称 + 方法参数 + 方法参数类型 + 返回值类型四者合成。</p><h4 id="2-Java-简易版-ArrayList-类-和其中的方法重载代码实现"><a href="#2-Java-简易版-ArrayList-类-和其中的方法重载代码实现" class="headerlink" title="2.  Java 简易版 ArrayList 类 和其中的方法重载代码实现"></a>2.  Java 简易版 ArrayList 类 和其中的方法重载代码实现</h4><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 对现有的数组进行封装</span><span class="token comment">// 1. 提供get方法 remove方法 显示方法【add】</span><span class="token keyword">class</span> <span class="token class-name">ArrayList</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> element<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>object<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span>  <span class="token function">get</span><span class="token punctuation">(</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">[</span>index<span class="token punctuation">]</span>  <span class="token punctuation">}</span>  <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>ele <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment">// 根据数字去删，remove返回的是一个数字</span>  <span class="token comment">// 根据对象去删，remove方法返回的是一个对象</span>  <span class="token function">remove</span><span class="token punctuation">(</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span>  <span class="token function">remove</span><span class="token punctuation">(</span>obj<span class="token operator">:</span> object<span class="token punctuation">)</span><span class="token operator">:</span> object  <span class="token function">remove</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> object<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> object <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>element <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">'number'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> value <span class="token operator">!==</span> index      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> value <span class="token operator">!==</span> ele      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> value  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> stuOne <span class="token operator">=</span> <span class="token punctuation">{</span> stuname<span class="token operator">:</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">13</span> <span class="token punctuation">}</span><span class="token keyword">let</span> stuTwo <span class="token operator">=</span> <span class="token punctuation">{</span> stuname<span class="token operator">:</span> <span class="token string">'lisi'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">14</span> <span class="token punctuation">}</span><span class="token keyword">let</span> stuThree <span class="token operator">=</span> <span class="token punctuation">{</span> stuname<span class="token operator">:</span> <span class="token string">'wangwu'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">15</span> <span class="token punctuation">}</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">[</span>stuOne<span class="token punctuation">,</span> stuTwo<span class="token punctuation">,</span> stuThree<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>stuOne<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { stuname: 'zhangsan', age: 13 }</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'----------------------'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">/*  { stuname: 'lisi', age: 14 }  { stuname: 'wangwu', age: 15 }*/</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'----------------------'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// { stuname: 'wangwu', age: 15 }</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-15-深入构造器重载-真实应用场景"><a href="#2-15-深入构造器重载-真实应用场景" class="headerlink" title="2-15  深入构造器重载+真实应用场景"></a>2-15  深入构造器重载+真实应用场景</h3><h4 id="1-构造器-【构造函数】重载"><a href="#1-构造器-【构造函数】重载" class="headerlink" title="1. 构造器 【构造函数】重载"></a>1. 构造器 【构造函数】重载</h4><h5 id="（1）再次强化理解-this"><a href="#（1）再次强化理解-this" class="headerlink" title="（1）再次强化理解 this"></a>（1）<strong>再次强化理解 this</strong></h5><p>this 其实是一个对象变量，当 new 出来一个对象时，构造器会隐式返回 this  给 new 对象等号左边的对象变量，this 和等号左边的对象变量都指向当前正创建的对象。</p><p>以后，哪一个对象调用 TS 类的方法，那么这个方法中的 this 都指向当前正使用的对象【 this 和当前的对象变量中都保存着当前对象的首地址】</p><h5 id="（2）TS构造器有返回值吗？"><a href="#（2）TS构造器有返回值吗？" class="headerlink" title="（2）TS构造器有返回值吗？"></a>（2）<strong>TS构造器有返回值吗？</strong></h5><p>尽管TS类构造器会隐式返回 this，如果我们非要返回一个值，TS 类构造器只允许返回 this，但构造器不需要返回值也能通过编译，更没有返回值类型之说，从这个意义上，TS 构造器可以<strong>说成是没有返回值这一说</strong>的构造函数。【<strong>注意：TS 构造器和 JS 构造函数关于返回值的说法不完全相同</strong>】</p><h5 id="（3）-构造器-【构造函数】重载的意义"><a href="#（3）-构造器-【构造函数】重载的意义" class="headerlink" title="（3） 构造器 【构造函数】重载的意义"></a>（3） 构造器 【构造函数】重载的意义</h5><h5 id="构造器重载和函数重载使基本相同，主要区别是：TS-类构造器重载签名和实现签名都不需要管理返回值，TS-构造器是在对象创建出来之后，但是还没有赋值给对象变量之前被执行，一般用来给对象属性赋值。"><a href="#构造器重载和函数重载使基本相同，主要区别是：TS-类构造器重载签名和实现签名都不需要管理返回值，TS-构造器是在对象创建出来之后，但是还没有赋值给对象变量之前被执行，一般用来给对象属性赋值。" class="headerlink" title="构造器重载和函数重载使基本相同，主要区别是：TS 类构造器重载签名和实现签名都不需要管理返回值，TS 构造器是在对象创建出来之后，但是还没有赋值给对象变量之前被执行，一般用来给对象属性赋值。"></a>构造器重载和函数重载使基本相同，主要区别是：TS 类构造器重载签名和实现签名都不需要管理返回值，TS 构造器是在对象创建出来之后，但是还没有赋值给对象变量之前被执行，一般用来给对象属性赋值。</h5><p>我们知道在 TS 类中只能定义一个构造器，但实际应用时，TS 类在创建对象时经常需要用到有多个构造器的场景，比如：我们计算一个正方形面积，创建正方形对象，可以给构造器传递宽和高，也可以给构造器传递一个包含了宽和高的形状参数对象，这样需要用构造器重载来解决。而面试中也多次出现过关于TS构造器重载的考察，主要考察求职者对重载+构造器的综合运用能力。</p><h4 id="2-构造器是方法吗"><a href="#2-构造器是方法吗" class="headerlink" title="2. 构造器是方法吗?"></a>2. 构造器是方法吗?</h4><p>我们说对象调用的才是方法，但是 TS 构造器是在对象空间地址赋值给对象变量之前被调用，而不是用来被对象变量调用的，所以构造器( constructor )可以说成构造函数，但不能被看成是一个方法。</p><h4 id="3-构造器实现编码【真实应用场景】"><a href="#3-构造器实现编码【真实应用场景】" class="headerlink" title="3. 构造器实现编码【真实应用场景】"></a>3. 构造器实现编码【真实应用场景】</h4><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">type_chartParam</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token comment">// 各种图形的求面积参数</span>  width<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>  height<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>  raduis<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> width<span class="token operator">!</span><span class="token operator">:</span> <span class="token builtin">number</span>  <span class="token keyword">public</span> height<span class="token operator">!</span><span class="token operator">:</span> <span class="token builtin">number</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>width<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> height<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span>  <span class="token comment">// 重载签名</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>chartParamObj<span class="token operator">:</span> type_chartParam<span class="token punctuation">)</span> <span class="token comment">// 重载签名</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> height_<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 实现签名</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">'number'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> value      <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height_    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> value<span class="token punctuation">.</span>width      <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> value<span class="token punctuation">.</span>height    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>width  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> square <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Square</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>square<span class="token punctuation">.</span><span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 2000</span><span class="token keyword">let</span> chartParam<span class="token operator">:</span> type_chartParam <span class="token operator">=</span> <span class="token punctuation">{</span> width<span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span> height<span class="token operator">:</span> <span class="token number">90</span> <span class="token punctuation">}</span><span class="token keyword">let</span> square1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Square</span><span class="token punctuation">(</span>chartParam<span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>square1<span class="token punctuation">.</span><span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 4500</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>上述构造器重载可以根据传入的参数来进行属性的赋值，在实现签名时不需要管返回值</li></ul><p>​         </p>]]></content>
      
      
      <categories>
          
          <category> 重载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TS OOP 深入 + 系列相关复杂技能</title>
      <link href="/2022/05/17/ts-oop-shen-ru-xi-lie-xiang-guan-fu-za-ji-neng/"/>
      <url>/2022/05/17/ts-oop-shen-ru-xi-lie-xiang-guan-fu-za-ji-neng/</url>
      
        <content type="html"><![CDATA[<h2 id="课程大纲"><a href="#课程大纲" class="headerlink" title="课程大纲"></a>课程大纲</h2><ol><li>原型、类，引用类型</li><li>单件设计模式 + 各种扩展</li><li>各种重载 + 实战</li><li>继承 + 手写优化TS继承源码</li><li>类型守卫 + 自定义守卫 + 多态 + 实战</li><li>各种泛型技能 + 实战</li><li>装饰器 </li><li>手写 Promise 源码</li><li>手写 Vuex 源码</li></ol><img src="https://gitee.com/zhangbing520/images/raw/master/img/202205170944910.png" alt="image-20220517094422876" style="zoom:50%;"><h2 id="第二章：深度掌握原型"><a href="#第二章：深度掌握原型" class="headerlink" title="第二章：深度掌握原型"></a>第二章：深度掌握原型</h2><h3 id="1-为什么要用原型【好处】"><a href="#1-为什么要用原型【好处】" class="headerlink" title="1.为什么要用原型【好处】"></a>1.为什么要用原型【好处】</h3><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">/* * @Description:  * @Autor: zhangbing * @Date: 2022-05-17 09:58:16 * @LastEditors: zhangbing * @LastEditTime: 2022-05-17 10:01:28 */</span><span class="token keyword">function</span> <span class="token function">QQUsers</span><span class="token punctuation">(</span>QQNo_<span class="token punctuation">,</span> QQAge_<span class="token punctuation">,</span> QQMark_<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>QQNo <span class="token operator">=</span> QQNo_<span class="token keyword">this</span><span class="token punctuation">.</span>QQAge <span class="token operator">=</span> QQAge_<span class="token keyword">this</span><span class="token punctuation">.</span>QQMark <span class="token operator">=</span> QQMark_<span class="token keyword">this</span><span class="token punctuation">.</span>commonfriends <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token string">'李四'</span><span class="token punctuation">]</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">show</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">QQ号：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>QQNo<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, QQ龄:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>QQAge<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, QQ标注：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>QQMark<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">共同的好友是:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>commonfriends<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> QQZhangsan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QQUsers</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token string">'王阳明传人'</span><span class="token punctuation">)</span><span class="token keyword">let</span> QQLisi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QQUsers</span><span class="token punctuation">(</span><span class="token string">'李四'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">'袁隆平的徒弟'</span><span class="token punctuation">)</span>QQZhangsan<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>QQLisi<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://gitee.com/zhangbing520/images/raw/master/img/202205171002503.png" alt="image-20220517100245476" style="zoom:100%;"><ul><li>数组 commonfriends 是引用类型，但是在两个空间中都存在的数据，因此是浪费内存空间的。</li><li>方法 show 也存在于两个对象变量的对象空间中，因此也存在不必要的内存空间占用。</li></ul><img src="https://gitee.com/zhangbing520/images/raw/master/img/202205171008671.png" alt="image-20220517100812638" style="zoom:65%;"><blockquote><p>总结： 原型上所有的方法和属性都可以被构造函数的实例共享</p></blockquote><h3 id="2-没有用原型会有什么问题"><a href="#2-没有用原型会有什么问题" class="headerlink" title="2.没有用原型会有什么问题"></a>2.没有用原型会有什么问题</h3><blockquote><p>总结：所有的 QQUser 对象都有相同的好友属性，好友属性用 commonfriends 表示，所有 QQuser 对象都有相同的 show 方法。但我们发现每一个 QQUSer 对象<code>单独</code>分配一个 commonfriends 属性空间和 show 方法空间，导致大量的空间浪费</p><p>答案：使用原型解决所有实例上的方法 所有实例上的共同属性都可以放到原型上去定义</p></blockquote><h3 id="3-认识函数-原型定义"><a href="#3-认识函数-原型定义" class="headerlink" title="3.认识函数 + 原型定义"></a>3.认识函数 + 原型定义</h3><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">/* * @Description:  * @Autor: zhangbing * @Date: 2022-05-17 09:58:16 * @LastEditors: zhangbing * @LastEditTime: 2022-05-17 10:47:38 */</span><span class="token keyword">function</span> <span class="token function">QQUsers</span><span class="token punctuation">(</span>QQNo_<span class="token punctuation">,</span> QQAge_<span class="token punctuation">,</span> QQMark_<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>QQNo <span class="token operator">=</span> QQNo_<span class="token keyword">this</span><span class="token punctuation">.</span>QQAge <span class="token operator">=</span> QQAge_<span class="token keyword">this</span><span class="token punctuation">.</span>QQMark <span class="token operator">=</span> QQMark_<span class="token punctuation">}</span>QQUsers<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>commonfriends <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token string">'李四'</span><span class="token punctuation">]</span>QQUsers<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">show</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">QQ号：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>QQNo<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, QQ龄:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>QQAge<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, QQ标注：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>QQMark<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">共同的好友是:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>commonfriends<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">let</span> QQZhangsan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QQUsers</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token string">'王阳明传人'</span><span class="token punctuation">)</span><span class="token keyword">let</span> QQLisi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QQUsers</span><span class="token punctuation">(</span><span class="token string">'李四'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">'袁隆平的徒弟'</span><span class="token punctuation">)</span>QQZhangsan<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>QQLisi<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhangbing520/images/raw/master/img/202205171049431.png" alt="image-20220517104930395"></p><ol><li><p>函数也是一个对象，当真正开始执行函数，执行环境【开发时为浏览器或控制台】会为函数分配一个函数对象变量空间和函数对象空间，函数对象变量用函数名表示，存在栈空间中， 函数对象空间是在堆中开辟的一个内存空间，这个空间中有一个默认的 prototype 属性，这个 prototype 属性就是一个原型对象属性【也叫对象变量】  </p></li><li><p>函数和构造函数的区别</p></li></ol><p>​     当通过 new 函数()时，此刻这个函数就是构造函数【 日后会演变成TS 类的构造器】 </p><ol start="3"><li><code>定义</code>：原型【 prototype ] 是定义函数时由 JS 自动分配给函数的一个可以被所有构造函数实例对象变量共享的对象变量【也叫对象属性】</li></ol><h3 id="4-如何访问原型对象空间上的属性和方法"><a href="#4-如何访问原型对象空间上的属性和方法" class="headerlink" title="4. 如何访问原型对象空间上的属性和方法"></a>4. 如何访问原型对象空间上的属性和方法</h3><ol><li><p>构造函数所有实例对象都可以访问型对象空间上的属性和方法 【每一个实例都有默认的<code>__proto__</code>属性，这个<code>__proto__</code>属性指向原型对象空间】</p></li><li><p>关于<code>__proto__</code>：new 在创建新对象的时候，会赋予新对象一个属性指向构造函数的 <code>prototype</code> 对象空间，这个属性就是  <code>__proto__</code></p></li><li><p>可以直接通过构造函数.prototype 对象属性来访问原型对象空间上的属性和方法</p></li></ol><h3 id="5-1-构造函数实例【也叫对象】如何访问原型对象空间上的属性和方法"><a href="#5-1-构造函数实例【也叫对象】如何访问原型对象空间上的属性和方法" class="headerlink" title="5.1 构造函数实例【也叫对象】如何访问原型对象空间上的属性和方法"></a>5.1 构造函数实例【也叫对象】如何访问原型对象空间上的属性和方法</h3><ol><li><p>构造函数实例访问一个属性和方法，首先从实例空间中查找【当执行环境执行 new 构造函数()时，构造函数中通过 this 定义的属性和方法会分配在这个空间中】，如果找到该属性和方法，就停止查找，表示找到了；如果没有找到，就继续在该实例的原型对象空间中去查找该属性和方法 【实例中默认的  <code>__proto__</code> 对象 属性指向原型对象空间】</p></li><li><p>实例正是借助自身的__ proto __对象属性 来查找原型对象空间中的属性和方法，有点像儿子去和爸爸要他没有的东西一样。】</p></li></ol><h3 id="5-2-增加或修改原型对象的属性或方法后，-所有的实例或叫对象立即可以访问的到-【但创建实例后再覆盖原型除外】"><a href="#5-2-增加或修改原型对象的属性或方法后，-所有的实例或叫对象立即可以访问的到-【但创建实例后再覆盖原型除外】" class="headerlink" title="5.2  增加或修改原型对象的属性或方法后， 所有的实例或叫对象立即可以访问的到 【但创建实例后再覆盖原型除外】"></a>5.2  增加或修改原型对象的属性或方法后， 所有的实例或叫对象立即可以访问的到 【但创建实例后再覆盖原型除外】</h3><p>​</p><h3 id="5-3-高频面试题：创建实例后再覆盖原型，实例对象无法访问到-为什么？"><a href="#5-3-高频面试题：创建实例后再覆盖原型，实例对象无法访问到-为什么？" class="headerlink" title="5.3  高频面试题：创建实例后再覆盖原型，实例对象无法访问到,为什么？"></a>5.3  高频面试题：创建实例后再覆盖原型，实例对象无法访问到,为什么？</h3><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">/* * @Description:  * @Autor: zhangbing * @Date: 2022-05-17 09:58:16 * @LastEditors: zhangbing * @LastEditTime: 2022-05-17 11:27:39 */</span><span class="token keyword">function</span> <span class="token function">QQUsers</span><span class="token punctuation">(</span>QQNo_<span class="token punctuation">,</span> QQAge_<span class="token punctuation">,</span> QQMark_<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>QQNo <span class="token operator">=</span> QQNo_<span class="token keyword">this</span><span class="token punctuation">.</span>QQAge <span class="token operator">=</span> QQAge_<span class="token keyword">this</span><span class="token punctuation">.</span>QQMark <span class="token operator">=</span> QQMark_<span class="token punctuation">}</span>QQUsers<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>commonfriends <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token string">'李四'</span><span class="token punctuation">]</span>QQUsers<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">show</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">QQ号：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>QQNo<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, QQ龄:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>QQAge<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, QQ标注：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>QQMark<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">共同的好友是:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>commonfriends<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">let</span> QQZhangsan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QQUsers</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token string">'王阳明传人'</span><span class="token punctuation">)</span>QQUsers<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>commonfriends<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>QQZhangsan<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>QQZhangsan<span class="token punctuation">.</span>commonfriends<span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>QQZhangsan<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>commonfriends<span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>QQUsers<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>commonfriends<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhangbing520/images/raw/master/img/202205171128862.png" alt="image-20220517112853834"></p><p>思考题：<code>QQZhangSan.__proto__.show()</code> 和<code>QQZhangSan.show()</code>  输出的结果完全一样吗？ 为什么呢？</p><p>由以上的输出结果可知结果时一样的，因为属性查找就是由实例的<code>__proto__</code>决定的。QQZhangSan 本身没有 show 方法，就会看<code>QQZhangSan.__proto</code>__上有没有。所以最后的结果时一样的。</p><h3 id="6-Object-prototype"><a href="#6-Object-prototype" class="headerlink" title="6.Object.prototype"></a>6.Object.prototype</h3><p>​</p><h3 id="7-原型链-常见的五种原型继承"><a href="#7-原型链-常见的五种原型继承" class="headerlink" title="7.原型链+常见的五种原型继承"></a>7.原型链+常见的五种原型继承</h3><p>​</p><h3 id="8-call-x2F-apply-x2F-bind方法"><a href="#8-call-x2F-apply-x2F-bind方法" class="headerlink" title="8.call/apply/bind方法"></a>8.call/apply/bind方法</h3><p>​</p><h3 id="9-new-构造函数底层到底发生了什么-【深入new底层到底发生了什么】"><a href="#9-new-构造函数底层到底发生了什么-【深入new底层到底发生了什么】" class="headerlink" title="9.new 构造函数底层到底发生了什么 【深入new底层到底发生了什么】"></a>9.new 构造函数底层到底发生了什么 【深入new底层到底发生了什么】</h3><h2 id="第二章-第六节"><a href="#第二章-第六节" class="headerlink" title="第二章 第六节"></a>第二章 第六节</h2><ul><li>用全站的眼光带你更深入理解 TypeScript 类</li></ul><h3 id="1-学习-TypeScript-类的深远意义"><a href="#1-学习-TypeScript-类的深远意义" class="headerlink" title="1. 学习 TypeScript 类的深远意义"></a>1. 学习 TypeScript 类的深远意义</h3><p>相对以前 JavaScript 不得不用 构造函数来充当”类“，TypeScript 类的出现可以说是一次技术革命。让开发出来的项目尤其是大中项目的可读性好，可扩展性好了不是一点半点。</p><p>TypeScrip 类的出现完全改变了前端领域项目代码编写模式，配合 TypeScript 静态语言，编译期间就能检查语法错误的优势【项目上线后隐藏语法错误的风险几乎为零，相比不用 TypeScript 开发项目，使用 TypeScript 后对前端项目尤其是大中项目的开发 或底层第三方插件，组件库的开发带来的优势已经超乎了想象】。</p><p>TypeScript 类让前端开发人员开发和组织项目或阅读各大前端框架源码的思维问题的方式变得更先进，更全面了许多。因为类是 OOP【面型对象编程】的技术基石，OOP 思想来自于生活，更利于开发人员思考技术问题。TypeScript 类已经成了每次前端面试的高频面试考点。</p><p>在前端各大流行框架开发的项目中，比如 Vue3 项目，Angular项目， 基于 Antd UI 库的项目 还是后端 Nodejs 框架，比如：Nestjs，亦或是 Vue3 底层源码，都可以频频见到类的身影。</p><p>尽管 TypeScript 类照搬了 Java 后端语言的思想，但 TypeScript 类的底层依然是基于 JavaScript 的，这一点对于前端工程师更深入理解 TypeScript 打开了一条理解之道，提升他们更深厚的 JavaScript 功底从而为面试加分和项目的运用都提供了间接的帮助。</p><h3 id="2-TypeScript-哪些技能基于类？"><a href="#2-TypeScript-哪些技能基于类？" class="headerlink" title="2. TypeScript 哪些技能基于类？"></a>2. TypeScript 哪些技能基于类？</h3><p>TypeScript 类是 OOP 的技术基石，包括类、属性封装丶继承、多态、抽象丶泛型。紧密关联的技术包括方法重写，方法重载，构造器，构造器重载，类型守卫，自定义守卫，静态方法、属性，关联引用属性，多种设计模式等。</p><h3 id="3-什么是类"><a href="#3-什么是类" class="headerlink" title="3. 什么是类"></a>3. 什么是类</h3><p>定义：类就是拥有相同属性和方法的一系列对象的集合，类是一个模具，是从这该类包含的所有具体对象中抽象出来的一个概念，类定义了它所包含的全体对象的静态特征和动态特征。</p><p>类有静态特征和动态特征【以大家最熟悉的人类为例】<br>静态特征【软件界叫属性】姓名，年龄,地址,身份证号码,联系方式,家庭地址,微信号<br>动态特征【软件界叫方法】吃饭，走路</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">/* * @Description:  * @Autor: zhangbing * @Date: 2022-05-17 12:49:18 * @LastEditors: zhangbing * @LastEditTime: 2022-05-17 12:58:10 */</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> name<span class="token operator">!</span><span class="token operator">:</span> <span class="token builtin">string</span>  <span class="token keyword">public</span> age<span class="token operator">!</span><span class="token operator">:</span> <span class="token builtin">number</span>  <span class="token keyword">public</span> phone<span class="token operator">!</span><span class="token operator">:</span> <span class="token builtin">string</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> phone<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token keyword">this</span><span class="token punctuation">.</span>phone <span class="token operator">=</span> phone  <span class="token punctuation">}</span>  <span class="token comment">// 方法默认的返回值为 void</span>  <span class="token keyword">public</span> <span class="token function">doEat</span><span class="token punctuation">(</span>who<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">和</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>who<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">一起吃饭</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> personInstance  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'张安'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'13156789'</span><span class="token punctuation">)</span>personInstance<span class="token punctuation">.</span><span class="token function">doEat</span><span class="token punctuation">(</span><span class="token string">'李四'</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>上面的代码编译后：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">"use strict"</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span>__esModule <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">/* * @Description: * @Autor: zhangbing * @Date: 2022-05-17 12:49:18 * @LastEditors: zhangbing * @LastEditTime: 2022-05-17 12:58:10 */</span><span class="token keyword">var</span> Person <span class="token operator">=</span> <span class="token comment">/** @class */</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> phone</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>phone <span class="token operator">=</span> phone<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 方法默认的返回值为 void</span>    <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">doEat</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">who</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">"\u548C"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>who<span class="token punctuation">,</span> <span class="token string">"\u4E00\u8D77\u5403\u996D"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Person<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 立即执行函数，避免了变量名污染</span><span class="token keyword">var</span> personInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'张安'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'13156789'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>personInstance<span class="token punctuation">.</span><span class="token function">doEat</span><span class="token punctuation">(</span><span class="token string">'李四'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>【再看桌子类】</p><p>静态特征【属性】高度，宽度，颜色，价格，品牌，材质</p><p>动态特征【方法】承载</p><p>【来看订单类】 </p><p>静态特征 【属性】 订单号【订单id】，下单时间，下单顾客，订单详情，顾客微信，收件地址，负责客服</p><p>动态特征  【方法】 下单，修改订单，增加订单，删除订单，查询订单，退单 【这一些方法真正开发会归为OrderService 类】 但从广义来说都同属于订单系列类的方法。</p><h3 id="4-理解子类"><a href="#4-理解子类" class="headerlink" title="4. 理解子类"></a>4. 理解子类</h3><p>（1）什么是子类？   </p><p>有两个类，比如 A 类和 B 类，如果满足 A 类  is a kind of  B类，那么 A 类就是 B 类的子类<br>比如：A 类是顾客类，B 类是人类，因为顾客类 a kind of 人类成立【顾客类是人类的一种】，所以顾客类是人类的子类。</p><p>（2） 子类如何继承父类的属性和方法？</p><p>以顾客类为例子：顾客类继承了父类【人类】的非私有的属性和方法，也具备子类独有的属性和方法 。</p><p>顾客类继承父类【人类】的全部非私有的属性和方法外，还有哪些独有的属性和方法呢？<br>顾客类独有属性：顾客等级，顾客编号<br> 顾客类独有方法：购买</p><h3 id="5-什么是对象【对象也叫实例-instance-，对象变量也叫实例变量】"><a href="#5-什么是对象【对象也叫实例-instance-，对象变量也叫实例变量】" class="headerlink" title="5. 什么是对象【对象也叫实例(instance)，对象变量也叫实例变量】"></a>5. 什么是对象【对象也叫实例(instance)，对象变量也叫实例变量】</h3><p> (1)  什么是对象【实例】？</p><p> 就是一个拥有具体属性值和方法的实体，是类的一个具体表现，一个类可以创建1个或者多个对象</p><p> (2)  如何通过类来创建对象 【实例】？</p><pre class="line-numbers language-none"><code class="language-none">let 对象变量名= new 类名（）const 对象变量名= new 类名（）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> (3)  如何根据People类来创D建叫张三对象【实例】的人？【举例】</p><p> let  kateCust=new Customer()   kateCust 是对象变量名 ，new Customer()  表示 new 出来的是一个Customer对象，而且是运行期间才在堆中分配 Customer 对象的内存空间 【 new  就是分配内存空间的意思】</p><p>（4）类的对象变量丶对象内存图展示</p><p>（5）类的对象变量，对象的关系</p><p>类的对象变量存在栈中，对象变量存储着对象的首地址，对象变量通过这个地址找到它的对象 </p><blockquote><p>通过 new 创建对象一共做了三件事：</p><ol><li>在堆中为类的对象分配一个空间</li><li>调用对应的构造函数</li><li>把对象赋值给对象变量</li></ol></blockquote><h2 id="【第二章-第7节】"><a href="#【第二章-第7节】" class="headerlink" title="【第二章  第7节】"></a>【第二章  第7节】</h2><h3 id="2-7-类—剖析-TypeScript-类-编译后的-JS-代码-【原生-ES5语法】（JS-源码）"><a href="#2-7-类—剖析-TypeScript-类-编译后的-JS-代码-【原生-ES5语法】（JS-源码）" class="headerlink" title="2-7  类—剖析 TypeScript 类 编译后的 JS 代码 【原生 ES5语法】（JS 源码）"></a>2-7  类—剖析 TypeScript 类 编译后的 JS 代码 【原生 ES5语法】（JS 源码）</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> Person <span class="token operator">=</span> <span class="token comment">/** @class */</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name_<span class="token punctuation">,</span> age_<span class="token punctuation">,</span> phone_</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"noname"</span><span class="token punctuation">;</span> <span class="token comment">//赋初值为noname</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>phone <span class="token operator">=</span> <span class="token string">"11111"</span><span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name_<span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age_<span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>phone <span class="token operator">=</span> phone_<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">doEat</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">who<span class="token punctuation">,</span> address</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"\u548C"</span> <span class="token operator">+</span> who <span class="token operator">+</span> <span class="token string">"\u5403\u996D,\u5728"</span> <span class="token operator">+</span> address <span class="token operator">+</span> <span class="token string">"\u5403\u996D"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">doStep</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> Person<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> zhangSanPerson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"zhangSan"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">"134123123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   zhangSanPerson<span class="token punctuation">.</span><span class="token function">doEat</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token string">"王府井"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>zhangSanPerson<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【第二章-第8节】"><a href="#【第二章-第8节】" class="headerlink" title="【第二章  第8节】"></a>【第二章  第8节】</h2><h3 id="2-8-深度掌握-TypeScript-引用属性和它的真实应用场景"><a href="#2-8-深度掌握-TypeScript-引用属性和它的真实应用场景" class="headerlink" title="2-8 深度掌握 TypeScript 引用属性和它的真实应用场景"></a>2-8 深度掌握 TypeScript 引用属性和它的真实应用场景</h3><h4 id="1-1-如何理解类的引用属性【引用类型属性-】"><a href="#1-1-如何理解类的引用属性【引用类型属性-】" class="headerlink" title="1.1 如何理解类的引用属性【引用类型属性 】"></a>1.1 如何理解类的引用属性【引用类型属性 】</h4><p>（1）什么是引用属性：如果类中的属性的类型是引用类型，那么这个属性就是引用属性</p><p>引用属性的数据类型一般有数组 ，函数，类，对象类型[{…. }格式]，对象数组类型，集合类【Set，Map,自定义集合类】</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  <span class="token comment">// 引用类型的属性</span>  <span class="token keyword">public</span> address<span class="token operator">:</span><span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span>  <span class="token keyword">public</span> <span class="token function-variable function">method</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function-variable function">void</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> orderId<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">public</span> date<span class="token operator">:</span> Date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> custname<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">'custname'</span>  <span class="token keyword">public</span> phone<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">'111'</span>  <span class="token keyword">public</span> orderDetail<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>OrderDetails<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>orderId<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> date<span class="token operator">:</span> Date<span class="token punctuation">,</span> custname<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> phone<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> orderDetail<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>OrderDetails<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>orderId <span class="token operator">=</span> orderId    <span class="token keyword">this</span><span class="token punctuation">.</span>date <span class="token operator">=</span> date    <span class="token keyword">this</span><span class="token punctuation">.</span>custname <span class="token operator">=</span> custname    <span class="token keyword">this</span><span class="token punctuation">.</span>phone <span class="token operator">=</span> phone    <span class="token keyword">this</span><span class="token punctuation">.</span>orderDetail <span class="token operator">=</span> orderDetail  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">OrderDetails</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> orderDetailId<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">public</span> productname<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">'product'</span>  <span class="token keyword">public</span> price<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">public</span> count<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>orderDetailId<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> productname<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> count<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> price<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>orderDetailId <span class="token operator">=</span> orderDetailId    <span class="token keyword">this</span><span class="token punctuation">.</span>productname <span class="token operator">=</span> productname    <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price    <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> count  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> orderDetailOne <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderDetails</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">'电视机'</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">let</span> orderDetailTwo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderDetails</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token string">'手机'</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">let</span> orderDetailArray<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>OrderDetails<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span>orderDetailOne<span class="token punctuation">,</span> orderDetailTwo<span class="token punctuation">]</span><span class="token keyword">let</span> orderDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2023</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">let</span> order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> orderDate<span class="token punctuation">,</span> <span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token string">'333333'</span><span class="token punctuation">,</span> orderDetailArray<span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>输出结果</li></ul><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">zhangbing<span class="token decorator"><span class="token at operator">@</span><span class="token function">192</span></span> src <span class="token operator">%</span> ts<span class="token operator">-</span>node test<span class="token punctuation">.</span>tsOrder <span class="token punctuation">{</span>  orderId<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  date<span class="token operator">:</span> <span class="token number">2023</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span>16T21<span class="token operator">:</span><span class="token number">20</span><span class="token operator">:</span><span class="token number">00</span><span class="token punctuation">.</span>000Z<span class="token punctuation">,</span>  custname<span class="token operator">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span>  phone<span class="token operator">:</span> <span class="token string">'333333'</span><span class="token punctuation">,</span>  orderDetail<span class="token operator">:</span> <span class="token punctuation">[</span>    OrderDetails <span class="token punctuation">{</span>      orderDetailId<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>      productname<span class="token operator">:</span> <span class="token string">'电视机'</span><span class="token punctuation">,</span>      price<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>      count<span class="token operator">:</span> <span class="token number">5000</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    OrderDetails <span class="token punctuation">{</span>      orderDetailId<span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">,</span>      productname<span class="token operator">:</span> <span class="token string">'手机'</span><span class="token punctuation">,</span>      price<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>      count<span class="token operator">:</span> <span class="token number">5000</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2） 引用属性的经典应用场景 </p><p>我们举几个经典的案例：</p><p><strong>真实应用场景1：</strong> 底层经典案例：如果我们使用 TypeScript 来开发一个 ES6 的 Set 集合类就是对数组的二次包装，在这个 Set 集合类中就需要包含一个数组的引用属性供Set类的各个方法来使用。</p><p><strong>真实应用场景2：</strong>底层经典案例：Promise 是前端很重要的技术，Promise 底层类中就采用了函数类型的引用属性【大家先只需要知晓，本课程后面章节会自己动手开发一个 Promise】。</p><p><strong>真实应用场景3：</strong>二次封装应用场景：Set 集合虽好，但不能使用 get(index) 直接取值，这也造成了取值不方便，如果我们自己动手封装一个包含了 add、get、remove、delete、query 的集合类【ArrayList】，这时也需要借助数组引用属性 。</p><p><strong>真实应用场景4：</strong>各种 Nodejs 后端项目构建的应用场景：我们以同学们相对熟悉的订单详情类和订单类为例，下面我们说明并定义电商平台必用的两个类——订单详情类【OrderDetail】和订单类【订单类】转至1.2 。</p><p><strong>真实应用场景5：</strong>跨前端领域的 Java 后端大量使用了引用属性。【第5点可以先知道下即可】。</p><h4 id="1-2-类的引用属性真实应用场景：订单详情类和订单类"><a href="#1-2-类的引用属性真实应用场景：订单详情类和订单类" class="headerlink" title="1.2  类的引用属性真实应用场景：订单详情类和订单类"></a>1.2  类的引用属性真实应用场景：订单详情类和订单类</h4><p>【一个订单对象有多个订单详情对象】</p><p>（1）再说明订单类产生过程</p><p>每个顾客每下一次订单，都会生成一个或者多个订单详情 【一件商品生成一个订单详情】但每次只能生成一个订单，也就是一个订单中包含了一个或者多个订单详情，我们可以定义一个订单类【Order】</p><p>订单类包括了订单 Id，订单日期，顾客地址，顾客名，顾客微信，顾客手机号，客服</p><p>（2）先说明订单详情类产生过程</p><p>顾客在淘宝上下一次订单购买了三件商品，用三条记录来表示：</p><p>第一个订单详情记录： 1   “笔记本” 6898  8<br>第二个订单详情记录：  2    “电脑桌” 7878  9<br>第三个订单详情记录：  3    “手机”   3789  2<br>每一个订单详情都可以用一个对象来表示 【订单详情对象】</p><p>创建一个订单详情类【OrderDetail】 然后 new 出 3 个订单详情类的实例 【当然也可以 new 出 n 个】</p><h4 id="1-3-编码"><a href="#1-3-编码" class="headerlink" title="1.3  编码"></a>1.3  编码</h4><h2 id="【第二章-第9节】"><a href="#【第二章-第9节】" class="headerlink" title="【第二章  第9节】"></a>【第二章  第9节】</h2><h3 id="2-9-类—-构造器简洁的属性赋值-TypeScript4-类中的新特性-【体会优化的属性定义和赋值带来的优势】"><a href="#2-9-类—-构造器简洁的属性赋值-TypeScript4-类中的新特性-【体会优化的属性定义和赋值带来的优势】" class="headerlink" title="2-9  类— 构造器简洁的属性赋值+TypeScript4 类中的新特性 【体会优化的属性定义和赋值带来的优势】"></a>2-9  类— 构造器简洁的属性赋值+TypeScript4 类中的新特性 【体会优化的属性定义和赋值带来的优势】</h3><h3 id="1-1-构造器简洁赋值"><a href="#1-1-构造器简洁赋值" class="headerlink" title="1.1  构造器简洁赋值"></a>1.1  构造器简洁赋值</h3><ol><li>给构造器的参数如果加上 public ，这个参数就变成了一个属性，这种简洁的写法是两步的综合体：<ol><li>定义一个属性</li><li>等于默认构造函数会给这个属性赋值【隐式操作】</li></ol></li></ol><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">{</span>  <span class="token comment">// public orderId: number = 0</span>  <span class="token comment">// public date: Date = new Date()</span>  <span class="token comment">// public custname: string = 'custname'</span>  <span class="token comment">// public phone: string = '111'</span>  <span class="token comment">// public orderDetail: Array&lt;OrderDetails&gt; = []</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> orderId<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token keyword">public</span> date<span class="token operator">:</span> Date<span class="token punctuation">,</span> <span class="token keyword">public</span> custname<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token keyword">public</span> phone<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token keyword">public</span>     orderDetail<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>OrderDetails<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>orderId <span class="token operator">=</span> orderId    <span class="token keyword">this</span><span class="token punctuation">.</span>date <span class="token operator">=</span> date    <span class="token keyword">this</span><span class="token punctuation">.</span>custname <span class="token operator">=</span> custname    <span class="token keyword">this</span><span class="token punctuation">.</span>phone <span class="token operator">=</span> phone    <span class="token keyword">this</span><span class="token punctuation">.</span>orderDetail <span class="token operator">=</span> orderDetail  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>利用联合类型</p><img src="https://gitee.com/zhangbing520/images/raw/master/img/202205171705405.png" alt="image-20220517170535366" style="zoom: 50%;"><blockquote><p>注：上面的getTotal方法报错了，这是因为price属性和count属性可能没有定义，这样就不能相乘，因此利用联合类型 xxx | undefined 来给属性赋值是存在一些问题的</p><img src="https://gitee.com/zhangbing520/images/raw/master/img/202205171708966.png" alt="image-20220517170804915" style="zoom:50%;"></blockquote></li></ol><h3 id="1-2-TypeScript4-的新特性"><a href="#1-2-TypeScript4-的新特性" class="headerlink" title="1.2  TypeScript4 的新特性"></a>1.2  TypeScript4 的新特性</h3><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">OrderDetails</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> orderDetailId<span class="token operator">!</span><span class="token operator">:</span> <span class="token builtin">number</span>   <span class="token keyword">public</span> productname<span class="token operator">!</span><span class="token operator">:</span> <span class="token builtin">string</span>   <span class="token keyword">public</span> price<span class="token operator">!</span><span class="token operator">:</span> <span class="token builtin">number</span>   <span class="token keyword">public</span> count<span class="token operator">!</span><span class="token operator">:</span> <span class="token builtin">number</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>orderDetailId<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> productname<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> count<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> price<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>orderDetailId <span class="token operator">=</span> orderDetailId    <span class="token keyword">this</span><span class="token punctuation">.</span>productname <span class="token operator">=</span> productname    <span class="token comment">// this.price = price</span>    <span class="token comment">// this.count = count</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>price  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> orderDetailOne <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderDetails</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">'电视机'</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>orderDetailOne<span class="token punctuation">.</span>price<span class="token punctuation">)</span> <span class="token comment">// undefined</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>orderDetailOne<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注：赋值时’!’的引入让上面的报错的问题解决了，可以看到上面的代码并没有给 price 和 count 这两个属性赋值，最后可以顺利得到 price 的值为undefined，getTotal 计算的结果为：NaN </p></blockquote><h2 id="第三章-TS自动重启、TS自动运行、Parcel自动打包"><a href="#第三章-TS自动重启、TS自动运行、Parcel自动打包" class="headerlink" title="第三章 TS自动重启、TS自动运行、Parcel自动打包"></a>第三章 TS自动重启、TS自动运行、Parcel自动打包</h2><h3 id="1-步骤如下："><a href="#1-步骤如下：" class="headerlink" title="1.步骤如下："></a>1.步骤如下：</h3><p>（1）初始化 npm init –yes 出现 package.json</p><p>（2） 安装 typescript</p><p>​全局安装 cnpm i typescript -g     或</p><p>​本地安装： cnpm i typescript -D   或</p><p>​    yarn安装 yarn global   add typescript </p><p>​ 【cnpm i typescript -D 是 cnpm install typescript –save-dev的缩写】</p><p>  (3）生成tsconfig.json文件  </p><p>​ tsc –init  </p><p> （4）修改 tsconfig.json 中的配置<br>            “outDir:  “./dist”     –outDir是ts编译后生成js文件保存的目录<br>            “rootDir”: “./src”, –rootDir是自己编写的ts源文件所在的目录<br>           注意: dist src package.json 必须是在一个目录下</p><p>（5）编译src目录以及子目录下的ts文件</p><p>​tsc 【在src当前目录下：输入tsc   注意直接写tsc命令即可】<br>           【会把src目录以及子目录下的ts文件全部编译成js文件，并全部输出到dist目录中】</p><p>（6）安装 ts-node</p><p>​  ts-node让node能直接运行ts代码，无需使用tsc将ts代码编译成js代码。【ts-node则包装了node，它可以直接的运行ts代码】</p><p>​全局安装     cnpm i ts-node -g     或</p><p>​本地安装： cnpm i ts-node -D   或</p><p>​    yarn安装：yarn global   add ts-node </p><p>  （6）安装nodemon工具 【自动检测工具】<br>           nodemon作用：【nodemon可以自动检测到目录中的文件更改时通过重新启动应用程序来调试基于node.js的应用程序】</p><p>​    全局安装  cnpm install -g nodemon     或</p><p>​本地安装： cnpm i nodemon  -D  或</p><p>​    yarn安装    yarn add nodemon  -D   </p><p> （7） 在package.json中配置自动检测，自动重启应用程序</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> <span class="token string">"scripts"</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span><span class="token string">"dev"</span><span class="token builtin class-name">:</span> <span class="token string">"nodemon --watch src/ -e ts --exec ts-node ./src/app.ts"</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​  nodemon –watch src/  表示检测目录是package.json同级目录src</p><p>​ -e ts   表示nodemon 命令准备将要监听的是ts后缀的文件</p><p>​ –exec ts-node ./src/project/app.ts 表示检测到src目录下有任何变化 都要重新执行app.ts文件</p><h3 id="2-Parcel打包支持浏览器运行TS文件"><a href="#2-Parcel打包支持浏览器运行TS文件" class="headerlink" title="2.Parcel打包支持浏览器运行TS文件"></a>2.Parcel打包支持浏览器运行TS文件</h3><p>​（1）安装Parcel打包工具：npm install parcel-bundler –save-dev</p><p>​（2）在package.json中给npm添加启动项，支持启动parcel工具包</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token string">"scripts"</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>   <span class="token string">"start"</span><span class="token builtin class-name">:</span> <span class="token string">"parcel ./index.html"</span> <span class="token punctuation">}</span>,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​  (3)  启动parcel工具包</p><p>​cnpm run start  【cnpm start】或  npm  run start  【npm start】或 yarn run start 【yarn start】</p>]]></content>
      
      
      <categories>
          
          <category> 原型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 装饰器</title>
      <link href="/2022/05/16/typescript-zhuang-shi-qi/"/>
      <url>/2022/05/16/typescript-zhuang-shi-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="使用-TypeScript-装饰器装饰你的代码"><a href="#使用-TypeScript-装饰器装饰你的代码" class="headerlink" title="使用 TypeScript 装饰器装饰你的代码"></a>使用 TypeScript 装饰器装饰你的代码</h1><p><img src="https://visualhunt.com/photos/16/vintage-bulb-lighting-interior-decor.jpeg?s=wh5" alt="使用 TypeScript 装饰器装饰你的代码"></p><p>装饰器让程序员可以编写元信息以内省代码。装饰器的最佳使用场景是横切关注点——面向切面编程。</p><blockquote><p><strong>面向切面编程（AOP）</strong>&nbsp;是一种编程范式，它允许我们分离<a href="https://link.juejin.cn/?target=https://zh.wikipedia.org/wiki/%25E6%25A8%25AA%25E5%2588%2587%25E5%2585%25B3%25E6%25B3%25A8%25E7%2582%25B9" title="https://zh.wikipedia.org/wiki/%E6%A8%AA%E5%88%87%E5%85%B3%E6%B3%A8%E7%82%B9">横切关注点</a>，藉此达到增加模块化程度的目标。它可以在不修改代码自身的前提下，给已有代码增加额外的行为（通知）。</p></blockquote><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token decorator"><span class="token at operator">@</span><span class="token function">log</span></span> <span class="token comment">// 类装饰器</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> firstName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token keyword">private</span> lastName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">log</span></span> <span class="token comment">// 方法装饰器</span>  <span class="token function">getFullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'Mohan'</span><span class="token punctuation">,</span> <span class="token string">'Ram'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>person<span class="token punctuation">.</span><span class="token function">getFullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码展示了装饰器多么具有声明性。下面我们将介绍装饰器的细节：</p><ol><li>什么是装饰器？它的目的和类型</li><li>装饰器的签名</li><li>方法装饰器</li><li>属性装饰器</li><li>参数装饰器</li><li>访问器装饰器</li><li>类装饰器</li><li>装饰器工厂</li><li>元信息反射 API</li><li>结语</li></ol><h2 id="什么是装饰器？它的目的和类型"><a href="#什么是装饰器？它的目的和类型" class="headerlink" title="什么是装饰器？它的目的和类型"></a>什么是装饰器？它的目的和类型</h2><blockquote><p>装饰器是一种特殊的声明，可附加在类、方法、访问器、属性、参数声明上。</p></blockquote><p>装饰器使用&nbsp;<code>@expression</code>&nbsp;的形式，其中&nbsp;<code>expression</code>&nbsp;必须能够演算为在运行时调用的函数，其中包括装饰声明信息。</p><p>它起到了以声明式方法将元信息添加至已有代码的作用。</p><p>装饰器类型及其执行优先级为</p><ol><li>类装饰器——优先级 4 （对象实例化，静态）</li><li>方法装饰器——优先级 2 （对象实例化，静态）</li><li>访问器或属性装饰器——优先级 3 （对象实例化，静态）</li><li>参数装饰器——优先级 1 （对象实例化，静态）</li></ol><p>注意，如果装饰器应用于类构造函数的参数，那么不同装饰器的优先级为：1. 参数装饰器，2. 方法装饰器，3. 访问器或参数装饰器，4. 构造器参数装饰器，5. 类装饰器。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 这是一个装饰器工厂——有助于将用户参数传给装饰器声明</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"f(): evaluated"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> propertyKey<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> descriptor<span class="token operator">:</span> PropertyDescriptor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"f(): called"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"g(): evaluated"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> propertyKey<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> descriptor<span class="token operator">:</span> PropertyDescriptor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"g(): called"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token punctuation">{</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">f</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">g</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// f(): evaluated</span><span class="token comment">// g(): evaluated</span><span class="token comment">// g(): called</span><span class="token comment">// f(): called</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们看到，上面的代码中，<code>f</code>&nbsp;和&nbsp;<code>g</code>&nbsp;返回了另一个函数（装饰器函数）。<code>f</code>&nbsp;和&nbsp;<code>g</code>&nbsp;称为装饰器工厂。</p><blockquote><p><strong>装饰器工厂</strong>&nbsp;帮助用户传递可供装饰器利用的参数。</p></blockquote><p>我们还可以看到，<strong>演算顺序</strong>为<strong>由顶向下</strong>，<strong>执行顺序</strong>为<strong>由底向上</strong>。</p><h2 id="装饰器的签名"><a href="#装饰器的签名" class="headerlink" title="装饰器的签名"></a>装饰器的签名</h2><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">declare</span> <span class="token keyword">type</span> <span class="token class-name">ClassDecorator</span> <span class="token operator">=</span>  <span class="token operator">&lt;</span>TFunction <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Function</span></span><span class="token operator">&gt;</span><span class="token punctuation">(</span>target<span class="token operator">:</span> TFunction<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> TFunction <span class="token operator">|</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token keyword">declare</span> <span class="token keyword">type</span> <span class="token class-name">PropertyDecorator</span> <span class="token operator">=</span>  <span class="token punctuation">(</span>target<span class="token operator">:</span> Object<span class="token punctuation">,</span> propertyKey<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">symbol</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token keyword">declare</span> <span class="token keyword">type</span> <span class="token class-name">MethodDecorator</span> <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>  target<span class="token operator">:</span> Object<span class="token punctuation">,</span> propertyKey<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">symbol</span><span class="token punctuation">,</span>  descriptor<span class="token operator">:</span> TypedPropertyDescriptor<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>    TypedPropertyDescriptor<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方法装饰器"><a href="#方法装饰器" class="headerlink" title="方法装饰器"></a>方法装饰器</h2><p>从上面的签名中，我们可以看到方法装饰器函数有三个参数：</p><ol><li><strong>target</strong>&nbsp;—— 当前对象的原型，也就是说，假设 Employee 是对象，那么 target 就是&nbsp;<code>Employee.prototype</code></li><li><strong>propertyKey</strong>&nbsp;—— 方法的名称</li><li><strong>descriptor</strong>&nbsp;—— 方法的属性描述符，即&nbsp;<code>Object.getOwnPropertyDescriptor(Employee.prototype, propertyKey)</code></li></ol><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">logMethod</span><span class="token punctuation">(</span>  target<span class="token operator">:</span> Object<span class="token punctuation">,</span>  propertyName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>  propertyDescriptor<span class="token operator">:</span> PropertyDescriptor<span class="token punctuation">)</span><span class="token operator">:</span> PropertyDescriptor <span class="token punctuation">{</span>  <span class="token comment">// target === Employee.prototype</span>  <span class="token comment">// propertyName === "greet"</span>  <span class="token comment">// propertyDesciptor === Object.getOwnPropertyDescriptor(Employee.prototype, "greet")</span>  <span class="token keyword">const</span> method <span class="token operator">=</span> propertyDesciptor<span class="token punctuation">.</span>value<span class="token punctuation">;</span>  propertyDesciptor<span class="token punctuation">.</span><span class="token function-variable function">value</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 将 greet 的参数列表转换为字符串</span>    <span class="token keyword">const</span> params <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 调用 greet() 并获取其返回值</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">method</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 转换结尾为字符串</span>    <span class="token keyword">const</span> r <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 在终端显示函数调用细节</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Call: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>propertyName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>params<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">) =&gt; </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>r<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 返回调用函数的结果</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> propertyDesciptor<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> firstName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token keyword">private</span> lastName<span class="token operator">:</span> <span class="token builtin">string</span>    <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token decorator"><span class="token at operator">@</span><span class="token function">logMethod</span></span>    <span class="token function">greet</span><span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> says: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> emp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">'Mohan Ram'</span><span class="token punctuation">,</span> <span class="token string">'Ratnakumar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>emp<span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码应该算是自解释的——让我们看看编译后的 JavaScript 是什么样的。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token string">"use strict"</span><span class="token punctuation">;</span><span class="token keyword">var</span> __decorate <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>__decorate<span class="token punctuation">)</span> <span class="token operator">||</span>    <span class="token keyword">function</span> <span class="token punctuation">(</span>decorators<span class="token punctuation">,</span> target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> desc<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 函数参数长度</span>        <span class="token keyword">var</span> c <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length        <span class="token comment">/**         * 处理结果         * 如果仅仅传入了装饰器数组和目标，那么应该是个类装饰器。         * 否则，如果描述符（第 4 个参数）为 null，就根据已知值准备属性描述符，         * 反之则使用同一描述符。         */</span>        <span class="token keyword">var</span> r <span class="token operator">=</span> c <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token operator">?</span> target <span class="token operator">:</span> desc <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">?</span> desc <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">:</span> desc<span class="token punctuation">;</span>                <span class="token comment">// 声明存储装饰器的变量</span>        <span class="token keyword">var</span> d<span class="token punctuation">;</span>        <span class="token comment">// 如果原生反射可用，使用原生反射触发装饰器</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> Reflect <span class="token operator">===</span> <span class="token string">"object"</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> Reflect<span class="token punctuation">.</span>decorate <span class="token operator">===</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            r <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>decorators<span class="token punctuation">,</span> target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> desc<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">// 自右向左迭代装饰器</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> decorators<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 如果装饰器合法，将其赋值给 d</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>d <span class="token operator">=</span> decorators<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">/**                     * 如果仅仅传入了装饰器数组和目标，那么应该是类装饰器，                     * 传入目标调用装饰器。                     * 否则，如果 4 个参数俱全，那么应该是方法装饰器，                     * 据此进行调用。                     * 反之则使用同一描述符。                     * 如果传入了 3 个参数，那么应该是属性装饰器，可进行相应的调用。                     * 如果以上条件皆不满足，返回处理的结果。                    */</span>                    r <span class="token operator">=</span> <span class="token punctuation">(</span>c <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token operator">?</span> <span class="token function">d</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">:</span> c <span class="token operator">&gt;</span> <span class="token number">3</span> <span class="token operator">?</span> <span class="token function">d</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">d</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> r                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment">/**         * 由于只有方法装饰器需要根据应用装饰器的结果修正其属性，         * 所以最后返回处理好的 r         */</span>        <span class="token keyword">return</span> c <span class="token operator">&gt;</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> r <span class="token operator">&amp;&amp;</span> Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> Employee <span class="token operator">=</span> <span class="token comment">/** @class */</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">Employee</span><span class="token punctuation">(</span>firstName<span class="token punctuation">,</span> lastName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> firstName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> lastName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Employee<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">greet</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">+</span> <span class="token string">" says: "</span> <span class="token operator">+</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment">// typescript 调用 `__decorate` 辅助函数，</span>    <span class="token comment">// 以便在对象原型上应用装饰器</span>    <span class="token function">__decorate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>        logMethod    <span class="token punctuation">]</span><span class="token punctuation">,</span> Employee<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">"greet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Employee<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> emp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">'Mohan Ram'</span><span class="token punctuation">,</span> <span class="token string">'Ratnakumar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>emp<span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>让我们开始分析 Employee 函数——构造器初始化&nbsp;<code>name</code>&nbsp;参数和&nbsp;<code>greet</code>&nbsp;方法，将其加入原型。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token function">__decorate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>logMethod<span class="token punctuation">]</span><span class="token punctuation">,</span> Employee<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">"greet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这是 TypeScript 自动生成的通用方法，它根据装饰器类型和相应参数处理装饰器函数调用。</p><p>该函数有助于内省方法调用，并为开发者铺平了处理类似<strong>日志</strong>、<strong>记忆化</strong>、<strong>应用配置</strong>等横切关注点的道路。</p><p>在这个例子中，我们仅仅打印了函数调用及其参数、响应。</p><p>注意，阅读&nbsp;<code>__decorate</code>&nbsp;方法中的详细注释可以理解其内部机制。</p><h2 id="属性装饰器"><a href="#属性装饰器" class="headerlink" title="属性装饰器"></a>属性装饰器</h2><p>属性装饰器函数有两个参数：</p><ol><li><strong>target</strong>&nbsp;—— 当前对象的原型，也就是说，假设 Employee 是对象，那么 target 就是&nbsp;<code>Employee.prototype</code></li><li><strong>propertyKey</strong>&nbsp;—— 属性的名称</li></ol><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">logParameter</span><span class="token punctuation">(</span>target<span class="token operator">:</span> Object<span class="token punctuation">,</span> propertyName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 属性值</span>    <span class="token keyword">let</span> _val <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">[</span>propertyName<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 属性读取访问器</span>    <span class="token keyword">const</span> <span class="token function-variable function">getter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Get: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>propertyName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> =&gt; </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>_val<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> _val<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment">// 属性写入访问器</span>    <span class="token keyword">const</span> <span class="token function-variable function">setter</span> <span class="token operator">=</span> newVal <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Set: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>propertyName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> =&gt; </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>newVal<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        _val <span class="token operator">=</span> newVal<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment">// 删除属性</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token punctuation">[</span>propertyName<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 创建新属性及其读取访问器、写入访问器</span>        Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> propertyName<span class="token punctuation">,</span> <span class="token punctuation">{</span>            get<span class="token operator">:</span> getter<span class="token punctuation">,</span>            set<span class="token operator">:</span> setter<span class="token punctuation">,</span>            enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            configurable<span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>    <span class="token decorator"><span class="token at operator">@</span><span class="token function">logParameter</span></span>    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> emp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>emp<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Mohan Ram'</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>emp<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Set: name =&gt; Mohan Ram</span><span class="token comment">// Get: name =&gt; Mohan Ram</span><span class="token comment">// Mohan Ram</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码中，我们在装饰器中内省属性的可访问性。下面是编译后的代码。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">var</span> Employee <span class="token operator">=</span> <span class="token comment">/** @class */</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token function">__decorate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>        logParameter    <span class="token punctuation">]</span><span class="token punctuation">,</span> Employee<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Employee<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> emp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>emp<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Mohan Ram'</span><span class="token punctuation">;</span> <span class="token comment">// Set: name =&gt; Mohan Ram</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>emp<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Get: name =&gt; Mohan Ram</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参数装饰器"><a href="#参数装饰器" class="headerlink" title="参数装饰器"></a>参数装饰器</h2><p>参数装饰器函数有三个参数：</p><ol><li><strong>target</strong>&nbsp;—— 当前对象的原型，也就是说，假设 Employee 是对象，那么 target 就是&nbsp;<code>Employee.prototype</code></li><li><strong>propertyKey</strong>&nbsp;—— 参数的名称</li><li><strong>index</strong>&nbsp;—— 参数数组中的位置</li></ol><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">logParameter</span><span class="token punctuation">(</span>target<span class="token operator">:</span> Object<span class="token punctuation">,</span> propertyName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 为相应方法生成元数据键，以储存被装饰的参数的位置</span>    <span class="token keyword">const</span> metadataKey <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">log_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>propertyName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">_parameters</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span>metadataKey<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        target<span class="token punctuation">[</span>metadataKey<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        target<span class="token punctuation">[</span>metadataKey<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>    <span class="token function">greet</span><span class="token punctuation">(</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">logParameter</span></span> message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> emp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>emp<span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的代码中，我们收集了所有被装饰的方法参数的索引或位置，作为元数据加入对象的原型。下面是编译后的代码。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 返回接受参数索引和装饰器的函数</span><span class="token keyword">var</span> __param <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>__param<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>paramIndex<span class="token punctuation">,</span> decorator<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 该函数返回装饰器</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">decorator</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> paramIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> Employee <span class="token operator">=</span> <span class="token comment">/** @class */</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    Employee<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">greet</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"hello "</span> <span class="token operator">+</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">__decorate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>        <span class="token function">__param</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> logParameter<span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span> Employee<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">"greet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Employee<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> emp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>emp<span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类似之前见过的&nbsp;<code>__decorate</code>&nbsp;函数，<code>__param</code>&nbsp;函数返回一个封装参数装饰器的装饰器。</p><p>如我们所见，调用参数装饰器时，会忽略其返回值。这意味着，调用&nbsp;<code>__param</code>&nbsp;函数时，其返回值不会用来覆盖参数值。</p><p>这就是<strong>参数装饰器不返回</strong>的原因所在。</p><h2 id="访问器装饰器"><a href="#访问器装饰器" class="headerlink" title="访问器装饰器"></a>访问器装饰器</h2><p>访问器不过是类声明中属性的读取访问器和写入访问器。</p><p><strong>访问器装饰器</strong>应用于访问器的<strong>属性描述符</strong>，可用于观测、修改、替换访问器的定义。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">enumerable</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>      target<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> propertyKey<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> descriptor<span class="token operator">:</span> PropertyDescriptor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'decorator - sets the enumeration part of the accessor'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        descriptor<span class="token punctuation">.</span>enumerable <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> _salary<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> _name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>    <span class="token decorator"><span class="token at operator">@</span><span class="token function">enumerable</span></span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">get</span> <span class="token function">salary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Rs. </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>_salary<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">set</span> <span class="token function">salary</span><span class="token punctuation">(</span>salary<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_salary <span class="token operator">=</span> <span class="token operator">+</span>salary<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token decorator"><span class="token at operator">@</span><span class="token function">enumerable</span></span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">get</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Sir/Madam, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>_name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">set</span> <span class="token function">name</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> emp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>emp<span class="token punctuation">.</span>salary <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> prop <span class="token keyword">in</span> emp<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">enumerable property = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>prop<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// salary 属性不在清单上，因为我们将其设为假</span><span class="token comment">// output:</span><span class="token comment">// decorator - sets the enumeration part of the accessor</span><span class="token comment">// decorator - sets the enumeration part of the accessor</span><span class="token comment">// enumerable property = _salary</span><span class="token comment">// enumerable property = name</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的例子中，我们定义了两个访问器&nbsp;<code>name</code>&nbsp;和&nbsp;<code>salary</code>，并通过装饰器设置是否将其列入清单，据此决定对象的行为。<code>name</code>&nbsp;将列入清单，而&nbsp;<code>salary</code>&nbsp;不会。</p><p>注意：TypeScript 不允许同时装饰单一成员的&nbsp;<code>get</code>&nbsp;和&nbsp;<code>set</code>&nbsp;访问器。相反，所有成员的装饰器都必须应用于首个指定的访问器（根据文档顺序）。这是因为装饰器应用于属性描述符，属性描述符结合了&nbsp;<code>get</code>&nbsp;和&nbsp;<code>set</code>&nbsp;访问器，而不是分别应用于每项声明。</p><p>下面是编译的代码。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">enumerable</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> propertyKey<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'decorator - sets the enumeration part of the accessor'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        descriptor<span class="token punctuation">.</span>enumerable <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> Employee <span class="token operator">=</span> <span class="token comment">/** @class */</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>Employee<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">"salary"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">"Rs. "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_salary<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_salary <span class="token operator">=</span> <span class="token operator">+</span>salary<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        configurable<span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>Employee<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"Sir/Madam, "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_name<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        configurable<span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">__decorate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>        <span class="token function">enumerable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span> Employee<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">"salary"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">__decorate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>        <span class="token function">enumerable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span> Employee<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Employee<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> emp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>emp<span class="token punctuation">.</span>salary <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> prop <span class="token keyword">in</span> emp<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"enumerable property = "</span> <span class="token operator">+</span> prop<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h2><p>类装饰器应用于类的构造器，可用于观测、修改、替换类定义。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">logClass</span><span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 保存一份原构造器的引用</span>    <span class="token keyword">const</span> original <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token comment">// 生成类的实例的辅助函数</span>    <span class="token keyword">function</span> <span class="token function">construct</span><span class="token punctuation">(</span>constructor<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> c<span class="token operator">:</span> <span class="token function-variable function">any</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">constructor</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        c<span class="token punctuation">.</span>prototype <span class="token operator">=</span> constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 新构造器行为</span>    <span class="token keyword">const</span> f<span class="token operator">:</span> <span class="token function-variable function">any</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">New: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>original<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> is created</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">construct</span><span class="token punctuation">(</span>original<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 复制 prototype 属性，保持 intanceof 操作符可用</span>    f<span class="token punctuation">.</span>prototype <span class="token operator">=</span> original<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>    <span class="token comment">// 返回新构造器（将覆盖原构造器）</span>    <span class="token keyword">return</span> f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">logClass</span></span><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">let</span> emp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'emp instanceof Employee'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>emp <span class="token keyword">instanceof</span> <span class="token class-name">Employee</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>复制代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的装饰器声明了一个名为&nbsp;<code>original</code>&nbsp;的变量，将其值设为被装饰的类构造器。</p><p>接着声明了名为&nbsp;<code>construct</code>&nbsp;的辅助函数。该函数用于创建类的实例。</p><p>我们接下来创建了一个名为&nbsp;<code>f</code>&nbsp;的变量，该变量将用作新构造器。该函数调用原构造器，同时在控制台打印实例化的类名。这正是我们<strong>给原构造器加入额外行为</strong>的地方。</p><p>原构造器的原型复制到&nbsp;<code>f</code>，以确保创建一个 Employee 新实例的时候，<code>instanceof</code>&nbsp;操作符的效果符合预期。</p><p>新构造器一旦就绪，我们便返回它，以完成类构造器的实现。</p><p>新构造器就绪之后，每次创建实例时会在控制台打印类名。</p><p>编译后的代码如下。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">var</span> Employee <span class="token operator">=</span> <span class="token comment">/** @class */</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    Employee <span class="token operator">=</span> <span class="token function">__decorate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>        logClass    <span class="token punctuation">]</span><span class="token punctuation">,</span> Employee<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Employee<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> emp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'emp instanceof Employee'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>emp <span class="token keyword">instanceof</span> <span class="token class-name">Employee</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在编译后的代码中，我们注意到两处不同：</p><ol><li>如你所见，传给&nbsp;<code>__decorate</code>&nbsp;的参数有两个，装饰器数组和构造器函数。</li><li>TypeScript 编译器使用&nbsp;<code>__decorate</code>&nbsp;的返回值以覆盖原构造器。</li></ol><p>这正是<strong>类装饰器必须返回一个构造函数</strong>的原因所在。</p><h2 id="装饰器工厂"><a href="#装饰器工厂" class="headerlink" title="装饰器工厂"></a>装饰器工厂</h2><p>由于每种装饰器都有它自身的调用签名，我们可以使用装饰器工厂来泛化装饰器调用。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> logClass <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./class-decorator'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> logMethod <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./method-decorator'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> logProperty <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./property-decorator'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> logParameter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./parameter-decorator'</span><span class="token punctuation">;</span><span class="token comment">// 装饰器工厂，根据传入的参数调用相应的装饰器</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span> <span class="token comment">// 可能是方法装饰器或参数装饰器</span>            <span class="token comment">// 如果第三个参数是数字，那么它是索引，所以这是参数装饰器</span>            <span class="token keyword">if</span> <span class="token keyword">typeof</span> args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"number"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">logParameter</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token function">logMethod</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token comment">// 属性装饰器 </span>            <span class="token keyword">return</span> <span class="token function">logProperty</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token comment">// 类装饰器</span>            <span class="token keyword">return</span> <span class="token function">logClass</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span> <span class="token comment">// 参数数目不合法</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Not a valid decorator'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">log</span></span><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>    <span class="token decorator"><span class="token at operator">@</span><span class="token function">log</span></span>    <span class="token keyword">private</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token decorator"><span class="token at operator">@</span><span class="token function">log</span></span>    <span class="token function">greet</span><span class="token punctuation">(</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">log</span></span> message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> says: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="元信息反射-API"><a href="#元信息反射-API" class="headerlink" title="元信息反射 API"></a>元信息反射 API</h2><p>元信息反射 API （例如&nbsp;<code>Reflect</code>）能够用来以标准方式组织元信息。</p><p>「反射」的意思是代码可以侦测同一系统中的其他代码（或其自身）。</p><p>反射在组合/依赖注入、运行时类型断言、测试等使用场景下很有用。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token string">"reflect-metadata"</span><span class="token punctuation">;</span><span class="token comment">// 参数装饰器使用反射 api 存储被装饰参数的索引</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">logParameter</span><span class="token punctuation">(</span>target<span class="token operator">:</span> Object<span class="token punctuation">,</span> propertyName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 获取目标对象的元信息</span>    <span class="token keyword">const</span> indices <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">log_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>propertyName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">_parameters</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> target<span class="token punctuation">,</span> propertyName<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    indices<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 定义目标对象的元信息</span>    Reflect<span class="token punctuation">.</span><span class="token function">defineMetadata</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">log_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>propertyName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">_parameters</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> indices<span class="token punctuation">,</span> target<span class="token punctuation">,</span> propertyName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 属性装饰器使用反射 api 获取属性的运行时类型</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">logProperty</span><span class="token punctuation">(</span>target<span class="token operator">:</span> Object<span class="token punctuation">,</span> propertyName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>    <span class="token comment">// 获取对象属性的设计类型</span>    <span class="token keyword">var</span> t <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token string">"design:type"</span><span class="token punctuation">,</span> target<span class="token punctuation">,</span> propertyName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>propertyName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> type: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>t<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// name type: String</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>    <span class="token decorator"><span class="token at operator">@</span><span class="token function">logProperty</span></span>    <span class="token keyword">private</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>        <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">greet</span><span class="token punctuation">(</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">logParameter</span></span> message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> says: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码用到了&nbsp;<a href="https://link.juejin.cn/?target=https://www.npmjs.com/package/reflect-metadata" title="https://www.npmjs.com/package/reflect-metadata">reflect-metadata</a>&nbsp;这个库。其中，我们使用了反射元信息的设计键（例如：<code>design:type</code>）。目前只有三个：</p><ul><li><strong>类型元信息</strong>用了元信息键&nbsp;<code>design:type</code>。</li><li><strong>参数类型元信息</strong>用了元信息键&nbsp;<code>design:paramtypes</code>。</li><li><strong>返回类型元信息</strong>用了元信息键&nbsp;<code>design:returntype</code>。</li></ul><p>有了反射，我们就能够在运行时得到以下信息：</p><ul><li>实体<strong>名</strong>。</li><li>实体<strong>类型</strong>。</li><li>实体实现的<strong>接口</strong>。</li><li>实体<strong>构造器参数</strong>的名称和类型。</li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><ul><li><strong>装饰器</strong>&nbsp;不过是在<strong>设计时（design time）</strong>帮助<strong>内省</strong>代码，<strong>注解</strong>及修改类和属性的函数。</li><li>Yehuda Katz 提议在 ECMAScript 2016 标准中加入装饰器特性：<a href="https://link.juejin.cn/?target=https://github.com/tc39/proposal-decorators" title="https://github.com/tc39/proposal-decorators">tc39/proposal-decorators</a></li><li>我们可以通过<strong>装饰器工厂</strong>将用户提供的参数传给装饰器。</li><li>有 4 种装饰器：<strong>类</strong>装饰器、<strong>方法</strong>装饰器、<strong>属性/访问器</strong>装饰器、<strong>参数</strong>装饰器。</li><li><strong>元信息反射 API</strong>&nbsp;有助于以标准方式在对象中加入元信息，以及在<strong>运行时</strong>获取<strong>设计类型信息</strong>。</li></ul><p>我把文中所有代码示例都放到了&nbsp;<a href="https://link.juejin.cn/?target=https://github.com/mohanramphp/typescript-decorators" title="https://github.com/mohanramphp/typescript-decorators">mohanramphp/typescript-decorators</a>&nbsp;这个 Git 仓库中。谢谢阅读！</p>]]></content>
      
      
      <categories>
          
          <category> 装饰器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四章： 深度掌握泛型函数</title>
      <link href="/2022/05/12/di-si-zhang-shen-du-zhang-wo-fan-xing-han-shu/"/>
      <url>/2022/05/12/di-si-zhang-shen-du-zhang-wo-fan-xing-han-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="慕课网-TS-高级课程"><a href="#慕课网-TS-高级课程" class="headerlink" title="慕课网 TS 高级课程"></a>慕课网 TS 高级课程</h2><h3 id="第四章：-深度掌握泛型函数"><a href="#第四章：-深度掌握泛型函数" class="headerlink" title="第四章： 深度掌握泛型函数"></a>第四章： 深度掌握泛型函数</h3><p><strong>技能大纲</strong></p><p><strong>4-1  【泛型函数】—泛型函数+快速排序算法【比冒泡稍复杂】 【透彻理解泛型函数的好处】【共两节】</strong></p><p><strong>4-2   【泛型函数重载】泛型函数重载准备【经典复杂排序器】—自排序丶多数据类型丶中文排序【共三节】</strong>    </p><p><strong>4-3  【泛型函数重载】泛型函数重载重构自排序丶多种数据类型丶中文排序 【彻底理解泛型函数重载带来的巨大好处】</strong>  </p><hr><p><strong>A-1  升级课程用：泛型函数重载+泛型约束综合应用：外排序+内排序</strong></p><hr><p><strong>4-4 【泛型函数重载】 结合 Vue3 源码深度掌握泛型函数重载</strong> 【共一节】</p><p><strong>4-5   泛型工厂函数——深入泛型工厂函数+泛型工厂函数的深度应用【不按“套路”出牌】</strong></p><p><strong>4-6 【TS交叉类型】 理解交叉类型和深入分析交叉类型的应用场景</strong> </p><p><strong>4-7 【泛型函数+TS交叉类型+类型断言+枚举】 深度理解泛型函数+交叉类型的综合应用</strong> </p><p><strong>慕课网 TS 高级课程</strong></p><h4 id="4-1-【泛型函数】—泛型函数-快速排序算法【比冒泡稍复杂】-【透彻理解泛型函数的好处】【共两节】"><a href="#4-1-【泛型函数】—泛型函数-快速排序算法【比冒泡稍复杂】-【透彻理解泛型函数的好处】【共两节】" class="headerlink" title="4-1  【泛型函数】—泛型函数+快速排序算法【比冒泡稍复杂】 【透彻理解泛型函数的好处】【共两节】"></a><strong>4-1  【泛型函数】—泛型函数+快速排序算法【比冒泡稍复杂】 【透彻理解泛型函数的好处】【共两节】</strong></h4><p><strong>泛型函数课程安排：</strong> </p><ol><li>大致讲解快速排序算法   </li><li>编写字符串排序、整数排序函数  </li><li>泛型函数实现字符串排序、整数排序【讲解泛型函数带来的好处】</li></ol><p><strong>（1）快速排序算法</strong>【 <strong>快速排序算法不属于本课程内容，老师会简单讲下，同学们有个基本了解即可，如不能完全理解，先用即可，重心一定要先放在泛型函数和接下来的泛型函数重载上</strong>】</p><p><strong>（2）编写字符串排序丶整数排序函数代码：</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 快速排序算法思路：</span><span class="token comment">// 1．先从数列中取出一个数作为基准数。</span><span class="token comment">// 2．分区过程，将比这个数大的数全放到它的右边，小于或等于它的数全放到它的左边。</span><span class="token comment">// 3．再对左右区间重复第二步，直到各区间只有一个数。</span><span class="token keyword">function</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">arr</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>any<span class="token operator">&gt;</span></span><span class="token punctuation">)</span><span class="token operator">:</span> any <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> arr <span class="token punctuation">}</span>  <span class="token keyword">var</span> <span class="token literal-property property">left</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>any<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> <span class="token literal-property property">right</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>any<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> mid <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>      left<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      right<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>mid<span class="token punctuation">,</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> chineseArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> chineseArrSort <span class="token operator">=</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>chineseArr<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"chineseArrSort:"</span><span class="token punctuation">,</span> chineseArrSort<span class="token punctuation">)</span><span class="token keyword">let</span> <span class="token literal-property property">strArr</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"cba"</span><span class="token punctuation">,</span> <span class="token string">"kkdf"</span><span class="token punctuation">,</span> <span class="token string">"ndf"</span><span class="token punctuation">,</span> <span class="token string">"bcdf"</span><span class="token punctuation">,</span> <span class="token string">"dfd"</span><span class="token punctuation">,</span> <span class="token string">"cdf"</span><span class="token punctuation">]</span><span class="token keyword">let</span> strArrSort <span class="token operator">=</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>strArr<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"strArrSort:"</span><span class="token punctuation">,</span> strArrSort<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>慕课网 TS 高级课程</strong></p><p> <strong>(3)  泛型函数实现字符串排序，整数排序【讲解泛型函数带来的好处】</strong> <strong>泛型类的格式</strong>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 泛型函数实现的快速排序方法</span><span class="token keyword">function</span> <span class="token function">quickSort</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> left <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> right <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> mid <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>      left<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>      right<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>mid<span class="token punctuation">,</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>慕课网 TS 高级课程</strong></p><p><strong>4-2   【泛型函数重载】泛型函数重载准备【经典复杂排序器】—自排序、多种数据类型、中文排序【共三节】</strong>    </p><p><strong>泛型函数重载课程安排：</strong></p><ol><li>中文排序   </li><li>字符串自排序   </li><li>中文+英文、数字数组排序 </li><li>中文+英文、数字数组 + 数组内部字符串自排序   </li><li>字符串自排序 +中文+英文、数字数组+数组内部字符串自排序</li></ol><p><strong>1. 中文排序</strong> </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> sortChinese<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>arr<span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token comment">//Array&lt;T&gt;=T[]</span>  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">firstnum<span class="token punctuation">,</span> secondnum</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>firstnum <span class="token keyword">as</span> any<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">localeCompare</span><span class="token punctuation">(</span>secondnum<span class="token punctuation">,</span> <span class="token string">"zh-CN"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2. 字符串自排序</strong> </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> quickSort<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>arr<span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> arr <span class="token punctuation">}</span>  <span class="token keyword">var</span> <span class="token literal-property property">left</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> <span class="token literal-property property">right</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> mid <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>      left<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      right<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>mid<span class="token punctuation">,</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//  字符串自排序</span><span class="token keyword">function</span> <span class="token function">strSelfSort</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">str</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">{</span>  <span class="token comment">// (1) 字符串拆分成数组</span>  <span class="token keyword">let</span> strArray <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// (2) 数组进行使用快速排序算法来排序</span>  <span class="token keyword">let</span> strSortArray <span class="token operator">=</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>strArray<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// (3) 重新把排好序的数组连接成一个字符串返回</span>  <span class="token keyword">return</span> strSortArray<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3. 中文+英文、数字数组排序</strong>  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> pattern1 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\u4e00-\u9fa5]+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span><span class="token comment">// 3泛型函数重载准备</span><span class="token comment">// (1). 中文排序</span><span class="token comment">// (2). 字符串自排序</span><span class="token keyword">function</span> quickSort<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>arr<span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> arr <span class="token punctuation">}</span>  <span class="token keyword">var</span> <span class="token literal-property property">left</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> <span class="token literal-property property">right</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> mid <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"mid:"</span><span class="token punctuation">,</span> mid<span class="token punctuation">)</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>      left<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      right<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>mid<span class="token punctuation">,</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// localeCompare</span><span class="token keyword">let</span> <span class="token literal-property property">str</span><span class="token operator">:</span> string <span class="token operator">=</span> <span class="token string">"cbaimcnd"</span><span class="token comment">//let strArrSort = quickSort(str)</span><span class="token comment">// (2). 字符串自排序</span><span class="token keyword">function</span> <span class="token function">strSelfSort</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">str</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">{</span>  <span class="token comment">// (1) 字符串拆分成数组</span>  <span class="token keyword">let</span> strArray <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// (2) 数组进行使用快速排序算法来排序</span>  <span class="token keyword">let</span> strSortArray <span class="token operator">=</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>strArray<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// (3) 重新把排好序的数组连接成一个字符串返回</span>  <span class="token keyword">return</span> strSortArray<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">strSelfSort</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <strong>4. 中文+英文、数字数组 + 数组内部字符串自排序</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// var pattern1 = /[\u4e00-\u9fa5]+/g;</span><span class="token comment">// 慕课网 TS 高级课程</span><span class="token comment">// 英文、数字数组排序  </span><span class="token keyword">function</span> quickSort<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>arr<span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> arr <span class="token punctuation">}</span>  <span class="token keyword">var</span> <span class="token literal-property property">left</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> <span class="token literal-property property">right</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> mid <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"mid:"</span><span class="token punctuation">,</span> mid<span class="token punctuation">)</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>      left<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      right<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>mid<span class="token punctuation">,</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//   中文排序</span><span class="token keyword">function</span> sortChinese<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>arr<span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token comment">//Array&lt;T&gt;=T[]</span>  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">firstnum<span class="token punctuation">,</span> secondnum</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>firstnum <span class="token keyword">as</span> any<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">localeCompare</span><span class="token punctuation">(</span>secondnum<span class="token punctuation">,</span> <span class="token string">"zh-CN"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 判断数组中是否有中文元素</span><span class="token keyword">function</span> isChinese<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>arr<span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> boolean <span class="token punctuation">{</span>  <span class="token keyword">var</span> pattern1 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\u4e00-\u9fa5]+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> pattern1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>item <span class="token keyword">as</span> any<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 中文+英文、数字数组排序混合方法  </span><span class="token keyword">function</span> sort<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>arr<span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isChinese</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果是中文数组</span>    <span class="token keyword">return</span> <span class="token function">sortChinese</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">typeof</span> item <span class="token operator">===</span> <span class="token string">"string"</span> <span class="token operator">?</span> <span class="token function">strSelfSort</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">:</span> item  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment">//英文、数字数组排序</span>  <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>newArr <span class="token keyword">as</span> any<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// (2). 字符串自排序</span><span class="token keyword">function</span> <span class="token function">strSelfSort</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">str</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">{</span>  <span class="token comment">// (1) 字符串拆分成数组</span>  <span class="token keyword">let</span> strArray <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// (2) 数组进行使用快速排序算法来排序</span>  <span class="token keyword">let</span> strSortArray <span class="token operator">=</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>strArray<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// (3) 重新把排好序的数组连接成一个字符串返回</span>  <span class="token keyword">return</span> strSortArray<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> numArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sort</span><span class="token punctuation">(</span>numArr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token literal-property property">strArr</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"cba"</span><span class="token punctuation">,</span> <span class="token string">"kkdf"</span><span class="token punctuation">,</span> <span class="token string">"ndf"</span><span class="token punctuation">,</span> <span class="token string">"bcdf"</span><span class="token punctuation">,</span> <span class="token string">"dfd"</span><span class="token punctuation">,</span> <span class="token string">"cdf"</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sort</span><span class="token punctuation">(</span>strArr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> chineseArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"武汉"</span><span class="token punctuation">,</span> <span class="token string">"郑州"</span><span class="token punctuation">,</span> <span class="token string">"太原"</span><span class="token punctuation">,</span> <span class="token string">"济南"</span><span class="token punctuation">,</span> <span class="token string">"沈阳"</span><span class="token punctuation">,</span> <span class="token string">"大连"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sort</span><span class="token punctuation">(</span>chineseArr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>5. 字符串自排序 +中文+英文、数字数组 + 数组内部字符串自排序</strong> </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// var pattern1 = /[\u4e00-\u9fa5]+/g;</span><span class="token comment">// 英文、数字数组排序  </span><span class="token keyword">function</span> quickSort<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>arr<span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> arr <span class="token punctuation">}</span>  <span class="token keyword">var</span> <span class="token literal-property property">left</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> <span class="token literal-property property">right</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> mid <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"mid:"</span><span class="token punctuation">,</span> mid<span class="token punctuation">)</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>      left<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      right<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>mid<span class="token punctuation">,</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//   中文排序</span><span class="token keyword">function</span> sortChinese<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>arr<span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token comment">//Array&lt;T&gt;=T[]</span>  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">firstnum<span class="token punctuation">,</span> secondnum</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>firstnum <span class="token keyword">as</span> any<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">localeCompare</span><span class="token punctuation">(</span>secondnum<span class="token punctuation">,</span> <span class="token string">"zh-CN"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 判断数组中是否有中文元素</span><span class="token keyword">function</span> isChinese<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>arr<span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> boolean <span class="token punctuation">{</span>  <span class="token keyword">var</span> pattern1 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\u4e00-\u9fa5]+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> pattern1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>item <span class="token keyword">as</span> any<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 慕课网 TS 高级课程</span><span class="token comment">// 中文+英文、数字数组排序混合方法  </span><span class="token keyword">function</span> sort<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>data<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token literal-property property">count</span><span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> string <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> data <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果是字符串</span>    <span class="token keyword">return</span> <span class="token function">strSelfSort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token comment">// 按照字符串自排序</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果data是数组</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isChinese</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果是中文数组</span>      <span class="token keyword">return</span> <span class="token function">sortChinese</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> newArr <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">typeof</span> item <span class="token operator">===</span> <span class="token string">"string"</span> <span class="token operator">?</span> <span class="token function">strSelfSort</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">:</span> item    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">//英文、数字数组排序</span>    <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>newArr <span class="token keyword">as</span> any<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// (2). 字符串自排序</span><span class="token keyword">function</span> <span class="token function">strSelfSort</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">str</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">count</span><span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">5</span></span><span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">{</span>  <span class="token comment">// (1) 字符串拆分成数组</span>  <span class="token keyword">let</span> strArray <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// (2) 数组进行使用快速排序算法来排序</span>  <span class="token keyword">let</span> strSortArray <span class="token operator">=</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>strArray<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// (3) 重新把排好序的数组连接成一个字符串返回</span>  <span class="token keyword">let</span> strResult <span class="token operator">=</span> strSortArray<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> strResult<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">10</span> <span class="token operator">?</span> strResult<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"..."</span> <span class="token operator">:</span> strResult<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"bdfaerafdfsd"</span><span class="token keyword">let</span> strResult <span class="token operator">=</span> <span class="token function">sort</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token keyword">as</span> stringconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"长度为:"</span><span class="token punctuation">,</span> strResult<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token string">"字符串"</span><span class="token punctuation">,</span> strResult<span class="token punctuation">)</span><span class="token keyword">var</span> numArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1.883332</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sort</span><span class="token punctuation">(</span>numArr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//sort(numArr)</span><span class="token comment">//let result=sort(numArr);</span><span class="token keyword">let</span> <span class="token literal-property property">strArr</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"cba"</span><span class="token punctuation">,</span> <span class="token string">"kkdf"</span><span class="token punctuation">,</span> <span class="token string">"ndf"</span><span class="token punctuation">,</span> <span class="token string">"bcdf"</span><span class="token punctuation">,</span> <span class="token string">"dfd"</span><span class="token punctuation">,</span> <span class="token string">"cdf"</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sort</span><span class="token punctuation">(</span>strArr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> chineseArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"武汉"</span><span class="token punctuation">,</span> <span class="token string">"郑州"</span><span class="token punctuation">,</span> <span class="token string">"太原"</span><span class="token punctuation">,</span> <span class="token string">"济南"</span><span class="token punctuation">,</span> <span class="token string">"沈阳"</span><span class="token punctuation">,</span> <span class="token string">"大连"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sort</span><span class="token punctuation">(</span>chineseArr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>4-3  【泛型函数重载】泛型函数重载重构自排序丶多种数据类型丶中文排序 【彻底理解泛型函数重载带来的优势】</strong>  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// var pattern1 = /[\u4e00-\u9fa5]+/g;</span><span class="token comment">// 英文、数字数组排序  </span><span class="token keyword">function</span> quickSort<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>arr<span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> arr <span class="token punctuation">}</span>  <span class="token keyword">var</span> <span class="token literal-property property">left</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> <span class="token literal-property property">right</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> mid <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"mid:"</span><span class="token punctuation">,</span> mid<span class="token punctuation">)</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>      left<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      right<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>mid<span class="token punctuation">,</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//   中文排序</span><span class="token keyword">function</span> sortChinese<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>arr<span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token comment">//Array&lt;T&gt;=T[]</span>  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">firstnum<span class="token punctuation">,</span> secondnum</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>firstnum <span class="token keyword">as</span> any<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">localeCompare</span><span class="token punctuation">(</span>secondnum<span class="token punctuation">,</span> <span class="token string">"zh-CN"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 判断数组中是否有中文元素</span><span class="token keyword">function</span> isChinese<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>arr<span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> boolean <span class="token punctuation">{</span>  <span class="token keyword">var</span> pattern1 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\u4e00-\u9fa5]+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> pattern1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>item <span class="token keyword">as</span> any<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 慕课网 TS 高级课程</span><span class="token comment">// 泛型函数重载</span><span class="token comment">// 中文+英文、数字数组排序混合方法  </span><span class="token comment">// 分工明确</span><span class="token comment">//function sort(data: string, count?: number): string[可有可无]</span><span class="token keyword">function</span> sort<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>data<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> count<span class="token operator">?</span><span class="token operator">:</span> number<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token comment">//分工明确</span><span class="token keyword">function</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">data</span><span class="token operator">:</span> any<span class="token punctuation">,</span> <span class="token literal-property property">count</span><span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">5</span></span><span class="token punctuation">)</span><span class="token operator">:</span> any <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> data <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果是字符串</span>    <span class="token keyword">return</span> <span class="token function">strSelfSort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token comment">// 按照字符串自排序</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果data是数组</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isChinese</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果是中文数组</span>      <span class="token keyword">return</span> <span class="token function">sortChinese</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> newArr <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">typeof</span> item <span class="token operator">===</span> <span class="token string">"string"</span> <span class="token operator">?</span> <span class="token function">strSelfSort</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">:</span> item    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">//英文、数字数组排序</span>    <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>newArr <span class="token keyword">as</span> any<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//// (2). 字符串自排序</span><span class="token keyword">function</span> <span class="token function">strSelfSort</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">str</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">count</span><span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">5</span></span><span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">{</span>  <span class="token comment">// (1) 字符串拆分成数组</span>  <span class="token keyword">let</span> strArray <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// (2) 数组进行使用快速排序算法来排序</span>  <span class="token keyword">let</span> strSortArray <span class="token operator">=</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>strArray<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// (3) 重新把排好序的数组连接成一个字符串返回</span>  <span class="token keyword">let</span> strResult <span class="token operator">=</span> strSortArray<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> strResult<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">10</span> <span class="token operator">?</span> strResult<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"..."</span> <span class="token operator">:</span> strResult<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"bdfaerafdfsd"</span><span class="token keyword">let</span> strResult <span class="token operator">=</span> <span class="token function">sort</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"长度为:"</span><span class="token punctuation">,</span> strResult<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token string">"字符串"</span><span class="token punctuation">,</span> strResult<span class="token punctuation">)</span><span class="token keyword">var</span> numArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1.883332</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sort</span><span class="token punctuation">(</span>numArr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//sort(numArr)</span><span class="token keyword">let</span> result <span class="token operator">=</span> sort<span class="token operator">&lt;</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>numArr<span class="token punctuation">)</span>result<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">let</span> <span class="token literal-property property">strArr</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"cba"</span><span class="token punctuation">,</span> <span class="token string">"kkdf"</span><span class="token punctuation">,</span> <span class="token string">"ndf"</span><span class="token punctuation">,</span> <span class="token string">"bcdf"</span><span class="token punctuation">,</span> <span class="token string">"dfd"</span><span class="token punctuation">,</span> <span class="token string">"cdf"</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sort</span><span class="token punctuation">(</span>strArr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> chineseArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"武汉"</span><span class="token punctuation">,</span> <span class="token string">"郑州"</span><span class="token punctuation">,</span> <span class="token string">"太原"</span><span class="token punctuation">,</span> <span class="token string">"济南"</span><span class="token punctuation">,</span> <span class="token string">"沈阳"</span><span class="token punctuation">,</span> <span class="token string">"大连"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sort</span><span class="token punctuation">(</span>chineseArr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>慕课网 TS 高级课程</strong></p><h4 id="4-4-【泛型函数重载】-结合-Vue3-源码深度掌握泛型函数重载"><a href="#4-4-【泛型函数重载】-结合-Vue3-源码深度掌握泛型函数重载" class="headerlink" title="4-4 【泛型函数重载】 结合 Vue3 源码深度掌握泛型函数重载"></a><strong>4-4 【泛型函数重载】 结合 Vue3 源码深度掌握泛型函数重载</strong></h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> ref<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">object</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> ToRef<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token keyword">export</span> <span class="token keyword">function</span> ref<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> Ref<span class="token operator">&lt;</span>UnwrapRef<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span><span class="token keyword">export</span> <span class="token keyword">function</span> ref<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> any<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token operator">?</span><span class="token operator">:</span> unknown</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">createRef</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>慕课网 TS 高级课程</p><h4 id="4-5-泛型工厂函数——深入泛型工厂函数-泛型工厂函数的深度应用"><a href="#4-5-泛型工厂函数——深入泛型工厂函数-泛型工厂函数的深度应用" class="headerlink" title="4-5   泛型工厂函数——深入泛型工厂函数+泛型工厂函数的深度应用"></a>4-5   泛型工厂函数——深入泛型工厂函数+泛型工厂函数的深度应用</h4><p>泛型工厂函数课程安排   </p><ol><li><p>准备 相关定义+【函数类型复习】</p></li><li><p>理解泛型工厂函数类型    </p><p>通用函数类型–&gt;工厂函数类型–&gt;泛型工厂函数类型       </p></li><li><p>构建泛型工厂函数</p></li><li><p>泛型工厂函数深度应用 —原型+泛型工厂函数联合使用</p></li></ol><p><strong>工厂函数类型定义：代表任意一个类的构造函数【等价JS的构造函数】的函数类型</strong>。</p><p><strong>泛型工厂函数定义</strong>：一个可以创建任意类对象的通用泛型函数</p><p>泛型工厂函数应用场景： 使用场景1：在一些不方便或者没有办法直接 new  类名（）格式来创建对象，例如：后面讲解的装饰器中就多次用到。 使用场景2：在一些项目测试或者调试中简化代码使用。</p><p>通过工厂函数的学习，既可以加深对泛型函数的理解；同时也可以扩大技术视野，提升代码整合能力；还为一些优秀前端技术打下更雄厚的技术根基【例如：为理解装饰器中各种复杂代码打下技术根基】。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">type <span class="token function-variable function">promiseFuncType</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> any<span class="token keyword">class</span> <span class="token class-name">ShopCartService</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token literal-property property">productname</span><span class="token operator">:</span> string<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token literal-property property">count</span><span class="token operator">:</span> number<span class="token punctuation">;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span>  <span class="token function">addShopCart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"增加商品:"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>productname <span class="token operator">+</span> <span class="token string">":数量:"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Promise</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span>  <span class="token punctuation">}</span>  <span class="token keyword">static</span> <span class="token function">Promise</span><span class="token punctuation">(</span>promiseFunc2<span class="token operator">:</span> promiseFuncType<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>    <span class="token function">promiseFunc2</span><span class="token punctuation">(</span><span class="token string">"sucess"</span><span class="token punctuation">,</span> <span class="token string">"fail"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//return this</span>  <span class="token punctuation">}</span>  <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"buy"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">static</span> <span class="token function">ShowResult</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">promiseFunc3</span><span class="token operator">:</span> promiseFuncType<span class="token punctuation">,</span> <span class="token literal-property property">errorCode</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> shopCartService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShopCartService</span><span class="token punctuation">(</span><span class="token punctuation">)</span>shopCartService<span class="token punctuation">.</span>productname <span class="token operator">=</span> <span class="token string">"牙膏"</span>shopCartService<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">70</span><span class="token comment">// 泛型工厂函数类型constructorFuncType</span>type constructorFuncType<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> any<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token comment">// 构建泛型工厂函数写法1：参数类型为type定义的构造函数类型</span><span class="token keyword">function</span> createInstanceFactory<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>promiseFunc2<span class="token operator">:</span> constructorFuncType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">promiseFunc2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">let</span> promise <span class="token operator">=</span> createInstanceFactory<span class="token operator">&lt;</span>Promise<span class="token operator">&gt;</span><span class="token punctuation">(</span>Promise<span class="token punctuation">)</span><span class="token punctuation">;</span>promise<span class="token punctuation">.</span><span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> shopCartService2 <span class="token operator">=</span> createInstanceFactory<span class="token operator">&lt;</span>ShopCartService<span class="token operator">&gt;</span><span class="token punctuation">(</span>ShopCartService<span class="token punctuation">)</span><span class="token punctuation">;</span>shopCartService2<span class="token punctuation">.</span><span class="token function">addShopCart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 构建泛型工厂函数写法2：参数类型为接口式的构造函数类型</span><span class="token keyword">interface</span> <span class="token class-name">constructorFuncinterface</span><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> any<span class="token operator">&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">}</span><span class="token comment">//function createInstanceFactory2&lt;T&gt;</span><span class="token comment">//(promiseFunc2: { new(...args: any[]): T }): T {</span><span class="token keyword">function</span> createInstanceFactory2<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>  <span class="token punctuation">(</span>promiseFunc2<span class="token operator">:</span> constructorFuncinterface<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">promiseFunc2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">let</span> promise2 <span class="token operator">=</span> createInstanceFactory<span class="token operator">&lt;</span>Promise<span class="token operator">&gt;</span><span class="token punctuation">(</span>Promise<span class="token punctuation">)</span><span class="token punctuation">;</span>promise2<span class="token punctuation">.</span><span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 构建泛型工厂函数写法3:参数类型为直接写出来的构造函数类型</span><span class="token keyword">function</span> createInstanceFactory3<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>  <span class="token punctuation">(</span>promiseFunc2<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">promiseFunc2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">let</span> promise3 <span class="token operator">=</span> createInstanceFactory<span class="token operator">&lt;</span>Promise<span class="token operator">&gt;</span><span class="token punctuation">(</span>Promise<span class="token punctuation">)</span><span class="token punctuation">;</span>promise3<span class="token punctuation">.</span><span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>慕课网 TS 高级课程</strong></p><h4 id="4-6-【-TS-交叉类型】理解交叉类型和深入分析交叉类型的应用场景"><a href="#4-6-【-TS-交叉类型】理解交叉类型和深入分析交叉类型的应用场景" class="headerlink" title="4-6 【 TS 交叉类型】理解交叉类型和深入分析交叉类型的应用场景"></a><strong>4-6 【 TS 交叉类型】理解交叉类型和深入分析交叉类型的应用场景</strong></h4><p><strong>4-6 课程安排</strong>  </p><p><strong>1 交叉类型定义丶和联合类型区别</strong></p><p><strong>2 交叉类型的应用场景概述</strong></p><p><strong>3 举例展现如何使用交叉类型，体验交叉类型好处。</strong></p><p><strong>定义</strong>：将多个类型合并【多个类型属性和方法的并集】成的类型就是交叉类型。</p><p><strong>和联合类型区别</strong>：</p><p><strong>赋值区别</strong>：</p><p><strong>对于对象类型合成</strong>的交叉类型是多个类型属性和方法的合并后的类型，属于多个类型的并集，必须是两个类型的全部属性和方法才能赋值给交叉类型变量。【可选属性和方法除外】</p><p><strong>对于对象类型合成</strong>的联合类型变量可以接受联合类型中任意一种数据类型全部属性和方法，也可以是两个类型的全部属性和全部方法【可选属性和方法除外】，也可以是一种数据类型全部属性和方法+其他类型的某个属性和某个方法。</p><p><strong>获取属性和方法区别：</strong></p><p>交叉类型变量可以获取两个类型的任意属性和任意方法，而联合类型的变量只能获取两个类型的共同属性和方法【交集属性和交集方法】</p><p><strong>交叉类型应用场景</strong>  </p><p> 通常用于多个对象合并的场景。比如：我们把用户信息，用户角色信息合并成一个对象然后输出。当然后端可以通过连接查询的 SQL 语句来完成到前端的多对象输出，但大多需要表的外键来支持，比如用户和角色就需要角色表有用户外键，对于现实生活中有必须关联在一起的实体【比如商品和库存信息】一般建议数据表用外键来支持前端多个对象的合并输出，虽然影响了效率，但也保证了表的数据合理性和完整性。</p><p>但如果我们临时需要随机把两个根本没有外键关联的数据表取出来的对象合并在一起输出，比如用户信息和日志信息，商品信息和日志信息，订单信息和日志信息，我们就可以用交叉类型来完成。因为我们不可能为了这个临时的对象合并需求把所有的这些表都建立起外键，须知外键太多不仅增加了数据表维护的负担，而且也有较大的影响了表操作效率。</p><p>可能没有数据表基础的同学不太理解，效率低到哪了呢？比如添加一个用户，必然要添加日志 id 【外键】信息，那就要判断这个日志 id 是否在日志表中是否存在，这就是需要时间，当用户访问量大时，某个时刻都要完成添加操作【高并发操作】，这个外键时间检查损耗就比较严重，尽管我们通过各种 SQL 优化来提高 SQL 效率, 【就像一个拖着一辆大卡车【 A 表】的大货车【 B 表】，无论如何调优，也不比空跑的大货车快】</p><p><strong>所以综上所述：交叉类型的应用场景1：可应用这些没有关联的对象合并上，因为这样会极大的方便前端页面的输出。合并如同打包，比单一的一个一个的筛选输出要方便很多，整体感要好很多。</strong></p><p><strong>交叉类型的应用场景2</strong>： <strong>一些 UI 库底层如果用到多个密切连接在一起的关联类型时，可以使用交叉类型来合并输出。</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 如何合并输出下面3个接口类型的对象？使用交车类型最合适。</span><span class="token keyword">interface</span> <span class="token class-name">Button</span> <span class="token punctuation">{</span>  <span class="token literal-property property">type</span><span class="token operator">:</span> string  <span class="token literal-property property">text</span><span class="token operator">:</span> string<span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Link</span> <span class="token punctuation">{</span>  <span class="token literal-property property">alt</span><span class="token operator">:</span> string  <span class="token literal-property property">href</span><span class="token operator">:</span> string<span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Href</span> <span class="token punctuation">{</span>  <span class="token literal-property property">linktype</span><span class="token operator">:</span> string  <span class="token literal-property property">target</span><span class="token operator">:</span> Openlocation<span class="token punctuation">}</span><span class="token keyword">enum</span> Openlocation <span class="token punctuation">{</span>  self <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>  _blank<span class="token punctuation">,</span>  parent<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>慕课网 TS 高级课程</strong></p><h4 id="4-7-【泛型函数-交叉类型-类型断言-枚举】-深度理解泛型函数-交叉类型综合应用"><a href="#4-7-【泛型函数-交叉类型-类型断言-枚举】-深度理解泛型函数-交叉类型综合应用" class="headerlink" title="4-7 【泛型函数+交叉类型+类型断言+枚举】 深度理解泛型函数+交叉类型综合应用"></a><strong>4-7 【泛型函数+交叉类型+类型断言+枚举】 深度理解泛型函数+交叉类型综合应用</strong></h4><p>泛型函数+ TS 交叉类型 代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> cross<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">object</span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name">object</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>objOne<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token literal-property property">objTwo</span><span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">&amp;</span> <span class="token constant">U</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">let</span> combine <span class="token operator">=</span> obj <span class="token keyword">as</span> <span class="token constant">T</span> <span class="token operator">&amp;</span> <span class="token constant">U</span>  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>objOne<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    combine<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> objOne<span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>objTwo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>combine<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      combine<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> objTwo<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> combine<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>慕课网 TS 高级课程</strong></p><h4 id="4-7后-彩蛋：【泛型函数重载-交叉类型-类型断言】-再度加深掌握交叉类型的综合应用【更上一层楼】"><a href="#4-7后-彩蛋：【泛型函数重载-交叉类型-类型断言】-再度加深掌握交叉类型的综合应用【更上一层楼】" class="headerlink" title="4-7后 彩蛋：【泛型函数重载+交叉类型+类型断言】 再度加深掌握交叉类型的综合应用【更上一层楼】"></a>4-7后 彩蛋：【泛型函数重载+交叉类型+类型断言】 再度加深掌握交叉类型的综合应用【更上一层楼】</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> cross<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">object</span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name">object</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>objOne<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token literal-property property">objTwo</span><span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">&amp;</span> <span class="token constant">U</span><span class="token keyword">function</span> cross<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">object</span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name">object</span><span class="token punctuation">,</span> <span class="token constant">V</span> <span class="token keyword">extends</span> <span class="token class-name">object</span><span class="token operator">&gt;</span>  <span class="token punctuation">(</span>objOne<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token literal-property property">objTwo</span><span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">,</span> <span class="token literal-property property">objThree</span><span class="token operator">:</span> <span class="token constant">V</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">&amp;</span> <span class="token constant">U</span> <span class="token operator">&amp;</span> <span class="token constant">V</span><span class="token keyword">function</span> cross<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">object</span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name">object</span><span class="token punctuation">,</span> <span class="token constant">V</span> <span class="token keyword">extends</span> <span class="token class-name">object</span><span class="token operator">&gt;</span>  <span class="token punctuation">(</span>objOne<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token literal-property property">objTwo</span><span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">,</span> objThree<span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">V</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">let</span> combine <span class="token operator">=</span> obj <span class="token keyword">as</span> <span class="token constant">T</span> <span class="token operator">&amp;</span> <span class="token constant">U</span>  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>objOne<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    combine<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> objOne<span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>objTwo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>combine<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      combine<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> objTwo<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>objThree<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果有第三个对象传递进来实现交叉</span>    <span class="token comment">//let obj = {}</span>    <span class="token comment">//let combine2 = obj as T &amp; U &amp; V</span>    <span class="token comment">//let combine2=combine as T &amp; U &amp; V</span>    <span class="token keyword">let</span> combine2 <span class="token operator">=</span> combine <span class="token keyword">as</span> <span class="token keyword">typeof</span> combine <span class="token operator">&amp;</span> <span class="token constant">V</span>    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>objThree<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>combine2<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        combine2<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> objThree<span class="token punctuation">[</span>key<span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> combine2<span class="token comment">// 三个对象交叉结果</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> combine<span class="token punctuation">;</span><span class="token comment">// 两个对象交叉结果</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>泛型类+泛型接口+泛型类约束的复杂应用</title>
      <link href="/2022/05/11/fan-xing-lei-fan-xing-jie-kou-fan-xing-lei-yue-shu-de-fu-za-ying-yong/"/>
      <url>/2022/05/11/fan-xing-lei-fan-xing-jie-kou-fan-xing-lei-yue-shu-de-fu-za-ying-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="泛型类-泛型接口-泛型类约束的复杂应用"><a href="#泛型类-泛型接口-泛型类约束的复杂应用" class="headerlink" title="泛型类+泛型接口+泛型类约束的复杂应用"></a>泛型类+泛型接口+泛型类约束的复杂应用</h2><h3 id="3-1-泛型类准备"><a href="#3-1-泛型类准备" class="headerlink" title="3.1 泛型类准备"></a>3.1 泛型类准备</h3><ul><li><p>为什么要用泛型类【好处】  </p><p> 可以看看之前提到的<code>ArrayList</code>的实现方式</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">ArrayList</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> element<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>object<span class="token operator">&gt;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>element <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> index<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">public</span> <span class="token function">add</span><span class="token punctuation">(</span>obj<span class="token operator">:</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> obj  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">checkIndex</span><span class="token punctuation">(</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'index must bigger than 0'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">get</span><span class="token punctuation">(</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">[</span>index<span class="token punctuation">]</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">'lisi'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token keyword">let</span> obj3 <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">'liuwu'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token keyword">let</span> arrayListOne <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>arrayListOne<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span>arrayListOne<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrayListOne<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>arrayListOne<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://gitee.com/zhangbing520/images/raw/master/img/202205102044752.png" alt="image-20220510204450660" style="zoom:100%;"></li></ul><p>​但上述的实现方式有一些缺点，现在的实现方式将数组元素规定为 <code>object</code>，当需求变更，需要变为<code>string</code>时，则需要将上述代码所有的<code>object</code>改为<code>string</code>，这样的处理方式实际上是有很大的不方便之处，而<strong>泛型</strong>的出现可以效解决上述问题。</p><h3 id="3-2-泛型类定义、格式"><a href="#3-2-泛型类定义、格式" class="headerlink" title="3.2 泛型类定义、格式"></a>3.2 泛型类定义、格式</h3><ul><li><h4 id="泛型定义"><a href="#泛型定义" class="headerlink" title="泛型定义"></a>泛型定义</h4></li></ul><p>​泛型：一种参数化的数据类型，具有以下的特点：</p><p>​1. 定义时不明确，使用时必须明确成某种具体数据类型的数据类型</p><p>​2. 编译期间进行数据类型安全检查的数据类型</p><blockquote><p><code>特别注意</code>：</p><pre><code> 1. 类型安全检查发生在**编译期间** 2. 泛型是参数化的数据类型，使用时明确化后的数据类型就是参数的值</code></pre></blockquote><ul><li><h4 id="泛型格式"><a href="#泛型格式" class="headerlink" title="泛型格式"></a>泛型格式</h4><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">类名<span class="token operator">&lt;</span>泛型形参类型<span class="token operator">&gt;</span></span>泛型形参类型必须是<span class="token constant">A</span><span class="token operator">-</span><span class="token constant">Z</span>任何一个字母，如下：<span class="token keyword">class</span> <span class="token class-name">ArrayList<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span><span class="token punctuation">{</span>array<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token function">add</span><span class="token punctuation">(</span>data<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>    <span class="token operator">...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>使用泛型改写ArrayList： </p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">ArrayList<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> element<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>element <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> index<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">public</span> <span class="token function">add</span><span class="token punctuation">(</span>obj<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> obj  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">checkIndex</span><span class="token punctuation">(</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'index must bigger than 0'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">get</span><span class="token punctuation">(</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">[</span>index<span class="token punctuation">]</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment">// 函数重载</span>  <span class="token keyword">public</span> <span class="token function">remove</span><span class="token punctuation">(</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span>  <span class="token keyword">public</span> <span class="token function">remove</span><span class="token punctuation">(</span>obj<span class="token operator">:</span> object<span class="token punctuation">)</span><span class="token operator">:</span> object  <span class="token keyword">public</span> <span class="token function">remove</span><span class="token punctuation">(</span>removeIndexOrItem<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> removeIndexOrItem <span class="token operator">===</span> <span class="token string">'number'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>element <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> removeIndexOrItem <span class="token operator">!==</span> index<span class="token punctuation">)</span>      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'this.element:'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>element <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>item <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name <span class="token operator">!==</span> removeIndexOrItem<span class="token punctuation">.</span>name<span class="token punctuation">)</span>      <span class="token keyword">return</span> removeIndexOrItem    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">type</span> <span class="token class-name">Myobj</span> <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">}</span><span class="token keyword">let</span> obj1<span class="token operator">:</span> Myobj <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token keyword">let</span> obj2<span class="token operator">:</span> Myobj <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">'lisi'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token comment">// let arrayListOne = new ArrayList&lt;object&gt;()</span><span class="token keyword">let</span> arrayListOne <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList<span class="token operator">&lt;</span><span class="token keyword">typeof</span> obj1<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>arrayListOne<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span>arrayListOne<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrayListOne<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrayListOne<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">)</span>arrayListOne<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​</p><h3 id="3-3-TS-泛型类：object-为什么不能替代类上的泛型"><a href="#3-3-TS-泛型类：object-为什么不能替代类上的泛型" class="headerlink" title="3.3 TS 泛型类：object 为什么不能替代类上的泛型"></a>3.3 TS 泛型类：object 为什么不能替代类上的泛型</h3><ul><li><p>原因一：编译期间 object 无法进行类型安全检查，而泛型在编译期间可以进行类型安全检查</p><p>Object 接受也只能接受所有的 object 类型的变量，比如 Customer，Student，Dog 类的实例都是对象类型，或者自己定义的对象，都可以传递给  object 类型的方法参数或属性，但如果我们只希望添加 Customer 的对象，当添加其他类的对象要求必须出现编译错误，但是 object 无法做到，就只能用泛型了。</p></li></ul><ul><li><p>原因二：object 类型数据无法接受非 object 类型的变量，只能接受 object 类型的变量，泛型能轻松做到</p><p>正因为 object 接受也只能接受所有的 object 类型的变量，那么如果有一个集合【数组封装类】有一个 add 方法，允许每次添加指定类型的变量到 add 方法的参数，比如，我们第一轮是希望添加 10 次字符串类型的变量，第二轮希望添加 10 次整数类型变量，第三轮希望添加 10 次 Customer 类型的变量，泛型能轻松做到。object 类型数据无法接受任意非 object 类型的变量</p></li><li><p>原因三：object 类型数据获取属性和方法时无法自动提示</p><p>一种泛型类型被具体化成某种数据类型后，该数据类型的变量获取属性和方法时会自动提示，提高代码开发效率和减少出错，但在 object 类型的变量无法获取数据类型的属性和方法，降低了体验感和开发效率。</p></li></ul><blockquote><p>注：object 和 Object 的区别</p><p>​1. Object范围较广，number 也是 Object 的子类</p><p>​2. 属性和方法：Object可以点出来</p></blockquote><img src="https://gitee.com/zhangbing520/images/raw/master/img/202205110052773.png" alt="image-20220511005225717" style="zoom:60%;">]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + Github 搭建博客</title>
      <link href="/2022/05/10/shi-yong-hexo-da-jian-bo-ke-liu-cheng/"/>
      <url>/2022/05/10/shi-yong-hexo-da-jian-bo-ke-liu-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="使用hexo搭建博客流程"><a href="#使用hexo搭建博客流程" class="headerlink" title="使用hexo搭建博客流程"></a>使用hexo搭建博客流程</h2><h3 id="1-基础搭建"><a href="#1-基础搭建" class="headerlink" title="1. 基础搭建"></a>1. 基础搭建</h3><ol><li><p>下载Node（包括node npm）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">node</span> -v<span class="token function">npm</span> -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><span id="more"></span>   <ol start="2"><li><p>切换到主页</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">su</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>安装cnpm</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g cnpm --registry<span class="token operator">=</span>https://registry.npm.taobao.orgcnpm -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>安装hexo</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cnpm <span class="token function">install</span> -g hexo-clihexo -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>建立博客文件夹</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> blog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>切换目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> blog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用hexo生成博客</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> hexo init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>启动博客</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>本地可以预览博客</p></li><li><p>新建一篇文章</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo n <span class="token string">"我的第一篇博客文章"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>修改文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> source/_posts<span class="token function">vi</span> <span class="token string">"我的我的第一篇博客文章.md"</span><span class="token comment"># 修改文件后保存退出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>切换回主页到blog文件夹</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>hexo clean</p></li><li><p>hexo g (生成)</p></li><li><p>启动：hexo s</p></li><li><p>本地可以预览效果</p></li></ol><h3 id="2-博客部署到Github"><a href="#2-博客部署到Github" class="headerlink" title="2. 博客部署到Github"></a>2. 博客部署到Github</h3><ol><li><p>创建Github仓库（已配置ssh keys）</p><img src="https://gitee.com/zhangbing520/images/raw/master/img/202205092351356.png" alt="image-20220509235119241" style="zoom:50%;"></li><li><p>配置token</p><p>github： settings-&gt;Developer settings-&gt;personnal access tokens-&gt;Generate new token</p></li><li><p>上一步生成的token要记得,mac 聚焦搜索 <code>keychain access</code>进入钥匙串，然后搜索github：</p><img src="https://gitee.com/zhangbing520/images/raw/master/img/202205092355461.png" alt="image-20220509235554422" style="zoom:50%;"></li></ol><p>​点击修改密码为生成的token，保存退出。</p><ol start="4"><li><p>在 blog文件加下安装git插件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cnpm <span class="token function">install</span> --save hexo-deployer-git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>设置<code>_config.yml</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> _config.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">deploy:  type: <span class="token function">git</span>  repo: https://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@github.com/zhangbing520/zhangbing520.github.io.git  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>部署到远端</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>代码会自动推送到远端</p></li><li><p>如果没有推成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote <span class="token function">add</span> origin https://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@github.com/zhangbing520/zhangbing520.github.io.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>访问博客：<a href="https://zhangbing520.github.io/">博客地址</a></p></li></ol><h3 id="3-修改主题"><a href="#3-修改主题" class="headerlink" title="3. 修改主题"></a>3. 修改主题</h3><ol><li><p>切换到blog文件夹</p></li><li><p>git clone 主题git地址 themes/主题名称</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https:// themes/yilia<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>配置 <code>_config.yml</code>中的 <code>theme: yilia</code></p></li><li><p>Hexo clean</p></li><li><p>生成静态文件：hexo g</p></li><li><p>启动：hexo s (预览)</p></li><li><p>部署：hexo d</p></li><li><p>等推上去后需要等待一下，之后可以看到最新的页面</p></li></ol><h3 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h3><p><a href="https://www.bilibili.com/video/BV1Yb411a7ty?spm_id_from=333.1007.top_right_bar_window_history.content.click">codesheep b站视频</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
