<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>React实战</title>
      <link href="/2022/05/10/react-shi-zhan/"/>
      <url>/2022/05/10/react-shi-zhan/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript-继承总结"><a href="#TypeScript-继承总结" class="headerlink" title="TypeScript 继承总结"></a>TypeScript 继承总结</h1><hr><h4 id="2-20-前端深度掌握TS继承的重要丶长远意义"><a href="#2-20-前端深度掌握TS继承的重要丶长远意义" class="headerlink" title="2-20    前端深度掌握TS继承的重要丶长远意义"></a>2-20    前端深度掌握TS继承的重要丶长远意义</h4><h5 id="练就-更深厚的-JS-原型，原型链功底"><a href="#练就-更深厚的-JS-原型，原型链功底" class="headerlink" title="练就 更深厚的 JS 原型，原型链功底"></a>练就 更深厚的 JS 原型，原型链功底</h5><p>TS编译后的JS中有经典的JS原型和原型链的源码实现，虽然稍显复杂，但源码并不长，这将是 练就 更深厚的 JS 原型，原型链功底的绝佳场景。通过这几次课的认真磨练，大家将拥有更深厚的 JS 原型，原型链功底【当然你必须认真看完，多练方可】。这不仅让你日后面试大受益，而且也为你能阅读Vue3,React 源码或其他流行框架源码铺路，因为不管是那种源码，JS原型链继承一定会用到，再加上你的TS功底，那么这些都成让你日后前端之路走的更远，走的更高！</p><p><strong>提升前端项目架构的根基技术</strong></p><p>如果要你现在用开发一个工具库，组件库，你打算怎么开发 ? 可以写出n多个版本的代码，都可以实现，但版本和版本之间的价值却差别巨大，你可以用 JS 原型写出1年左右工作经验的前端水准的代码，当然，上乘之选肯定是用 TS 来开发，你也可以灵活运用TS继承，多态等多种技术写出高水准的代码。但如果你不具备后端思维能力，就算你工作了5年，你也不一定能有这样的思维，甚至随时有可能被一个拥有了后端思维的只有1到2年工作经验水准的前端工程师超越。</p><p><strong>突破前端技术瓶颈之一的技能</strong>，<strong>晋级中丶高级前端工程师必会技能</strong></p><p>如果你只掌握了单个类的使用，而不知道如何运用继承，那这也是技能缺失，将会限制你日后技术发展的高度，限制你的技术视野，让你的前端变得过于前端化。</p><p>说深度掌握了 TS 继承就能突破所有的前端技术瓶颈，那很显然是夸大其词，但要想突破前端技术瓶颈，深度掌握继承必然是其中一项技能，而且是根基技术之一，可见继承的重要性不言而喻。</p><p>比如一个简单的汽车租赁项目，让你来实现，你把前端功能实现了，展示在页面上了，但是打开你用 TS 写的 Vuex 代码，用 TS 写的 Nodejs 代码，过于前端化的思维让你编写的代码可能让人不堪入目。这里不单单是说用到封装继承，多态，解耦这些技术，更多的是你过于前端化的思维编写的项目可扩展性将非常差，可读性也差，可重用性【复用性】也低，而这些是评判一个项目是否值钱的关键因素。</p><p>如果你希望未来职业生涯拥有更广阔的技术视野；更远的未来你甚至希望自己能胜任技术总监，那么你就一定从一个更广阔的技术视野来提升自己的技术能力，不能让自己被框在过于前端化的路上。</p><p>虽然老师不能三言两语给同学们描述出什么才叫完全突破前端瓶颈，但有一点是可以肯定的，就是要有一定的后端思维能力，这里当然不是要拥有 Java 后端能力，而是起码具备 Nodejs 后端的项目架构能力，Nodejs 可以前端工程师提升晋级一定要掌握的技能。而深度掌握了 TS 继承已经为突破前端技术瓶颈开了一个好头。</p><h4 id="2-21-深度掌握TS继承准备：原型链继承-常见疑问-容易被遗忘的重要一步"><a href="#2-21-深度掌握TS继承准备：原型链继承-常见疑问-容易被遗忘的重要一步" class="headerlink" title="2-21   深度掌握TS继承准备：原型链继承+常见疑问+容易被遗忘的重要一步"></a>2-21   深度掌握TS继承准备：原型链继承+常见疑问+<strong>容易被遗忘的重要一步</strong></h4><h5 id="（1）原型链继承实现原理："><a href="#（1）原型链继承实现原理：" class="headerlink" title="（1）原型链继承实现原理："></a>（1）原型链继承实现原理：</h5><p><strong>说明：Parent 类是【父构造函数】 Son 类是【子构造函数】</strong></p><p>原型链继承基本思想就是Son 类的原型对象属性【 Son.prototype 】指向 new  Parent( )。即 </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name       <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age   <span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Son</span><span class="token punctuation">(</span><span class="token parameter">favor<span class="token punctuation">,</span>sex</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>favor<span class="token operator">=</span>favor <span class="token comment">// 兴趣爱好</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token operator">=</span>sex   <span class="token punctuation">}</span><span class="token class-name">Son</span><span class="token punctuation">.</span>prototype<span class="token operator">=</span><span class="token keyword">new</span>  <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token string">"好好的"</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span> <span class="token comment">// 98</span><span class="token keyword">let</span> sonObj<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token string">"篮球"</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原型链继承实现的本质是改变Son构造函数的原型对象变量的指向【 就是Son.prototype的指向 】，Son.prototype= new  Parent ( )。那么 Son.prototype 可以访问  Parent 对象空间的属性和方法。所以顺着 [<strong>proto</strong> ]属性 ，Son类也可以访问 Parent 类 的原型对象空间中的所有属性和方法。</p><p>原型链继承查找属性和方法的完整路线描述: 子对象首先在自己的对象空间中查找要访问的属性或方法，如果找到，就输出，如果没有找到，就沿着子对象中的__proto__属性指向的原型对象空间中去查找有没有这个属性或方法，如果找到，就输出，如果没有找到，继续沿着原型对象空间中的__proto__查找上一级原型对象空间中的属性或方法，直到找到Object.prototype原型对象属性指向的原型对象空间为止，如果再找不到，就输出null</p><p> <strong>（2）原型链继承实现容易被遗忘的重要一步</strong></p><p>​Son.prototype.constructor = Son</p><p> <strong>（3） 原型链继承常见疑问</strong></p><p>Son.prototype= Parent.prototype 这样作为原型链继承的模式和 <strong>Son.prototype=new  Parent (…)</strong> 又有什么区别呢？</p><p> <strong>（4）原型链继承的不足</strong></p><p>​<strong>局限性：不能通过子类构造函数向父类构造函数传递参数</strong> </p><p><strong>慕课网 TS 高级课程</strong></p><h4 id="2-22-深度掌握-TS-继承准备：借用构造函数（冒充对象继承）"><a href="#2-22-深度掌握-TS-继承准备：借用构造函数（冒充对象继承）" class="headerlink" title="2-22  深度掌握 TS 继承准备：借用构造函数（冒充对象继承）"></a><strong>2-22  深度掌握 TS 继承准备：借用构造函数</strong>（冒充对象继承）</h4><h5 id="（1）借用构造函数继承如何解决原型链继承的局限性"><a href="#（1）借用构造函数继承如何解决原型链继承的局限性" class="headerlink" title="（1）借用构造函数继承如何解决原型链继承的局限性"></a>（1）借用构造函数继承如何解决原型链继承的局限性</h5><p>借用构造函数继承思想就是在子类【  ChinesePeople 构造函数】的内部借助 apply ( ) 和 call ( ) 方法调用并传递参数给父类【  People 构造函数】，在父类构造函数中为当前的子类对象变量【ChinesePeopl对象变量】增加属性【本例中增加了name,</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Parent</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"this:"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"this.name:"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>friends <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"xiaozhang"</span><span class="token punctuation">,</span> <span class="token string">"xiaoli"</span><span class="token punctuation">]</span><span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">eat</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" 吃饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Son</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> favor<span class="token punctuation">,</span> sex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>favor <span class="token operator">=</span> favor <span class="token comment">// 兴趣爱好</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex  <span class="token function">Parent</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token comment">// TS继承中使用super</span><span class="token punctuation">}</span><span class="token keyword">let</span> sonobj2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token string">"lisi"</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token string">"打篮球"</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"sonobj2:"</span><span class="token punctuation">,</span> sonobj2<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"sonobj2.friends:"</span><span class="token punctuation">,</span> sonobj2<span class="token punctuation">.</span>friends<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <strong>（2）借用构造函数继承的不足</strong></p><p>借用构造函数实现了子类构造函数向父类构造函数传递参数，但没有继承父类原型的属性和方法，无法访问父类原型上的属性和方法。</p><p><strong>慕课网 TS 高级课程</strong></p><h4 id="2-23-深度掌握-TS-继承准备：借用构造函数-原型链继承组合模式"><a href="#2-23-深度掌握-TS-继承准备：借用构造函数-原型链继承组合模式" class="headerlink" title="2-23   深度掌握 TS 继承准备：借用构造函数+原型链继承组合模式"></a><strong>2-23   深度掌握 TS 继承准备：借用构造函数+原型链继承组合模式</strong></h4><h5 id="（1）借用构造函数-原型链继承组合模式的优势"><a href="#（1）借用构造函数-原型链继承组合模式的优势" class="headerlink" title="（1）借用构造函数+原型链继承组合模式的优势"></a>（1）借用构造函数+原型链继承组合模式的优势</h5><p><strong>优势1：</strong>具备借用构造函数的优点：子类【 ChinesePeople 构造函数】的内部可以向父类【  People 构造函数】 传递参数</p><p><strong>优势2：</strong>具备原型链继承的优点：ChinesePeople.prototype 和 new ChinesePeople( ) 出来的实例对象变量和实例都可以访问父类【  People 构造函数】 原型对象上的属性和方法。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">People</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>sex<span class="token punctuation">,</span>phone</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">// People父构造函数【看成是一个父类】//=Parent</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span> <span class="token comment">// 实例属性</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token operator">=</span>sex<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>phone<span class="token operator">=</span>phone<span class="token punctuation">}</span><span class="token class-name">People</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">doEat</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"吃饭..."</span><span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">ChinesePeople</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>sex<span class="token punctuation">,</span>phone<span class="token punctuation">,</span>national</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//=SON</span><span class="token function">People</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token punctuation">[</span>name<span class="token punctuation">,</span>sex<span class="token punctuation">,</span>phone<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 借用父构造函数继承</span><span class="token keyword">this</span><span class="token punctuation">.</span>national<span class="token operator">=</span>national<span class="token punctuation">;</span><span class="token comment">// 民族</span><span class="token punctuation">}</span><span class="token class-name">ChinesePeople</span><span class="token punctuation">.</span>prototype<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token string">"wangwu"</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token string">"1111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="（2）借用构造函数-原型链继承组合模式的不足："><a href="#（2）借用构造函数-原型链继承组合模式的不足：" class="headerlink" title="（2）借用构造函数+原型链继承组合模式的不足："></a>（2）借用构造函数+原型链继承组合模式的不足：</h5><p>​  缺点：调用了两次父类构造函数 【 People 构造函数】 new People 调用构造函数带来问题： </p><ol><li><p>进入 People 构造函数为属性赋值，分配内存空间，浪费内存；</p></li><li><p>赋值导致效率下降一些，关键是new People 赋的值无意义，出现代码冗余，new ChinesePeople出来的对象和这些值毫不相干，是通过子类 ChinesePeople 构造函数中的 apply 来向父类People构造函数赋值。</p></li></ol><p><strong>慕课网 TS 高级课程</strong></p><h4 id="2-24-深度掌握-TS-继承准备-多维授课助深度透彻掌握寄生组合继承【实现方法1-优化-】【最佳继承模式】"><a href="#2-24-深度掌握-TS-继承准备-多维授课助深度透彻掌握寄生组合继承【实现方法1-优化-】【最佳继承模式】" class="headerlink" title="2-24    深度掌握 TS 继承准备:  多维授课助深度透彻掌握寄生组合继承【实现方法1+优化 】【最佳继承模式】"></a>2-24    深度掌握 TS 继承准备:  多维授课助深度透彻掌握寄生组合继承【实现方法1+优化 】【最佳继承模式】</h4><p>寄生组合继承模式=借用构造函数继承+寄生继承。</p><p>寄生组合继承既沿袭了借用构造函数+原型链继承两个优势，而且解决了借用构造函数+原型链继承调用了两次父类构造函数为属性赋值的不足。寄生组合继承模式保留了借用构造函数继承，寄生组合继承模式使用寄生继承代替了原型链继承。</p><p>什么是寄生继承呢？就是 ChinesePeople.prototype 不再指向 new  People( ) 出来的对象空间，而用 People 类 【父构造函数】的原型对象属性“克隆”了一个对象。再让ChinesePeople.prototype指向这个新对象，很好的避免了借用构造函数+原型链继承调用了两次父类构造函数为属性赋值的不足。</p><p>具体执行步骤见下面代码。</p><p>解释 S99 行代码：表示创建了一个新对象，相当用  People  类 【父构造函数】的原型对象属性“克隆”了一个对象。</p><p>解释 S100 行代码：让ChinesePeople 原型对象变量指向S99</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">"克隆"</span>对象实现方式代码优化 <span class="token punctuation">[</span> <span class="token constant">TS</span> 继承和装饰器底层继承实现模式<span class="token punctuation">]</span><span class="token keyword">function</span> <span class="token function">createProtoTypeClone</span><span class="token punctuation">(</span><span class="token parameter">prototypeObject</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">Middle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment">// 第四步在新创建的ChinesePeople原型对象空间的Middle实例对象中添加constructor属性</span>  <span class="token comment">// 使其指向子类ChinesePeople构造函数对象空间</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>constructor<span class="token operator">=</span>ChinesePeople<span class="token punctuation">;</span>  <span class="token comment">// clone.constructor=ChinesePeople;</span>     <span class="token punctuation">}</span>         <span class="token comment">// 第一步.创建Person父类原型的副本</span>  <span class="token class-name">Middle</span><span class="token punctuation">.</span>prototype<span class="token operator">=</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>  <span class="token comment">// 第二步2.1:创建父类原型副本的实例对象</span>     <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Middle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 第二步2.2 clone指向父类原型副本实例对象的变量</span>   vSonr clone<span class="token operator">=</span><span class="token function">createProtoTypeClone</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 第三步:设置子类原型为该副本的实例对象</span><span class="token class-name">ChinesePeople</span><span class="token punctuation">.</span>prototype<span class="token operator">=</span>clone<span class="token punctuation">;</span> <span class="token string">"克隆"</span>对象实现方式<span class="token number">2</span><span class="token comment">// 第S99行效果 = S102+S103。相当用 People 类【父构造函数】的原型对象属性“克隆”了一个对象。</span><span class="token keyword">let</span> cloneOneParentObj<span class="token operator">=</span>Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">People</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>  <span class="token comment">// S99</span>   <span class="token class-name">ChinesePeople</span><span class="token punctuation">.</span>prototype<span class="token operator">=</span>cloneOneParentObj <span class="token comment">// S100</span><span class="token class-name">ChinesePeople</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> ChinesePeople<span class="token punctuation">;</span><span class="token comment">// S101</span><span class="token string">"克隆"</span>对象实现方式<span class="token number">3</span> <span class="token punctuation">[</span>课后思考题<span class="token punctuation">]</span>   <span class="token keyword">let</span> cloneOneParentObj2<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// S102</span>   cloneOneParentObj2<span class="token punctuation">.</span>__proto__<span class="token operator">=</span><span class="token class-name">People</span><span class="token punctuation">.</span>prototype <span class="token comment">// S103</span><span class="token class-name">ChinesePeople</span><span class="token punctuation">.</span>prototype<span class="token operator">=</span>cloneOneParentObj <span class="token comment">// S104</span><span class="token class-name">ChinesePeople</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> ChinesePeople<span class="token punctuation">;</span><span class="token comment">// S105</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>慕课网 TS 高级课程</strong></p><h4 id="2-25-用全栈眼光深度掌握TS继承-TS继承好处-【企业真项目应用场景】"><a href="#2-25-用全栈眼光深度掌握TS继承-TS继承好处-【企业真项目应用场景】" class="headerlink" title="2-25      用全栈眼光深度掌握TS继承+TS继承好处  【企业真项目应用场景】"></a><strong>2-25      用全栈眼光深度掌握TS继承+TS继承好处  【企业真项目应用场景】</strong></h4><h5 id="1-理解子类"><a href="#1-理解子类" class="headerlink" title="1. 理解子类"></a>1. 理解子类</h5><p>（1）什么是子类？   </p><p>有两个类，比如 A 类和 B 类，如果满足 A 类  is a kind of  B类，那么 A 类就是 B 类的子类<br>比如：A 类是顾客类，B 类是人类，因为顾客类 a kind of 人类成立【顾客类是人类的一种】，所以顾客类是人类的子类。</p><p>（2） 子类如何继承父类的属性和方法？</p><p>以顾客类为例子：顾客类继承了父类【人类】的非私有的属性和方法，也具备子类独有的属性和方法 。</p><p>顾客类继承父类【人类】的全部非私有的属性和方法外，还有哪些独有的属性和方法呢？<br>顾客类独有属性：顾客等级，顾客编号<br>顾客类独有方法：购买</p><p>  (3)  初步理解为什么要用继承？</p><p> 举例：宠物管理项目中的狗狗类，兔子类，小猫类都是宠物，尽管每个宠物都有独有属性和方法，比如狗狗类的品种，看家方法；兔子类的肤色属性等。但这些类都包含了 name, buymoney[购买价格]，healthstatus[健康状况]，friendshipstar [和主人的友谊星级数]这些属性，如果每一个类都写这些属性，那么就非常臃肿，可以把这些属性提取出来放到一个宠物类中，其他类都继承这个宠物类。当然继承还有更多好处，下面借助汽车租赁功能的实现来更深度的掌握继承。</p><p> (4)  汽车租赁管理功能【深度掌握继承】</p><p>需求1:汽车租赁功能实现: 有小轿车,大巴,卡车三种类型的车,顾客可以租任意一种或多种不同类型的车,按照租用的天计算租金， 同时为了响应国家对各类车安全的管理, 对在租赁期内有过各种超载，超乘客数，酒后驾车等违规的车需额外支付一定的费用。</p><p>需求2:计算退回费用：最终退回顾客的费用为押金扣除使用天数，如押金不足需额外支付不足部分。</p><p>思考小轿车,大巴,卡车共同属性:  品牌 ( brand )  VechileNo ( 车牌号 )  days ( 租赁天数 ) total ( 支付的租赁总费用 )  deposit ( 押金 )</p><p>思考小轿车,大巴,卡车共同方法: 计算租赁车的价格 ( calculateRent)   支付押金的方法( payDesposit)</p><p>​安全规则方法（safeShow)</p><p>父类：Vechile   交通工具。</p><p>// 子类 小轿车 【型号】type属性</p><p><strong>慕课网 TS 高级课程</strong></p><h4 id="2-26-【-TS-继承】-super-方法重写的真应用"><a href="#2-26-【-TS-继承】-super-方法重写的真应用" class="headerlink" title="2-26       【 TS 继承】   super+方法重写的真应用"></a>2-26       【 TS 继承】   super+方法重写的真应用</h4><p><strong>方法重写：</strong>（override)</p><p><strong>条件</strong>：一定发生在继承的子类中</p><p><strong>位置</strong>： 子类中重写父类的方法</p><p><strong>应用场景</strong>：当父类中方法的实现不能满足子类功能需要或不能完全满足子类功能需要时，就需要在子类中进行重写</p><p><strong>方法重写给继承带来的好处</strong>: 让所有的子类共用父类中方法已经实现了一部分功能的代码【父类方法代码在各个子类中得到了复用】 </p><p><strong>定义规则</strong>：1. 和父类方法同名  2. 参数和父类相同，如果是引用类型的参数，需要依据具体类型来定义。</p><ol start="3"><li><p>父类方法的访问范围【访问修饰符】必须小于子类中方法重写的访问范围【访问修饰符】</p><p>同时父类方法不能是private</p></li></ol><p><strong>super的两种用法</strong>【super只能出现在子类【派生类】中】</p><p><strong>用法1</strong>：在子类的构造函数中使用 super (子类传递给父类构造函数的参数) 就表示用来调用父类构造函数  (传递给父类构造函数的参数)</p><p>还记得吗？super 编译成 JS 源码后 可以看到：就是采用 JS 原型中的借用构造函数来实现的</p><p><strong>用法2</strong>：在子类重写的方法中调用父类同名方法，super.重写的方法</p><p><strong>错误用法</strong>：当子类和父类有同名属性时，可以在子类中用 super 来获取父类同名属性吗？【不能】【一般要避免在子类，父类属性名同名】</p><p><strong>慕课网 TS 高级课程</strong></p><h4 id="2-27-【-TS-继承】-逐行深度剖析-手写TS-继承编译的-JS-源码-【练就更深厚JS-原型-原型继承功底的绝佳场景"><a href="#2-27-【-TS-继承】-逐行深度剖析-手写TS-继承编译的-JS-源码-【练就更深厚JS-原型-原型继承功底的绝佳场景" class="headerlink" title="2-27      【 TS 继承】   逐行深度剖析 +手写TS 继承编译的 JS 源码 【练就更深厚JS 原型+原型继承功底的绝佳场景 ]"></a>2-27      【 TS 继承】   逐行深度剖析 +手写TS 继承编译的 JS 源码 【练就更深厚JS 原型+原型继承功底的绝佳场景 ]</h4><p><strong>（1）相关技术</strong>：setPrototypeOf 使用+ 和 Object.create 的区别；</p><p>  (2)  <strong>父类静态方法和属性在子类中的继承</strong>：setPrototypeOf 和  Object.create 分别实现；</p><p><strong>（2） 深度掌握 +手写+优化底层 extendsStatics  方法的实现；</strong></p><p>​extendsStatics 方法的作用：  完成父类静态方法和属性在子类中的继承</p><p>（3）<strong>深度掌握_extends 方法</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">  <span class="token comment">// 手写优化后源码：</span>   <span class="token keyword">var</span> _extends <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>extends_<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">getExendsStatics2</span> <span class="token punctuation">(</span><span class="token parameter">son<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    son<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> parent  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">getExendsStatics3</span> <span class="token punctuation">(</span><span class="token parameter">son<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        son<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> parent<span class="token punctuation">[</span>key<span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 等价</span>    <span class="token comment">//继承父类的静态属性和方法</span>    <span class="token comment">// Object.keys(parent).forEach(function (son) {</span>    <span class="token comment">//   Child[key] = Father[key];</span>    <span class="token comment">// });</span>    <span class="token comment">//return Object.setPrototypeOf(son, parent)</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> <span class="token function-variable function">extendsStatics</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">son<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    extendsStatics <span class="token operator">=</span> Object<span class="token punctuation">.</span>setPrototypeOf <span class="token operator">||</span> getExendsStatics2 <span class="token operator">||</span> getExendsStatics3    <span class="token keyword">return</span> <span class="token function">extendsStatics</span><span class="token punctuation">(</span>son<span class="token punctuation">,</span> parent<span class="token punctuation">)</span>   <span class="token punctuation">}</span>  <span class="token keyword">var</span> <span class="token function-variable function">_extends</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">son<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">extendsStatics</span><span class="token punctuation">(</span>son<span class="token punctuation">,</span> parent<span class="token punctuation">)</span>    <span class="token keyword">function</span> <span class="token function">middle</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>constructor <span class="token operator">=</span> son    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>      middle<span class="token punctuation">.</span>prototype <span class="token operator">=</span> parent<span class="token punctuation">.</span>prototype      <span class="token comment">//son.prototype = parent === null ? Object.create(null) : new middle()</span>      son<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Middle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      son<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> _extends<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> Vechile <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">Vechile</span> <span class="token punctuation">(</span><span class="token parameter">brand_<span class="token punctuation">,</span> vechileNo_<span class="token punctuation">,</span> days_<span class="token punctuation">,</span> deposit_</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand_<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>vechileNo <span class="token operator">=</span> vechileNo_<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>days <span class="token operator">=</span> days_<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>deposit <span class="token operator">=</span> deposit_<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// 计算租赁车的价格 ( calculateRent)</span>  <span class="token class-name">Vechile</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">calculateRent</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"calculateRent来自Vechile=&gt;this.brand:"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">+</span> <span class="token string">" 车牌号为:"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vechileNo <span class="token operator">+</span> <span class="token string">"开始被租"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token class-name">Vechile</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">safeShow</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"车规则...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">+</span> <span class="token string">" 车牌号为:"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vechileNo <span class="token operator">+</span> <span class="token string">" 违规了:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  Vechile<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> Vechile<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">var</span> Car <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">_super</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">_extends</span><span class="token punctuation">(</span>Car<span class="token punctuation">,</span> _super<span class="token punctuation">)</span>  <span class="token keyword">function</span> <span class="token function">Car</span> <span class="token punctuation">(</span><span class="token parameter">brand_<span class="token punctuation">,</span> vechileNo_<span class="token punctuation">,</span> days_<span class="token punctuation">,</span> deposit_<span class="token punctuation">,</span> type_</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">_super</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> brand_<span class="token punctuation">,</span> vechileNo_<span class="token punctuation">,</span> days_<span class="token punctuation">,</span> deposit_<span class="token punctuation">)</span>    <span class="token comment">// var _this = _super.call(this, brand_, vechileNo_, days_, deposit_) || this</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type_<span class="token punctuation">;</span>    <span class="token comment">//console.log("_this:", _this)</span>    <span class="token comment">//_this.type = type_;</span>    <span class="token comment">//return _this;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token class-name">Car</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getPriceByType</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> rentMoneyByDay <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//每天的租金</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">"普拉多巡洋舰"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      rentMoneyByDay <span class="token operator">=</span> <span class="token number">800</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">"凯美瑞旗舰版"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      rentMoneyByDay <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">"威驰智行版"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      rentMoneyByDay <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> rentMoneyByDay<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token class-name">Car</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">calculateRent</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">safeShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">_super</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">calculateRent</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//=Vechile.prototype.calculateRent.call(this)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Car:"</span><span class="token punctuation">,</span> Car<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"型号:"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>days <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPriceByType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> Car<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">(</span>Vechile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">var</span> car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string">"普拉多"</span><span class="token punctuation">,</span> <span class="token string">"京3A556"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">100000</span><span class="token punctuation">,</span> <span class="token string">"凯美瑞旗舰版"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"car:"</span><span class="token punctuation">,</span> car<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>car<span class="token punctuation">.</span><span class="token function">calculateRent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id=""><a href="#" class="headerlink" title=""></a></h5>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript高级</title>
      <link href="/2022/05/10/typescript-gao-ji/"/>
      <url>/2022/05/10/typescript-gao-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><p>hello</p><h1 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h1><p><a href="http://www.baodu.com/">百度</a></p><span id="more"></span><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><p><img src="https://img3.mukewang.com/5fb36f270001cd6802940333.jpg" alt="图片名称"></p>]]></content>
      
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/05/10/hello-world/"/>
      <url>/2022/05/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new "My New Post"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/05/10/shi-yong-hexo-da-jian-bo-ke-liu-cheng/"/>
      <url>/2022/05/10/shi-yong-hexo-da-jian-bo-ke-liu-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="使用hexo搭建博客流程"><a href="#使用hexo搭建博客流程" class="headerlink" title="使用hexo搭建博客流程"></a>使用hexo搭建博客流程</h2><h3 id="1-基础搭建"><a href="#1-基础搭建" class="headerlink" title="1. 基础搭建"></a>1. 基础搭建</h3><ol><li><p>下载Node（包括node npm）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">node -vnpm -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><span id="more"></span>   <ol start="2"><li><p>切换到主页</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo su<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>安装cnpm</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install -g cnpm --registry=https://registry.npm.taobao.orgcnpm -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>安装hexo</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cnpm install -g hexo-clihexo -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>建立博客文件夹</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mkdir blog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>切换目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cd blog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用hexo生成博客</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo hexo init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>启动博客</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>本地可以预览博客</p></li><li><p>新建一篇文章</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo n "我的第一篇博客文章"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>修改文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cd source/_postsvi "我的我的第一篇博客文章.md"# 修改文件后保存退出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>切换回主页到blog文件夹</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cd ../..<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>hexo clean</p></li><li><p>hexo g (生成)</p></li><li><p>启动：hexo s</p></li><li><p>本地可以预览效果</p></li></ol><h3 id="2-博客部署到Github"><a href="#2-博客部署到Github" class="headerlink" title="2. 博客部署到Github"></a>2. 博客部署到Github</h3><ol><li><p>创建Github仓库（已配置ssh keys）</p><img src="https://gitee.com/zhangbing520/images/raw/master/img/202205092351356.png" alt="image-20220509235119241" style="zoom:50%;"></li><li><p>配置token</p><p>github： settings-&gt;Developer settings-&gt;personnal access tokens-&gt;Generate new token</p></li><li><p>上一步生成的token要记得,mac 聚焦搜索 <code>keychain access</code>进入钥匙串，然后搜索github：</p><img src="https://gitee.com/zhangbing520/images/raw/master/img/202205092355461.png" alt="image-20220509235554422" style="zoom:50%;"></li></ol><p>​点击修改密码为生成的token，保存退出。</p><ol start="4"><li><p>在 blog文件加下安装git插件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cnpm install --save hexo-deployer-git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>设置<code>_config.yml</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vi _config.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">deploy:  type: git  repo: https://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@github.com/zhangbing520/zhangbing520.github.io.git  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>部署到远端</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>代码会自动推送到远端</p></li><li><p>如果没有推成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git remote add origin https://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@github.com/zhangbing520/zhangbing520.github.io.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>访问博客：<a href="https://zhangbing520.github.io/">博客地址</a></p></li></ol><h3 id="3-修改主题"><a href="#3-修改主题" class="headerlink" title="3. 修改主题"></a>3. 修改主题</h3><ol><li><p>切换到blog文件夹</p></li><li><p>git clone 主题git地址 themes/主题名称</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git clone https:// themes/yilia<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>配置 <code>_config.yml</code>中的 <code>theme: yilia</code></p></li><li><p>Hexo clean</p></li><li><p>生成静态文件：hexo g</p></li><li><p>启动：hexo s (预览)</p></li><li><p>部署：hexo d</p></li><li><p>等推上去后需要等待一下，之后可以看到最新的页面</p></li></ol><h3 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h3><p><a href="https://www.bilibili.com/video/BV1Yb411a7ty?spm_id_from=333.1007.top_right_bar_window_history.content.click">codesheep b站视频</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
