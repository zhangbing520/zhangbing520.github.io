<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>泛型类+泛型接口+泛型类约束的复杂应用</title>
      <link href="/2022/05/11/fan-xing-lei-fan-xing-jie-kou-fan-xing-lei-yue-shu-de-fu-za-ying-yong/"/>
      <url>/2022/05/11/fan-xing-lei-fan-xing-jie-kou-fan-xing-lei-yue-shu-de-fu-za-ying-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="泛型类-泛型接口-泛型类约束的复杂应用"><a href="#泛型类-泛型接口-泛型类约束的复杂应用" class="headerlink" title="泛型类+泛型接口+泛型类约束的复杂应用"></a>泛型类+泛型接口+泛型类约束的复杂应用</h2><h3 id="3-1-泛型类准备"><a href="#3-1-泛型类准备" class="headerlink" title="3.1 泛型类准备"></a>3.1 泛型类准备</h3><ul><li><p>为什么要用泛型类【好处】  </p><p> 可以看看之前提到的<code>ArrayList</code>的实现方式</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">ArrayList</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> element<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>object<span class="token operator">&gt;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>element <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> index<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">public</span> <span class="token function">add</span><span class="token punctuation">(</span>obj<span class="token operator">:</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> obj  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">checkIndex</span><span class="token punctuation">(</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'index must bigger than 0'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">get</span><span class="token punctuation">(</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">[</span>index<span class="token punctuation">]</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">'lisi'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token keyword">let</span> obj3 <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">'liuwu'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token keyword">let</span> arrayListOne <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>arrayListOne<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span>arrayListOne<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrayListOne<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>arrayListOne<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://gitee.com/zhangbing520/images/raw/master/img/202205102044752.png" alt="image-20220510204450660" style="zoom:100%;"></li></ul><p>​但上述的实现方式有一些缺点，现在的实现方式将数组元素规定为 <code>object</code>，当需求变更，需要变为<code>string</code>时，则需要将上述代码所有的<code>object</code>改为<code>string</code>，这样的处理方式实际上是有很大的不方便之处，而<strong>泛型</strong>的出现可以效解决上述问题。</p><h3 id="3-2-泛型类定义、格式"><a href="#3-2-泛型类定义、格式" class="headerlink" title="3.2 泛型类定义、格式"></a>3.2 泛型类定义、格式</h3><ul><li><h4 id="泛型定义"><a href="#泛型定义" class="headerlink" title="泛型定义"></a>泛型定义</h4></li></ul><p>​泛型：一种参数化的数据类型，具有以下的特点：</p><p>​1. 定义时不明确，使用时必须明确成某种具体数据类型的数据类型</p><p>​2. 编译期间进行数据类型安全检查的数据类型</p><blockquote><p><code>特别注意</code>：</p><pre><code> 1. 类型安全检查发生在**编译期间** 2. 泛型是参数化的数据类型，使用时明确化后的数据类型就是参数的值</code></pre></blockquote><ul><li><h4 id="泛型格式"><a href="#泛型格式" class="headerlink" title="泛型格式"></a>泛型格式</h4><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">类名<span class="token operator">&lt;</span>泛型形参类型<span class="token operator">&gt;</span></span>泛型形参类型必须是<span class="token constant">A</span><span class="token operator">-</span><span class="token constant">Z</span>任何一个字母，如下：<span class="token keyword">class</span> <span class="token class-name">ArrayList<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span><span class="token punctuation">{</span>array<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token function">add</span><span class="token punctuation">(</span>data<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>    <span class="token operator">...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>使用泛型改写ArrayList： </p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">ArrayList<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> element<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>element <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> index<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">public</span> <span class="token function">add</span><span class="token punctuation">(</span>obj<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> obj  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">checkIndex</span><span class="token punctuation">(</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'index must bigger than 0'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">get</span><span class="token punctuation">(</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">[</span>index<span class="token punctuation">]</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment">// 函数重载</span>  <span class="token keyword">public</span> <span class="token function">remove</span><span class="token punctuation">(</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span>  <span class="token keyword">public</span> <span class="token function">remove</span><span class="token punctuation">(</span>obj<span class="token operator">:</span> object<span class="token punctuation">)</span><span class="token operator">:</span> object  <span class="token keyword">public</span> <span class="token function">remove</span><span class="token punctuation">(</span>removeIndexOrItem<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> removeIndexOrItem <span class="token operator">===</span> <span class="token string">'number'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>element <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> removeIndexOrItem <span class="token operator">!==</span> index<span class="token punctuation">)</span>      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'this.element:'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>element <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>item <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name <span class="token operator">!==</span> removeIndexOrItem<span class="token punctuation">.</span>name<span class="token punctuation">)</span>      <span class="token keyword">return</span> removeIndexOrItem    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">type</span> <span class="token class-name">Myobj</span> <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">}</span><span class="token keyword">let</span> obj1<span class="token operator">:</span> Myobj <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token keyword">let</span> obj2<span class="token operator">:</span> Myobj <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">'lisi'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token comment">// let arrayListOne = new ArrayList&lt;object&gt;()</span><span class="token keyword">let</span> arrayListOne <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList<span class="token operator">&lt;</span><span class="token keyword">typeof</span> obj1<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>arrayListOne<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span>arrayListOne<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrayListOne<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrayListOne<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">)</span>arrayListOne<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​</p><h3 id="3-3-TS-泛型类：object-为什么不能替代类上的泛型"><a href="#3-3-TS-泛型类：object-为什么不能替代类上的泛型" class="headerlink" title="3.3 TS 泛型类：object 为什么不能替代类上的泛型"></a>3.3 TS 泛型类：object 为什么不能替代类上的泛型</h3><ul><li><p>原因一：编译期间 object 无法进行类型安全检查，而泛型在编译期间可以进行类型安全检查</p><p>Object 接受也只能接受所有的 object 类型的变量，比如 Customer，Student，Dog 类的实例都是对象类型，或者自己定义的对象，都可以传递给  object 类型的方法参数或属性，但如果我们只希望添加 Customer 的对象，当添加其他类的对象要求必须出现编译错误，但是 object 无法做到，就只能用泛型了。</p></li></ul><ul><li><p>原因二：object 类型数据无法接受非 object 类型的变量，只能接受 object 类型的变量，泛型能轻松做到</p><p>正因为 object 接受也只能接受所有的 object 类型的变量，那么如果有一个集合【数组封装类】有一个 add 方法，允许每次添加指定类型的变量到 add 方法的参数，比如，我们第一轮是希望添加 10 次字符串类型的变量，第二轮希望添加 10 次整数类型变量，第三轮希望添加 10 次 Customer 类型的变量，泛型能轻松做到。object 类型数据无法接受任意非 object 类型的变量</p></li><li><p>原因三：object 类型数据获取属性和方法时无法自动提示</p><p>一种泛型类型被具体化成某种数据类型后，该数据类型的变量获取属性和方法时会自动提示，提高代码开发效率和减少出错，但在 object 类型的变量无法获取数据类型的属性和方法，降低了体验感和开发效率。</p></li></ul><blockquote><p>注：object 和 Object 的区别</p><p>​1. Object范围较广，number 也是 Object 的子类</p><p>​2. 属性和方法：Object可以点出来</p></blockquote><img src="https://gitee.com/zhangbing520/images/raw/master/img/202205110052773.png" alt="image-20220511005225717" style="zoom:60%;">]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + Github 搭建博客</title>
      <link href="/2022/05/10/shi-yong-hexo-da-jian-bo-ke-liu-cheng/"/>
      <url>/2022/05/10/shi-yong-hexo-da-jian-bo-ke-liu-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="使用hexo搭建博客流程"><a href="#使用hexo搭建博客流程" class="headerlink" title="使用hexo搭建博客流程"></a>使用hexo搭建博客流程</h2><h3 id="1-基础搭建"><a href="#1-基础搭建" class="headerlink" title="1. 基础搭建"></a>1. 基础搭建</h3><ol><li><p>下载Node（包括node npm）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">node</span> -v<span class="token function">npm</span> -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><span id="more"></span>   <ol start="2"><li><p>切换到主页</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">su</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>安装cnpm</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g cnpm --registry<span class="token operator">=</span>https://registry.npm.taobao.orgcnpm -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>安装hexo</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cnpm <span class="token function">install</span> -g hexo-clihexo -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>建立博客文件夹</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> blog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>切换目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> blog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用hexo生成博客</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> hexo init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>启动博客</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>本地可以预览博客</p></li><li><p>新建一篇文章</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo n <span class="token string">"我的第一篇博客文章"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>修改文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> source/_posts<span class="token function">vi</span> <span class="token string">"我的我的第一篇博客文章.md"</span><span class="token comment"># 修改文件后保存退出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>切换回主页到blog文件夹</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>hexo clean</p></li><li><p>hexo g (生成)</p></li><li><p>启动：hexo s</p></li><li><p>本地可以预览效果</p></li></ol><h3 id="2-博客部署到Github"><a href="#2-博客部署到Github" class="headerlink" title="2. 博客部署到Github"></a>2. 博客部署到Github</h3><ol><li><p>创建Github仓库（已配置ssh keys）</p><img src="https://gitee.com/zhangbing520/images/raw/master/img/202205092351356.png" alt="image-20220509235119241" style="zoom:50%;"></li><li><p>配置token</p><p>github： settings-&gt;Developer settings-&gt;personnal access tokens-&gt;Generate new token</p></li><li><p>上一步生成的token要记得,mac 聚焦搜索 <code>keychain access</code>进入钥匙串，然后搜索github：</p><img src="https://gitee.com/zhangbing520/images/raw/master/img/202205092355461.png" alt="image-20220509235554422" style="zoom:50%;"></li></ol><p>​点击修改密码为生成的token，保存退出。</p><ol start="4"><li><p>在 blog文件加下安装git插件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cnpm <span class="token function">install</span> --save hexo-deployer-git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>设置<code>_config.yml</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> _config.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">deploy:  type: <span class="token function">git</span>  repo: https://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@github.com/zhangbing520/zhangbing520.github.io.git  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>部署到远端</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>代码会自动推送到远端</p></li><li><p>如果没有推成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote <span class="token function">add</span> origin https://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@github.com/zhangbing520/zhangbing520.github.io.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>访问博客：<a href="https://zhangbing520.github.io/">博客地址</a></p></li></ol><h3 id="3-修改主题"><a href="#3-修改主题" class="headerlink" title="3. 修改主题"></a>3. 修改主题</h3><ol><li><p>切换到blog文件夹</p></li><li><p>git clone 主题git地址 themes/主题名称</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https:// themes/yilia<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>配置 <code>_config.yml</code>中的 <code>theme: yilia</code></p></li><li><p>Hexo clean</p></li><li><p>生成静态文件：hexo g</p></li><li><p>启动：hexo s (预览)</p></li><li><p>部署：hexo d</p></li><li><p>等推上去后需要等待一下，之后可以看到最新的页面</p></li></ol><h3 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h3><p><a href="https://www.bilibili.com/video/BV1Yb411a7ty?spm_id_from=333.1007.top_right_bar_window_history.content.click">codesheep b站视频</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
