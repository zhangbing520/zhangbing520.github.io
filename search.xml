<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>第四章： 深度掌握泛型函数</title>
      <link href="/2022/05/12/di-si-zhang-shen-du-zhang-wo-fan-xing-han-shu/"/>
      <url>/2022/05/12/di-si-zhang-shen-du-zhang-wo-fan-xing-han-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="慕课网-TS-高级课程"><a href="#慕课网-TS-高级课程" class="headerlink" title="慕课网 TS 高级课程"></a>慕课网 TS 高级课程</h2><h3 id="第四章：-深度掌握泛型函数"><a href="#第四章：-深度掌握泛型函数" class="headerlink" title="第四章： 深度掌握泛型函数"></a>第四章： 深度掌握泛型函数</h3><p><strong>技能大纲</strong></p><p><strong>4-1  【泛型函数】—泛型函数+快速排序算法【比冒泡稍复杂】 【透彻理解泛型函数的好处】【共两节】</strong></p><p><strong>4-2   【泛型函数重载】泛型函数重载准备【经典复杂排序器】—自排序丶多数据类型丶中文排序【共三节】</strong>    </p><p><strong>4-3  【泛型函数重载】泛型函数重载重构自排序丶多种数据类型丶中文排序 【彻底理解泛型函数重载带来的巨大好处】</strong>  </p><hr><p><strong>A-1  升级课程用：泛型函数重载+泛型约束综合应用：外排序+内排序</strong></p><hr><p><strong>4-4 【泛型函数重载】 结合 Vue3 源码深度掌握泛型函数重载</strong> 【共一节】</p><p><strong>4-5   泛型工厂函数——深入泛型工厂函数+泛型工厂函数的深度应用【不按“套路”出牌】</strong></p><p><strong>4-6 【TS交叉类型】 理解交叉类型和深入分析交叉类型的应用场景</strong> </p><p><strong>4-7 【泛型函数+TS交叉类型+类型断言+枚举】 深度理解泛型函数+交叉类型的综合应用</strong> </p><p><strong>慕课网 TS 高级课程</strong></p><h4 id="4-1-【泛型函数】—泛型函数-快速排序算法【比冒泡稍复杂】-【透彻理解泛型函数的好处】【共两节】"><a href="#4-1-【泛型函数】—泛型函数-快速排序算法【比冒泡稍复杂】-【透彻理解泛型函数的好处】【共两节】" class="headerlink" title="4-1  【泛型函数】—泛型函数+快速排序算法【比冒泡稍复杂】 【透彻理解泛型函数的好处】【共两节】"></a><strong>4-1  【泛型函数】—泛型函数+快速排序算法【比冒泡稍复杂】 【透彻理解泛型函数的好处】【共两节】</strong></h4><p><strong>泛型函数课程安排：</strong> </p><ol><li>大致讲解快速排序算法   </li><li>编写字符串排序、整数排序函数  </li><li>泛型函数实现字符串排序、整数排序【讲解泛型函数带来的好处】</li></ol><p><strong>（1）快速排序算法</strong>【 <strong>快速排序算法不属于本课程内容，老师会简单讲下，同学们有个基本了解即可，如不能完全理解，先用即可，重心一定要先放在泛型函数和接下来的泛型函数重载上</strong>】</p><p><strong>（2）编写字符串排序丶整数排序函数代码：</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 快速排序算法思路：</span><span class="token comment">// 1．先从数列中取出一个数作为基准数。</span><span class="token comment">// 2．分区过程，将比这个数大的数全放到它的右边，小于或等于它的数全放到它的左边。</span><span class="token comment">// 3．再对左右区间重复第二步，直到各区间只有一个数。</span><span class="token keyword">function</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">arr</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>any<span class="token operator">&gt;</span></span><span class="token punctuation">)</span><span class="token operator">:</span> any <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> arr <span class="token punctuation">}</span>  <span class="token keyword">var</span> <span class="token literal-property property">left</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>any<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> <span class="token literal-property property">right</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>any<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> mid <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>      left<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      right<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>mid<span class="token punctuation">,</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> chineseArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> chineseArrSort <span class="token operator">=</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>chineseArr<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"chineseArrSort:"</span><span class="token punctuation">,</span> chineseArrSort<span class="token punctuation">)</span><span class="token keyword">let</span> <span class="token literal-property property">strArr</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"cba"</span><span class="token punctuation">,</span> <span class="token string">"kkdf"</span><span class="token punctuation">,</span> <span class="token string">"ndf"</span><span class="token punctuation">,</span> <span class="token string">"bcdf"</span><span class="token punctuation">,</span> <span class="token string">"dfd"</span><span class="token punctuation">,</span> <span class="token string">"cdf"</span><span class="token punctuation">]</span><span class="token keyword">let</span> strArrSort <span class="token operator">=</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>strArr<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"strArrSort:"</span><span class="token punctuation">,</span> strArrSort<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>慕课网 TS 高级课程</strong></p><p> <strong>(3)  泛型函数实现字符串排序，整数排序【讲解泛型函数带来的好处】</strong> <strong>泛型类的格式</strong>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 泛型函数实现的快速排序方法</span><span class="token keyword">function</span> <span class="token function">quickSort</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> left <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> right <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> mid <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>      left<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>      right<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>mid<span class="token punctuation">,</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>慕课网 TS 高级课程</strong></p><p><strong>4-2   【泛型函数重载】泛型函数重载准备【经典复杂排序器】—自排序、多种数据类型、中文排序【共三节】</strong>    </p><p><strong>泛型函数重载课程安排：</strong></p><ol><li>中文排序   </li><li>字符串自排序   </li><li>中文+英文、数字数组排序 </li><li>中文+英文、数字数组 + 数组内部字符串自排序   </li><li>字符串自排序 +中文+英文、数字数组+数组内部字符串自排序</li></ol><p><strong>1. 中文排序</strong> </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> sortChinese<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>arr<span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token comment">//Array&lt;T&gt;=T[]</span>  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">firstnum<span class="token punctuation">,</span> secondnum</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>firstnum <span class="token keyword">as</span> any<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">localeCompare</span><span class="token punctuation">(</span>secondnum<span class="token punctuation">,</span> <span class="token string">"zh-CN"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2. 字符串自排序</strong> </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> quickSort<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>arr<span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> arr <span class="token punctuation">}</span>  <span class="token keyword">var</span> <span class="token literal-property property">left</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> <span class="token literal-property property">right</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> mid <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>      left<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      right<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>mid<span class="token punctuation">,</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//  字符串自排序</span><span class="token keyword">function</span> <span class="token function">strSelfSort</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">str</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">{</span>  <span class="token comment">// (1) 字符串拆分成数组</span>  <span class="token keyword">let</span> strArray <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// (2) 数组进行使用快速排序算法来排序</span>  <span class="token keyword">let</span> strSortArray <span class="token operator">=</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>strArray<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// (3) 重新把排好序的数组连接成一个字符串返回</span>  <span class="token keyword">return</span> strSortArray<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3. 中文+英文、数字数组排序</strong>  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> pattern1 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\u4e00-\u9fa5]+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span><span class="token comment">// 3泛型函数重载准备</span><span class="token comment">// (1). 中文排序</span><span class="token comment">// (2). 字符串自排序</span><span class="token keyword">function</span> quickSort<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>arr<span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> arr <span class="token punctuation">}</span>  <span class="token keyword">var</span> <span class="token literal-property property">left</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> <span class="token literal-property property">right</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> mid <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"mid:"</span><span class="token punctuation">,</span> mid<span class="token punctuation">)</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>      left<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      right<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>mid<span class="token punctuation">,</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// localeCompare</span><span class="token keyword">let</span> <span class="token literal-property property">str</span><span class="token operator">:</span> string <span class="token operator">=</span> <span class="token string">"cbaimcnd"</span><span class="token comment">//let strArrSort = quickSort(str)</span><span class="token comment">// (2). 字符串自排序</span><span class="token keyword">function</span> <span class="token function">strSelfSort</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">str</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">{</span>  <span class="token comment">// (1) 字符串拆分成数组</span>  <span class="token keyword">let</span> strArray <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// (2) 数组进行使用快速排序算法来排序</span>  <span class="token keyword">let</span> strSortArray <span class="token operator">=</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>strArray<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// (3) 重新把排好序的数组连接成一个字符串返回</span>  <span class="token keyword">return</span> strSortArray<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">strSelfSort</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <strong>4. 中文+英文、数字数组 + 数组内部字符串自排序</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// var pattern1 = /[\u4e00-\u9fa5]+/g;</span><span class="token comment">// 慕课网 TS 高级课程</span><span class="token comment">// 英文、数字数组排序  </span><span class="token keyword">function</span> quickSort<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>arr<span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> arr <span class="token punctuation">}</span>  <span class="token keyword">var</span> <span class="token literal-property property">left</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> <span class="token literal-property property">right</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> mid <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"mid:"</span><span class="token punctuation">,</span> mid<span class="token punctuation">)</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>      left<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      right<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>mid<span class="token punctuation">,</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//   中文排序</span><span class="token keyword">function</span> sortChinese<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>arr<span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token comment">//Array&lt;T&gt;=T[]</span>  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">firstnum<span class="token punctuation">,</span> secondnum</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>firstnum <span class="token keyword">as</span> any<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">localeCompare</span><span class="token punctuation">(</span>secondnum<span class="token punctuation">,</span> <span class="token string">"zh-CN"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 判断数组中是否有中文元素</span><span class="token keyword">function</span> isChinese<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>arr<span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> boolean <span class="token punctuation">{</span>  <span class="token keyword">var</span> pattern1 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\u4e00-\u9fa5]+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> pattern1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>item <span class="token keyword">as</span> any<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 中文+英文、数字数组排序混合方法  </span><span class="token keyword">function</span> sort<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>arr<span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isChinese</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果是中文数组</span>    <span class="token keyword">return</span> <span class="token function">sortChinese</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">typeof</span> item <span class="token operator">===</span> <span class="token string">"string"</span> <span class="token operator">?</span> <span class="token function">strSelfSort</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">:</span> item  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment">//英文、数字数组排序</span>  <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>newArr <span class="token keyword">as</span> any<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// (2). 字符串自排序</span><span class="token keyword">function</span> <span class="token function">strSelfSort</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">str</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">{</span>  <span class="token comment">// (1) 字符串拆分成数组</span>  <span class="token keyword">let</span> strArray <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// (2) 数组进行使用快速排序算法来排序</span>  <span class="token keyword">let</span> strSortArray <span class="token operator">=</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>strArray<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// (3) 重新把排好序的数组连接成一个字符串返回</span>  <span class="token keyword">return</span> strSortArray<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> numArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sort</span><span class="token punctuation">(</span>numArr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token literal-property property">strArr</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"cba"</span><span class="token punctuation">,</span> <span class="token string">"kkdf"</span><span class="token punctuation">,</span> <span class="token string">"ndf"</span><span class="token punctuation">,</span> <span class="token string">"bcdf"</span><span class="token punctuation">,</span> <span class="token string">"dfd"</span><span class="token punctuation">,</span> <span class="token string">"cdf"</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sort</span><span class="token punctuation">(</span>strArr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> chineseArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"武汉"</span><span class="token punctuation">,</span> <span class="token string">"郑州"</span><span class="token punctuation">,</span> <span class="token string">"太原"</span><span class="token punctuation">,</span> <span class="token string">"济南"</span><span class="token punctuation">,</span> <span class="token string">"沈阳"</span><span class="token punctuation">,</span> <span class="token string">"大连"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sort</span><span class="token punctuation">(</span>chineseArr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>5. 字符串自排序 +中文+英文、数字数组 + 数组内部字符串自排序</strong> </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// var pattern1 = /[\u4e00-\u9fa5]+/g;</span><span class="token comment">// 英文、数字数组排序  </span><span class="token keyword">function</span> quickSort<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>arr<span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> arr <span class="token punctuation">}</span>  <span class="token keyword">var</span> <span class="token literal-property property">left</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> <span class="token literal-property property">right</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> mid <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"mid:"</span><span class="token punctuation">,</span> mid<span class="token punctuation">)</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>      left<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      right<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>mid<span class="token punctuation">,</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//   中文排序</span><span class="token keyword">function</span> sortChinese<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>arr<span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token comment">//Array&lt;T&gt;=T[]</span>  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">firstnum<span class="token punctuation">,</span> secondnum</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>firstnum <span class="token keyword">as</span> any<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">localeCompare</span><span class="token punctuation">(</span>secondnum<span class="token punctuation">,</span> <span class="token string">"zh-CN"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 判断数组中是否有中文元素</span><span class="token keyword">function</span> isChinese<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>arr<span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> boolean <span class="token punctuation">{</span>  <span class="token keyword">var</span> pattern1 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\u4e00-\u9fa5]+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> pattern1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>item <span class="token keyword">as</span> any<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 慕课网 TS 高级课程</span><span class="token comment">// 中文+英文、数字数组排序混合方法  </span><span class="token keyword">function</span> sort<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>data<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token literal-property property">count</span><span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> string <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> data <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果是字符串</span>    <span class="token keyword">return</span> <span class="token function">strSelfSort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token comment">// 按照字符串自排序</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果data是数组</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isChinese</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果是中文数组</span>      <span class="token keyword">return</span> <span class="token function">sortChinese</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> newArr <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">typeof</span> item <span class="token operator">===</span> <span class="token string">"string"</span> <span class="token operator">?</span> <span class="token function">strSelfSort</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">:</span> item    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">//英文、数字数组排序</span>    <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>newArr <span class="token keyword">as</span> any<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// (2). 字符串自排序</span><span class="token keyword">function</span> <span class="token function">strSelfSort</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">str</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">count</span><span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">5</span></span><span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">{</span>  <span class="token comment">// (1) 字符串拆分成数组</span>  <span class="token keyword">let</span> strArray <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// (2) 数组进行使用快速排序算法来排序</span>  <span class="token keyword">let</span> strSortArray <span class="token operator">=</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>strArray<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// (3) 重新把排好序的数组连接成一个字符串返回</span>  <span class="token keyword">let</span> strResult <span class="token operator">=</span> strSortArray<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> strResult<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">10</span> <span class="token operator">?</span> strResult<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"..."</span> <span class="token operator">:</span> strResult<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"bdfaerafdfsd"</span><span class="token keyword">let</span> strResult <span class="token operator">=</span> <span class="token function">sort</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token keyword">as</span> stringconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"长度为:"</span><span class="token punctuation">,</span> strResult<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token string">"字符串"</span><span class="token punctuation">,</span> strResult<span class="token punctuation">)</span><span class="token keyword">var</span> numArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1.883332</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sort</span><span class="token punctuation">(</span>numArr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//sort(numArr)</span><span class="token comment">//let result=sort(numArr);</span><span class="token keyword">let</span> <span class="token literal-property property">strArr</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"cba"</span><span class="token punctuation">,</span> <span class="token string">"kkdf"</span><span class="token punctuation">,</span> <span class="token string">"ndf"</span><span class="token punctuation">,</span> <span class="token string">"bcdf"</span><span class="token punctuation">,</span> <span class="token string">"dfd"</span><span class="token punctuation">,</span> <span class="token string">"cdf"</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sort</span><span class="token punctuation">(</span>strArr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> chineseArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"武汉"</span><span class="token punctuation">,</span> <span class="token string">"郑州"</span><span class="token punctuation">,</span> <span class="token string">"太原"</span><span class="token punctuation">,</span> <span class="token string">"济南"</span><span class="token punctuation">,</span> <span class="token string">"沈阳"</span><span class="token punctuation">,</span> <span class="token string">"大连"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sort</span><span class="token punctuation">(</span>chineseArr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>4-3  【泛型函数重载】泛型函数重载重构自排序丶多种数据类型丶中文排序 【彻底理解泛型函数重载带来的优势】</strong>  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// var pattern1 = /[\u4e00-\u9fa5]+/g;</span><span class="token comment">// 英文、数字数组排序  </span><span class="token keyword">function</span> quickSort<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>arr<span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> arr <span class="token punctuation">}</span>  <span class="token keyword">var</span> <span class="token literal-property property">left</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> <span class="token literal-property property">right</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> mid <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"mid:"</span><span class="token punctuation">,</span> mid<span class="token punctuation">)</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>      left<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      right<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>mid<span class="token punctuation">,</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//   中文排序</span><span class="token keyword">function</span> sortChinese<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>arr<span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token comment">//Array&lt;T&gt;=T[]</span>  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">firstnum<span class="token punctuation">,</span> secondnum</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>firstnum <span class="token keyword">as</span> any<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">localeCompare</span><span class="token punctuation">(</span>secondnum<span class="token punctuation">,</span> <span class="token string">"zh-CN"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 判断数组中是否有中文元素</span><span class="token keyword">function</span> isChinese<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>arr<span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> boolean <span class="token punctuation">{</span>  <span class="token keyword">var</span> pattern1 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\u4e00-\u9fa5]+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> pattern1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>item <span class="token keyword">as</span> any<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 慕课网 TS 高级课程</span><span class="token comment">// 泛型函数重载</span><span class="token comment">// 中文+英文、数字数组排序混合方法  </span><span class="token comment">// 分工明确</span><span class="token comment">//function sort(data: string, count?: number): string[可有可无]</span><span class="token keyword">function</span> sort<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>data<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> count<span class="token operator">?</span><span class="token operator">:</span> number<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token comment">//分工明确</span><span class="token keyword">function</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">data</span><span class="token operator">:</span> any<span class="token punctuation">,</span> <span class="token literal-property property">count</span><span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">5</span></span><span class="token punctuation">)</span><span class="token operator">:</span> any <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> data <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果是字符串</span>    <span class="token keyword">return</span> <span class="token function">strSelfSort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token comment">// 按照字符串自排序</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果data是数组</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isChinese</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果是中文数组</span>      <span class="token keyword">return</span> <span class="token function">sortChinese</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> newArr <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">typeof</span> item <span class="token operator">===</span> <span class="token string">"string"</span> <span class="token operator">?</span> <span class="token function">strSelfSort</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">:</span> item    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">//英文、数字数组排序</span>    <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>newArr <span class="token keyword">as</span> any<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//// (2). 字符串自排序</span><span class="token keyword">function</span> <span class="token function">strSelfSort</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">str</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">count</span><span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">5</span></span><span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">{</span>  <span class="token comment">// (1) 字符串拆分成数组</span>  <span class="token keyword">let</span> strArray <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// (2) 数组进行使用快速排序算法来排序</span>  <span class="token keyword">let</span> strSortArray <span class="token operator">=</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>strArray<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// (3) 重新把排好序的数组连接成一个字符串返回</span>  <span class="token keyword">let</span> strResult <span class="token operator">=</span> strSortArray<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> strResult<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">10</span> <span class="token operator">?</span> strResult<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"..."</span> <span class="token operator">:</span> strResult<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"bdfaerafdfsd"</span><span class="token keyword">let</span> strResult <span class="token operator">=</span> <span class="token function">sort</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"长度为:"</span><span class="token punctuation">,</span> strResult<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token string">"字符串"</span><span class="token punctuation">,</span> strResult<span class="token punctuation">)</span><span class="token keyword">var</span> numArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1.883332</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sort</span><span class="token punctuation">(</span>numArr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//sort(numArr)</span><span class="token keyword">let</span> result <span class="token operator">=</span> sort<span class="token operator">&lt;</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>numArr<span class="token punctuation">)</span>result<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">let</span> <span class="token literal-property property">strArr</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"cba"</span><span class="token punctuation">,</span> <span class="token string">"kkdf"</span><span class="token punctuation">,</span> <span class="token string">"ndf"</span><span class="token punctuation">,</span> <span class="token string">"bcdf"</span><span class="token punctuation">,</span> <span class="token string">"dfd"</span><span class="token punctuation">,</span> <span class="token string">"cdf"</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sort</span><span class="token punctuation">(</span>strArr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> chineseArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"武汉"</span><span class="token punctuation">,</span> <span class="token string">"郑州"</span><span class="token punctuation">,</span> <span class="token string">"太原"</span><span class="token punctuation">,</span> <span class="token string">"济南"</span><span class="token punctuation">,</span> <span class="token string">"沈阳"</span><span class="token punctuation">,</span> <span class="token string">"大连"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sort</span><span class="token punctuation">(</span>chineseArr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>慕课网 TS 高级课程</strong></p><h4 id="4-4-【泛型函数重载】-结合-Vue3-源码深度掌握泛型函数重载"><a href="#4-4-【泛型函数重载】-结合-Vue3-源码深度掌握泛型函数重载" class="headerlink" title="4-4 【泛型函数重载】 结合 Vue3 源码深度掌握泛型函数重载"></a><strong>4-4 【泛型函数重载】 结合 Vue3 源码深度掌握泛型函数重载</strong></h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> ref<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">object</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> ToRef<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token keyword">export</span> <span class="token keyword">function</span> ref<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> Ref<span class="token operator">&lt;</span>UnwrapRef<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span><span class="token keyword">export</span> <span class="token keyword">function</span> ref<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> any<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token operator">?</span><span class="token operator">:</span> unknown</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">createRef</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>慕课网 TS 高级课程</p><h4 id="4-5-泛型工厂函数——深入泛型工厂函数-泛型工厂函数的深度应用"><a href="#4-5-泛型工厂函数——深入泛型工厂函数-泛型工厂函数的深度应用" class="headerlink" title="4-5   泛型工厂函数——深入泛型工厂函数+泛型工厂函数的深度应用"></a>4-5   泛型工厂函数——深入泛型工厂函数+泛型工厂函数的深度应用</h4><p>泛型工厂函数课程安排   </p><ol><li><p>准备 相关定义+【函数类型复习】</p></li><li><p>理解泛型工厂函数类型    </p><p>通用函数类型–&gt;工厂函数类型–&gt;泛型工厂函数类型       </p></li><li><p>构建泛型工厂函数</p></li><li><p>泛型工厂函数深度应用 —原型+泛型工厂函数联合使用</p></li></ol><p><strong>工厂函数类型定义：代表任意一个类的构造函数【等价JS的构造函数】的函数类型</strong>。</p><p><strong>泛型工厂函数定义</strong>：一个可以创建任意类对象的通用泛型函数</p><p>泛型工厂函数应用场景： 使用场景1：在一些不方便或者没有办法直接 new  类名（）格式来创建对象，例如：后面讲解的装饰器中就多次用到。 使用场景2：在一些项目测试或者调试中简化代码使用。</p><p>通过工厂函数的学习，既可以加深对泛型函数的理解；同时也可以扩大技术视野，提升代码整合能力；还为一些优秀前端技术打下更雄厚的技术根基【例如：为理解装饰器中各种复杂代码打下技术根基】。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">type <span class="token function-variable function">promiseFuncType</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> any<span class="token keyword">class</span> <span class="token class-name">ShopCartService</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token literal-property property">productname</span><span class="token operator">:</span> string<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token literal-property property">count</span><span class="token operator">:</span> number<span class="token punctuation">;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span>  <span class="token function">addShopCart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"增加商品:"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>productname <span class="token operator">+</span> <span class="token string">":数量:"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Promise</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span>  <span class="token punctuation">}</span>  <span class="token keyword">static</span> <span class="token function">Promise</span><span class="token punctuation">(</span>promiseFunc2<span class="token operator">:</span> promiseFuncType<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>    <span class="token function">promiseFunc2</span><span class="token punctuation">(</span><span class="token string">"sucess"</span><span class="token punctuation">,</span> <span class="token string">"fail"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//return this</span>  <span class="token punctuation">}</span>  <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"buy"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">static</span> <span class="token function">ShowResult</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">promiseFunc3</span><span class="token operator">:</span> promiseFuncType<span class="token punctuation">,</span> <span class="token literal-property property">errorCode</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> shopCartService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShopCartService</span><span class="token punctuation">(</span><span class="token punctuation">)</span>shopCartService<span class="token punctuation">.</span>productname <span class="token operator">=</span> <span class="token string">"牙膏"</span>shopCartService<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">70</span><span class="token comment">// 泛型工厂函数类型constructorFuncType</span>type constructorFuncType<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> any<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token comment">// 构建泛型工厂函数写法1：参数类型为type定义的构造函数类型</span><span class="token keyword">function</span> createInstanceFactory<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>promiseFunc2<span class="token operator">:</span> constructorFuncType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">promiseFunc2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">let</span> promise <span class="token operator">=</span> createInstanceFactory<span class="token operator">&lt;</span>Promise<span class="token operator">&gt;</span><span class="token punctuation">(</span>Promise<span class="token punctuation">)</span><span class="token punctuation">;</span>promise<span class="token punctuation">.</span><span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> shopCartService2 <span class="token operator">=</span> createInstanceFactory<span class="token operator">&lt;</span>ShopCartService<span class="token operator">&gt;</span><span class="token punctuation">(</span>ShopCartService<span class="token punctuation">)</span><span class="token punctuation">;</span>shopCartService2<span class="token punctuation">.</span><span class="token function">addShopCart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 构建泛型工厂函数写法2：参数类型为接口式的构造函数类型</span><span class="token keyword">interface</span> <span class="token class-name">constructorFuncinterface</span><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> any<span class="token operator">&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">}</span><span class="token comment">//function createInstanceFactory2&lt;T&gt;</span><span class="token comment">//(promiseFunc2: { new(...args: any[]): T }): T {</span><span class="token keyword">function</span> createInstanceFactory2<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>  <span class="token punctuation">(</span>promiseFunc2<span class="token operator">:</span> constructorFuncinterface<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">promiseFunc2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">let</span> promise2 <span class="token operator">=</span> createInstanceFactory<span class="token operator">&lt;</span>Promise<span class="token operator">&gt;</span><span class="token punctuation">(</span>Promise<span class="token punctuation">)</span><span class="token punctuation">;</span>promise2<span class="token punctuation">.</span><span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 构建泛型工厂函数写法3:参数类型为直接写出来的构造函数类型</span><span class="token keyword">function</span> createInstanceFactory3<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>  <span class="token punctuation">(</span>promiseFunc2<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">promiseFunc2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">let</span> promise3 <span class="token operator">=</span> createInstanceFactory<span class="token operator">&lt;</span>Promise<span class="token operator">&gt;</span><span class="token punctuation">(</span>Promise<span class="token punctuation">)</span><span class="token punctuation">;</span>promise3<span class="token punctuation">.</span><span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>慕课网 TS 高级课程</strong></p><h4 id="4-6-【-TS-交叉类型】理解交叉类型和深入分析交叉类型的应用场景"><a href="#4-6-【-TS-交叉类型】理解交叉类型和深入分析交叉类型的应用场景" class="headerlink" title="4-6 【 TS 交叉类型】理解交叉类型和深入分析交叉类型的应用场景"></a><strong>4-6 【 TS 交叉类型】理解交叉类型和深入分析交叉类型的应用场景</strong></h4><p><strong>4-6 课程安排</strong>  </p><p><strong>1 交叉类型定义丶和联合类型区别</strong></p><p><strong>2 交叉类型的应用场景概述</strong></p><p><strong>3 举例展现如何使用交叉类型，体验交叉类型好处。</strong></p><p><strong>定义</strong>：将多个类型合并【多个类型属性和方法的并集】成的类型就是交叉类型。</p><p><strong>和联合类型区别</strong>：</p><p><strong>赋值区别</strong>：</p><p><strong>对于对象类型合成</strong>的交叉类型是多个类型属性和方法的合并后的类型，属于多个类型的并集，必须是两个类型的全部属性和方法才能赋值给交叉类型变量。【可选属性和方法除外】</p><p><strong>对于对象类型合成</strong>的联合类型变量可以接受联合类型中任意一种数据类型全部属性和方法，也可以是两个类型的全部属性和全部方法【可选属性和方法除外】，也可以是一种数据类型全部属性和方法+其他类型的某个属性和某个方法。</p><p><strong>获取属性和方法区别：</strong></p><p>交叉类型变量可以获取两个类型的任意属性和任意方法，而联合类型的变量只能获取两个类型的共同属性和方法【交集属性和交集方法】</p><p><strong>交叉类型应用场景</strong>  </p><p> 通常用于多个对象合并的场景。比如：我们把用户信息，用户角色信息合并成一个对象然后输出。当然后端可以通过连接查询的 SQL 语句来完成到前端的多对象输出，但大多需要表的外键来支持，比如用户和角色就需要角色表有用户外键，对于现实生活中有必须关联在一起的实体【比如商品和库存信息】一般建议数据表用外键来支持前端多个对象的合并输出，虽然影响了效率，但也保证了表的数据合理性和完整性。</p><p>但如果我们临时需要随机把两个根本没有外键关联的数据表取出来的对象合并在一起输出，比如用户信息和日志信息，商品信息和日志信息，订单信息和日志信息，我们就可以用交叉类型来完成。因为我们不可能为了这个临时的对象合并需求把所有的这些表都建立起外键，须知外键太多不仅增加了数据表维护的负担，而且也有较大的影响了表操作效率。</p><p>可能没有数据表基础的同学不太理解，效率低到哪了呢？比如添加一个用户，必然要添加日志 id 【外键】信息，那就要判断这个日志 id 是否在日志表中是否存在，这就是需要时间，当用户访问量大时，某个时刻都要完成添加操作【高并发操作】，这个外键时间检查损耗就比较严重，尽管我们通过各种 SQL 优化来提高 SQL 效率, 【就像一个拖着一辆大卡车【 A 表】的大货车【 B 表】，无论如何调优，也不比空跑的大货车快】</p><p><strong>所以综上所述：交叉类型的应用场景1：可应用这些没有关联的对象合并上，因为这样会极大的方便前端页面的输出。合并如同打包，比单一的一个一个的筛选输出要方便很多，整体感要好很多。</strong></p><p><strong>交叉类型的应用场景2</strong>： <strong>一些 UI 库底层如果用到多个密切连接在一起的关联类型时，可以使用交叉类型来合并输出。</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 如何合并输出下面3个接口类型的对象？使用交车类型最合适。</span><span class="token keyword">interface</span> <span class="token class-name">Button</span> <span class="token punctuation">{</span>  <span class="token literal-property property">type</span><span class="token operator">:</span> string  <span class="token literal-property property">text</span><span class="token operator">:</span> string<span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Link</span> <span class="token punctuation">{</span>  <span class="token literal-property property">alt</span><span class="token operator">:</span> string  <span class="token literal-property property">href</span><span class="token operator">:</span> string<span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Href</span> <span class="token punctuation">{</span>  <span class="token literal-property property">linktype</span><span class="token operator">:</span> string  <span class="token literal-property property">target</span><span class="token operator">:</span> Openlocation<span class="token punctuation">}</span><span class="token keyword">enum</span> Openlocation <span class="token punctuation">{</span>  self <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>  _blank<span class="token punctuation">,</span>  parent<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>慕课网 TS 高级课程</strong></p><h4 id="4-7-【泛型函数-交叉类型-类型断言-枚举】-深度理解泛型函数-交叉类型综合应用"><a href="#4-7-【泛型函数-交叉类型-类型断言-枚举】-深度理解泛型函数-交叉类型综合应用" class="headerlink" title="4-7 【泛型函数+交叉类型+类型断言+枚举】 深度理解泛型函数+交叉类型综合应用"></a><strong>4-7 【泛型函数+交叉类型+类型断言+枚举】 深度理解泛型函数+交叉类型综合应用</strong></h4><p>泛型函数+ TS 交叉类型 代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> cross<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">object</span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name">object</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>objOne<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token literal-property property">objTwo</span><span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">&amp;</span> <span class="token constant">U</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">let</span> combine <span class="token operator">=</span> obj <span class="token keyword">as</span> <span class="token constant">T</span> <span class="token operator">&amp;</span> <span class="token constant">U</span>  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>objOne<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    combine<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> objOne<span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>objTwo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>combine<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      combine<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> objTwo<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> combine<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>慕课网 TS 高级课程</strong></p><h4 id="4-7后-彩蛋：【泛型函数重载-交叉类型-类型断言】-再度加深掌握交叉类型的综合应用【更上一层楼】"><a href="#4-7后-彩蛋：【泛型函数重载-交叉类型-类型断言】-再度加深掌握交叉类型的综合应用【更上一层楼】" class="headerlink" title="4-7后 彩蛋：【泛型函数重载+交叉类型+类型断言】 再度加深掌握交叉类型的综合应用【更上一层楼】"></a>4-7后 彩蛋：【泛型函数重载+交叉类型+类型断言】 再度加深掌握交叉类型的综合应用【更上一层楼】</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> cross<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">object</span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name">object</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>objOne<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token literal-property property">objTwo</span><span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">&amp;</span> <span class="token constant">U</span><span class="token keyword">function</span> cross<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">object</span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name">object</span><span class="token punctuation">,</span> <span class="token constant">V</span> <span class="token keyword">extends</span> <span class="token class-name">object</span><span class="token operator">&gt;</span>  <span class="token punctuation">(</span>objOne<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token literal-property property">objTwo</span><span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">,</span> <span class="token literal-property property">objThree</span><span class="token operator">:</span> <span class="token constant">V</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">&amp;</span> <span class="token constant">U</span> <span class="token operator">&amp;</span> <span class="token constant">V</span><span class="token keyword">function</span> cross<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">object</span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name">object</span><span class="token punctuation">,</span> <span class="token constant">V</span> <span class="token keyword">extends</span> <span class="token class-name">object</span><span class="token operator">&gt;</span>  <span class="token punctuation">(</span>objOne<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token literal-property property">objTwo</span><span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">,</span> objThree<span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">V</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">let</span> combine <span class="token operator">=</span> obj <span class="token keyword">as</span> <span class="token constant">T</span> <span class="token operator">&amp;</span> <span class="token constant">U</span>  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>objOne<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    combine<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> objOne<span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>objTwo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>combine<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      combine<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> objTwo<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>objThree<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果有第三个对象传递进来实现交叉</span>    <span class="token comment">//let obj = {}</span>    <span class="token comment">//let combine2 = obj as T &amp; U &amp; V</span>    <span class="token comment">//let combine2=combine as T &amp; U &amp; V</span>    <span class="token keyword">let</span> combine2 <span class="token operator">=</span> combine <span class="token keyword">as</span> <span class="token keyword">typeof</span> combine <span class="token operator">&amp;</span> <span class="token constant">V</span>    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>objThree<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>combine2<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        combine2<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> objThree<span class="token punctuation">[</span>key<span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> combine2<span class="token comment">// 三个对象交叉结果</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> combine<span class="token punctuation">;</span><span class="token comment">// 两个对象交叉结果</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>泛型类+泛型接口+泛型类约束的复杂应用</title>
      <link href="/2022/05/11/fan-xing-lei-fan-xing-jie-kou-fan-xing-lei-yue-shu-de-fu-za-ying-yong/"/>
      <url>/2022/05/11/fan-xing-lei-fan-xing-jie-kou-fan-xing-lei-yue-shu-de-fu-za-ying-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="泛型类-泛型接口-泛型类约束的复杂应用"><a href="#泛型类-泛型接口-泛型类约束的复杂应用" class="headerlink" title="泛型类+泛型接口+泛型类约束的复杂应用"></a>泛型类+泛型接口+泛型类约束的复杂应用</h2><h3 id="3-1-泛型类准备"><a href="#3-1-泛型类准备" class="headerlink" title="3.1 泛型类准备"></a>3.1 泛型类准备</h3><ul><li><p>为什么要用泛型类【好处】  </p><p> 可以看看之前提到的<code>ArrayList</code>的实现方式</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">ArrayList</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> element<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>object<span class="token operator">&gt;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>element <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> index<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">public</span> <span class="token function">add</span><span class="token punctuation">(</span>obj<span class="token operator">:</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> obj  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">checkIndex</span><span class="token punctuation">(</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'index must bigger than 0'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">get</span><span class="token punctuation">(</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">[</span>index<span class="token punctuation">]</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">'lisi'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token keyword">let</span> obj3 <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">'liuwu'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token keyword">let</span> arrayListOne <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>arrayListOne<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span>arrayListOne<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrayListOne<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>arrayListOne<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://gitee.com/zhangbing520/images/raw/master/img/202205102044752.png" alt="image-20220510204450660" style="zoom:100%;"></li></ul><p>​但上述的实现方式有一些缺点，现在的实现方式将数组元素规定为 <code>object</code>，当需求变更，需要变为<code>string</code>时，则需要将上述代码所有的<code>object</code>改为<code>string</code>，这样的处理方式实际上是有很大的不方便之处，而<strong>泛型</strong>的出现可以效解决上述问题。</p><h3 id="3-2-泛型类定义、格式"><a href="#3-2-泛型类定义、格式" class="headerlink" title="3.2 泛型类定义、格式"></a>3.2 泛型类定义、格式</h3><ul><li><h4 id="泛型定义"><a href="#泛型定义" class="headerlink" title="泛型定义"></a>泛型定义</h4></li></ul><p>​泛型：一种参数化的数据类型，具有以下的特点：</p><p>​1. 定义时不明确，使用时必须明确成某种具体数据类型的数据类型</p><p>​2. 编译期间进行数据类型安全检查的数据类型</p><blockquote><p><code>特别注意</code>：</p><pre><code> 1. 类型安全检查发生在**编译期间** 2. 泛型是参数化的数据类型，使用时明确化后的数据类型就是参数的值</code></pre></blockquote><ul><li><h4 id="泛型格式"><a href="#泛型格式" class="headerlink" title="泛型格式"></a>泛型格式</h4><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">类名<span class="token operator">&lt;</span>泛型形参类型<span class="token operator">&gt;</span></span>泛型形参类型必须是<span class="token constant">A</span><span class="token operator">-</span><span class="token constant">Z</span>任何一个字母，如下：<span class="token keyword">class</span> <span class="token class-name">ArrayList<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span><span class="token punctuation">{</span>array<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token function">add</span><span class="token punctuation">(</span>data<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>    <span class="token operator">...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>使用泛型改写ArrayList： </p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">ArrayList<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> element<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>element <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> index<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">public</span> <span class="token function">add</span><span class="token punctuation">(</span>obj<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> obj  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">checkIndex</span><span class="token punctuation">(</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'index must bigger than 0'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">get</span><span class="token punctuation">(</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">[</span>index<span class="token punctuation">]</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment">// 函数重载</span>  <span class="token keyword">public</span> <span class="token function">remove</span><span class="token punctuation">(</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span>  <span class="token keyword">public</span> <span class="token function">remove</span><span class="token punctuation">(</span>obj<span class="token operator">:</span> object<span class="token punctuation">)</span><span class="token operator">:</span> object  <span class="token keyword">public</span> <span class="token function">remove</span><span class="token punctuation">(</span>removeIndexOrItem<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> removeIndexOrItem <span class="token operator">===</span> <span class="token string">'number'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>element <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> removeIndexOrItem <span class="token operator">!==</span> index<span class="token punctuation">)</span>      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'this.element:'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>element <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>item <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name <span class="token operator">!==</span> removeIndexOrItem<span class="token punctuation">.</span>name<span class="token punctuation">)</span>      <span class="token keyword">return</span> removeIndexOrItem    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">type</span> <span class="token class-name">Myobj</span> <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">}</span><span class="token keyword">let</span> obj1<span class="token operator">:</span> Myobj <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token keyword">let</span> obj2<span class="token operator">:</span> Myobj <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">'lisi'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token comment">// let arrayListOne = new ArrayList&lt;object&gt;()</span><span class="token keyword">let</span> arrayListOne <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList<span class="token operator">&lt;</span><span class="token keyword">typeof</span> obj1<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>arrayListOne<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span>arrayListOne<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrayListOne<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrayListOne<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">)</span>arrayListOne<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​</p><h3 id="3-3-TS-泛型类：object-为什么不能替代类上的泛型"><a href="#3-3-TS-泛型类：object-为什么不能替代类上的泛型" class="headerlink" title="3.3 TS 泛型类：object 为什么不能替代类上的泛型"></a>3.3 TS 泛型类：object 为什么不能替代类上的泛型</h3><ul><li><p>原因一：编译期间 object 无法进行类型安全检查，而泛型在编译期间可以进行类型安全检查</p><p>Object 接受也只能接受所有的 object 类型的变量，比如 Customer，Student，Dog 类的实例都是对象类型，或者自己定义的对象，都可以传递给  object 类型的方法参数或属性，但如果我们只希望添加 Customer 的对象，当添加其他类的对象要求必须出现编译错误，但是 object 无法做到，就只能用泛型了。</p></li></ul><ul><li><p>原因二：object 类型数据无法接受非 object 类型的变量，只能接受 object 类型的变量，泛型能轻松做到</p><p>正因为 object 接受也只能接受所有的 object 类型的变量，那么如果有一个集合【数组封装类】有一个 add 方法，允许每次添加指定类型的变量到 add 方法的参数，比如，我们第一轮是希望添加 10 次字符串类型的变量，第二轮希望添加 10 次整数类型变量，第三轮希望添加 10 次 Customer 类型的变量，泛型能轻松做到。object 类型数据无法接受任意非 object 类型的变量</p></li><li><p>原因三：object 类型数据获取属性和方法时无法自动提示</p><p>一种泛型类型被具体化成某种数据类型后，该数据类型的变量获取属性和方法时会自动提示，提高代码开发效率和减少出错，但在 object 类型的变量无法获取数据类型的属性和方法，降低了体验感和开发效率。</p></li></ul><blockquote><p>注：object 和 Object 的区别</p><p>​1. Object范围较广，number 也是 Object 的子类</p><p>​2. 属性和方法：Object可以点出来</p></blockquote><img src="https://gitee.com/zhangbing520/images/raw/master/img/202205110052773.png" alt="image-20220511005225717" style="zoom:60%;">]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + Github 搭建博客</title>
      <link href="/2022/05/10/shi-yong-hexo-da-jian-bo-ke-liu-cheng/"/>
      <url>/2022/05/10/shi-yong-hexo-da-jian-bo-ke-liu-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="使用hexo搭建博客流程"><a href="#使用hexo搭建博客流程" class="headerlink" title="使用hexo搭建博客流程"></a>使用hexo搭建博客流程</h2><h3 id="1-基础搭建"><a href="#1-基础搭建" class="headerlink" title="1. 基础搭建"></a>1. 基础搭建</h3><ol><li><p>下载Node（包括node npm）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">node</span> -v<span class="token function">npm</span> -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><span id="more"></span>   <ol start="2"><li><p>切换到主页</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">su</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>安装cnpm</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g cnpm --registry<span class="token operator">=</span>https://registry.npm.taobao.orgcnpm -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>安装hexo</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cnpm <span class="token function">install</span> -g hexo-clihexo -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>建立博客文件夹</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> blog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>切换目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> blog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用hexo生成博客</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> hexo init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>启动博客</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>本地可以预览博客</p></li><li><p>新建一篇文章</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo n <span class="token string">"我的第一篇博客文章"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>修改文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> source/_posts<span class="token function">vi</span> <span class="token string">"我的我的第一篇博客文章.md"</span><span class="token comment"># 修改文件后保存退出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>切换回主页到blog文件夹</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>hexo clean</p></li><li><p>hexo g (生成)</p></li><li><p>启动：hexo s</p></li><li><p>本地可以预览效果</p></li></ol><h3 id="2-博客部署到Github"><a href="#2-博客部署到Github" class="headerlink" title="2. 博客部署到Github"></a>2. 博客部署到Github</h3><ol><li><p>创建Github仓库（已配置ssh keys）</p><img src="https://gitee.com/zhangbing520/images/raw/master/img/202205092351356.png" alt="image-20220509235119241" style="zoom:50%;"></li><li><p>配置token</p><p>github： settings-&gt;Developer settings-&gt;personnal access tokens-&gt;Generate new token</p></li><li><p>上一步生成的token要记得,mac 聚焦搜索 <code>keychain access</code>进入钥匙串，然后搜索github：</p><img src="https://gitee.com/zhangbing520/images/raw/master/img/202205092355461.png" alt="image-20220509235554422" style="zoom:50%;"></li></ol><p>​点击修改密码为生成的token，保存退出。</p><ol start="4"><li><p>在 blog文件加下安装git插件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cnpm <span class="token function">install</span> --save hexo-deployer-git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>设置<code>_config.yml</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> _config.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">deploy:  type: <span class="token function">git</span>  repo: https://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@github.com/zhangbing520/zhangbing520.github.io.git  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>部署到远端</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>代码会自动推送到远端</p></li><li><p>如果没有推成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote <span class="token function">add</span> origin https://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@github.com/zhangbing520/zhangbing520.github.io.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>访问博客：<a href="https://zhangbing520.github.io/">博客地址</a></p></li></ol><h3 id="3-修改主题"><a href="#3-修改主题" class="headerlink" title="3. 修改主题"></a>3. 修改主题</h3><ol><li><p>切换到blog文件夹</p></li><li><p>git clone 主题git地址 themes/主题名称</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https:// themes/yilia<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>配置 <code>_config.yml</code>中的 <code>theme: yilia</code></p></li><li><p>Hexo clean</p></li><li><p>生成静态文件：hexo g</p></li><li><p>启动：hexo s (预览)</p></li><li><p>部署：hexo d</p></li><li><p>等推上去后需要等待一下，之后可以看到最新的页面</p></li></ol><h3 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h3><p><a href="https://www.bilibili.com/video/BV1Yb411a7ty?spm_id_from=333.1007.top_right_bar_window_history.content.click">codesheep b站视频</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
